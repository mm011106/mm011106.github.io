---
layout: post
title: "paho-mqttで回線を切るとどうなるか"
date: 2014-12-29 10:28:40 +0900
comments: true
categories: [paho-mqtt]
---

vimのことを書こうと思いましたが、どうもいいネタが思い浮かばないのでMQTTの話にします。
なので、このポストのファイル名がvmiになっていますが、内容と関係ありません。

paho-mqttでテスト用のサブスクライブスクリプトを動かして、途中でネットワークのコネクションを切るとどうなるか、という実験です。
<!-- more -->

サブスクライバはpythonのスクリプトで、下記のようなものです。これはpaho-mqttのページにあったテスト用のものです。

```python test_subscriber.py
topic = "TOPIC/YOU/WANTS/SEE"
broker = "192.168.0.xxx"
portNo = 1883


import paho.mqtt.client as mqtt

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, rc):
    print("Connected with result code "+str(rc))
	# Subscribing in on_connect() means that if we lose the connection and
	# reconnect then subscriptions will be renewed.
#    client.subscribe("$SYS/broker/messages/#")
    client.subscribe(topic)

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
	print(msg.topic+" "+str(msg.payload))

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(broker, portNo, 60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()

```

で、これをとりあえず実行して、途中でネットワークを切って見ました。

端末上ではこんな感じ。

```sh In case of transmission line failure..

ET/EH40/SITE081002 1419926642, 1767, 1433, 2513, 0
Connected with result code 0
ET/EH40/SITE081002 1419926762, 1767, 1434, 2514, 0
ET/EH40/SITE081002 1419926821, 1767, 1432, 2513, 0
  :
```

スクリプトでは`client.connect(broker, portNo, 60)`として60秒以上交信しないとpingでMQTT接続をキープするように設定しています。この実験では、60秒以上コネクションを切っています。さらにブローカはmosquittoをデフォルトで動かしているので、ブローカがMQTTのコネクションを切ることはありません。（persistent_client_expirationを設定していない）

スクリプトを実行した時のパケットの様子を見てみると。。。。

TCP でのネゴシエーションがあったあと、MQTTでの接続リクエストがなされます。

client -> broker

```
0000  10 23 00 04 4d 51 54 54 04 02 00 3c 00 17 70 61   .#..MQTT...<..pa
0010  68 6f 2f 44 43 46 44 30 32 44 38 38 41 43 43 46   ho/DCFD02D88ACCF
0020  34 38 44 31 41                                    48D1A
```

この場合、paho/DCFD02D88ACCF48D1AをIDとして接続要求を出しています。

この返事として、TCPのACKがあり、続いてMQTTの接続許可がブローカから来ます。
そしてサブスクライブ要求としてトピックの指定をブローカに送ります。

この返事として、TCPのACKがあり、指定したトピックにパブリッシュがあると、サブスクライブされるようになります。

（今回のキャプチャではサブスクライブしたトピックのデータが来る前にMQTTプロトコル上でのpingコマンドが発行されていました）

スクリプト開始から66.9秒後に最初のデータがきました。その後、接続を切ります。

183秒のときに接続を再開。

まず、TCPでの接続のために、クライアントからブローカに向かってSYN,ACK、SYNが取り交わされます。その後、最初の接続と同じように、MQTTのコネクションが最初の接続と同じIDで開始され、次にサブスクライブ要求が発行されています。
サブスクライブ要求後、サブスクライブ確認のメッセージがブローカから帰ってきます。

その3秒後、ブローカからFINパケットとともにデータが送られてきて、クライアントがRSTパケットを返してTCP接続が切られます。
このFIN-RST応答は、そのシーケンス番号から、回線を切る前のコネクションの異常終了のためのやり取りだという事がわかりました。ですので、このパケットに乗っていたデータは以前のコネクションのデータだということで破棄されているはずです。スクリプトの出力を見るとこのデータは出力されていませんので、これは正しい理解だという事にします。

このタイミングはパブリッシュのタイミングなので、サブスクライブデータが送られてくるタイミングでもあります。
ブローカ側としては、TCPコネクションが再開したのでデータを送るけれど、すでに同じIDでコネクション要求が入っているので、これは最後のデータね。ということでFINパケットと共に送られたものと思います。
一方のクライアント側は、再接続しているので、このパケットを受け取るソケットが無く、RSTパケットで強制終了のお願いをして終わりにしたのだと考えられます。

そのあと、最新のデータが配信されてきました。このデータのタイムスタンプは`1419926762`で、スクリプトの出力は確認出来ました。

問題は、
なぜ、コネクション要求がクライアントから出されるのか
という点です。
スクリプトでは、接続がロストした時の内容は記述していません。ということは、ライブラリ側の判断で再接続がなされているという事になります。

で、よく[マニュアル](https://pypi.python.org/pypi/paho-mqtt#network-loop)を読むと、loop_forever()ファンクションがこれを管理しているようです。

##Network loop
>These functions are the driving force behind the client. If they are not called, incoming network data will not be processed and outgoing network data may not be sent in a timely fashion.

>これらのファンクションはクライアントの裏で駆動力となるものです。これらが呼ばれなければ入力されたデータは処理されず、出力されるべきデータは時間通りに送られないでしょう。

##loop_forever()
`loop_forever(timeout=1.0, max_packets=1)`

>This is a blocking form of the network loop and will not return until the client calls disconnect(). It automatically handles reconnecting.

>これはネットワークループのブロッキングフォームで（私には意味不明）、クライアントがdisconnect()関数を呼び出すまでは帰って来ません。自動的に再接続を管理します。

ということなので、（予想では）loop_forever()が再接続を発行して、その結果、スクリプトの処理で再度サブスクライブ要求が出される。ということなのでしょう。

今回、断線後の再接続では同じIDを使っていましたので、MQTTプロトコル的には再度サブスクライブ要求を出さずとも、以前に指定したトピックをサブスクライブできたはずです。

ただ、一体何が起こっているのか判断がつかない状況では、再接続後に再度サブスクライブ要求を出すというのは妥当な処理なのかなとも思います。




