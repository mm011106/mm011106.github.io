<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: et2015 | MQTT and ...]]></title>
  <link href="http://mm011106.github.io/blog/categories/et2015/atom.xml" rel="self"/>
  <link href="http://mm011106.github.io/"/>
  <updated>2015-11-18T21:10:57+09:00</updated>
  <id>http://mm011106.github.io/</id>
  <author>
    <name><![CDATA[Masakazu Miyamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ET/IoT 2015]]></title>
    <link href="http://mm011106.github.io/blog/2015/11/18/iot-et-2015/"/>
    <updated>2015-11-18T17:27:48+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/11/18/iot-et-2015</id>
    <content type="html"><![CDATA[<p>今年もEmbedded Technologyに行って来ましたので、レポートを残しておきます。
展示会はあまり面白くないので、コンファレンスのレポートです。</p>

<p>今年から展示会のタイトルに <code>IoT</code>の冠が付いて、IoTを明示的に意識した展示会になっています。コンファレンスの方はそういう雰囲気ですが、展示会の方はそんなに区別がきっかり付いている感じではありませんでした。</p>

<!-- more -->


<h2>2015/11/18 10:00〜13:00</h2>

<ol>
<li><p>　10:00〜13:00　　<strong>C-1 : Ruby による組み込みソフト開発</strong>　　田中 和明氏　九州工業大学　</p>

<p> Rubyと「組み込み」という言葉がちょっと距離がある感じがして面白そうだったので聞いて見ました。</p>

<p> もともとのRubyの実行環境はかなりリッチである必要があるが、それをどこまでシェイプできるか、組み込みに使えるかどうかというポイントで小型化した処理系。</p>

<p> Ruby処理系とは別物としてのmrubyを作った。（経産省のプロジェクト）</p>

<p> 現状の組み込み開発は、ソフトであるがゆえ自由度があり、その自由度と引き換えに開発コストが上昇している。そこで、開発効率の高いRuby環境を組み込みに持ってくることで生産性の向上を図ろうということ。</p>

<p> mrubyでは、中間コードまでをコンパイルして、ターゲットに持って行き、ターゲット上には専用のRubyVMを実装しておいて、そこで中間コードを実行するというモデルになる。
ポイントとしては、Rubyの動的動作を小さな環境でどのように実行するか、ということだった。オブジェクトの再定義など。（Rubyは全く経験無いのでよくわかりませんが。。。）</p>

<p>  VMは16bitCPUでも実装できる。実際にPICにもポーティングしているとのこと。
  C99コンパイラがあればVMをコンパイルできる。</p>

<p>  利点として、開発用PCのリッチな環境で徹底的にデバッグができること。実際にはターゲットを仮想化した環境を作る必要があるが、IO関係の単純なドライバ（入出力をファイルに落とすとか、プリントするとか）を作るだけ。</p>

<p>  欠点としては、リソースが必要なこと。1MbyteRAM程度は必要。</p></li>
<li><p><strong>mrubyの使われ方</strong>  SCSK九州　石井さん</p>

<p>どのようなシーンで使われているかという話で</p>

<ul>
<li>mod_mruby Apach用モジュール</li>
<li>ios用</li>
<li>ゲーム(PC)での利用</li>
<li>組み込み用</li>
</ul>


<p>組み込みボードとして</p>

<ul>
<li>wakayama.rb ボード　（ルネサスRXプロセッサ）</li>
<li>enzi ボード    （ARM）</li>
</ul>


<p>がある。</p>

<p>（正直、ちょっと選択肢が狭い。自分でポーティングするなら何でもいいのだろうけれど、そこまで出来るスキルがあるならC++でコーディングしてもいいかと思う。）</p>

<p>RAMは1MB程度必要なので、mbedの環境と比較するとちょっと大きいかなと思う。</p></li>
<li><p><strong>mruby組込みシステム開発の勘所</strong>  　SCSK九州　三牧さん</p>

<p> MINDSTORMにmruby環境を実装。</p>

<p> 第1世代目では、ハードウエア環境が64KBRAMだったため、VMを実装できたがフリーエリアが7KBでロボットのアーキテクチャを記述するには不十分で諦め。</p>

<p> 第2世代では64MBにRAMが大きくなったので、余裕で実装。</p>

<p> 実際の利用時にはmrubyだけではだめなので、Cでラップする必要あり。
 OSがあると更にいい。</p>

<p> （ここから先、知識不足でついていけず。。。。大幅カット）</p>

<p> わかったことは、</p>

<ul>
<li>結局、OSがあったほうがいいし、mrubuy単体ではだめ。</li>
<li>レイヤ構造を取らざるを得ないし、ちょっと面倒</li>
<li>ただ、一度そういう環境を作ってしまえばあとはラクチンという感じか？</li>
<li>そこまでするモチベーションがない。</li>
<li>mbedの開発環境などに比べるとリソースリッチ環境が必要</li>
</ul>
</li>
<li><p><strong>実装事例</strong>  IIJ 斎藤さん</p>

<p> ルータのユーザインターフェイスの実装をmrubyでやっている、という話。</p>

<p> webエンジニアが多い環境では、rubyを組み込みに使えるということは大きな利点で、同じ技術者が組み込みの一部を担える。</p>

<p> コンフィグファイルの中にスクリプトを入れられるような構造とすることで、多用なことができるようになる。</p>

<p> UIのような文字の処理が多いところは得意。</p></li>
<li><p><strong>enziによるmruby実行環境</strong>　　ManyColors　　中野さん</p>

<p> JSONパース用のクラスライブラリもあり。（魅力的）</p>

<p> ほとんどがデモンストレーションだったけれど、ボード上で直接インタプリタが動くというのはちょっと変な感じ。</p></li>
</ol>


<hr />

<h2>14:30-15:10</h2>

<ol>
<li><p><strong>IoTビジネス最前線</strong>  ユビキタス　佐野さん</p>

<p> IoTのビジネスモデルというか、何を目指しているのか、的な話。  <br/>
 キーワードとしては、CPS(Cyber Physical System)</p>

<p> M2Mとの違いとして</p>

<ul>
<li>オープン化</li>
<li>データのフィードバック
アーキテクチャがオープンになって接続性が保たれるようになってきている。（昔の電話みたいな感じか？）</li>
</ul>


<p> <strong>ビジネス環境の変化</strong></p>

<ul>
<li><p>1980年代　<strong>量産の時代</strong><br/>
  販売ネットワークの整備によるマスプロダクション<br/>
  生産技術の拡大</p></li>
<li><p>2000年代　<strong>ネットワークの時代</strong><br/>
  製品がネットワークにつながる付加価値<br/>
  ユーザに製品が渡ってから付加価値が上がる仕組み<br/>
  ネットワークコストの低減による環境の下支え<br/>
  ネットワーク技術の向上<br/>
  ->　　デザイン性、サービス、楽しさを軸とした製品の評価</p></li>
<li><p>組み合わせによる付加価値の増大<br/>
  「現実」と「仮想」の組み合わせ<br/>
  「デバイス相互」の組み合わせ</p></li>
<li><p>大手企業の「自前主義」の終焉 <br/>
  いろんなモノが組み合わさってより良いものができる、付加価値の高いものができる<br/>
  ->　<strong>新しいバリューチェーン</strong> <br/>
  一つの物の見方だけでは良いものはできない。多様な視点から見た最適な製品を集めて新しいバリューを創りだす。</p></li>
</ul>


<p> <strong>価値観の変化</strong></p>

<ul>
<li><strong>所有　から　共有</strong></li>
<li><strong>マーケットシェア　から　マインドシェア</strong></li>
<li><strong>買わせる　から　好きになる、使ってもらう時間を長くする</strong></li>
<li><strong>利益の最大化　から　利益の透明化</strong></li>
<li><strong>終身雇用　から　クラウドソーシング</strong></li>
<li><p><strong>画一　から　部分的カスタマイズ</strong></p></li>
<li><p>CPS <br/>
  2006年頃から提唱され始めた現実社会と計算機の中のシステムの統合</p>

<p>  現実社会の現象をセンシングし、処理し、最適なフィードバックを掛けることでいろんなことを最適化しようとすること。</p>

<p>  最適化のためには共有スタイルのビジネスモデルへの対応が必要</p>

<p>  大企業はすでにこういったモデルではついてこれない可能性があり、そういう企業は<strong>プロデューサ的な立場でビジネスをするべき</strong>　</p></li>
<li><p>要素技術<br/>
  デバイス・センサ<br/>
  位置情報：どこにいても、正確に、リアルタイムで<br/>
  UXデザイン：使いやすさ、直感に訴える<br/>
  SNS：人間自身の行動、発言がセンサ</p>

<p>  これら技術は充分安価になっていて参入障壁は低下している（一部の大企業のものではなくなった）</p></li>
</ul>


<p> <strong>ビジネスモデルのイノベーション</strong></p>

<ul>
<li><p>農業用トラクタのIT化<br/>
自動運転は当たり前で、その生産性の増加率の議論へ。<br/>
トラクタの運転パターンを作物に対し最適化、そのパターンを「ソフト」として販売へ。</p></li>
<li><p>公共インフラ工事の最適化<br/>
機材の自動的なデプロイ<br/>
危ないところなど、工事の必要になりそうなところをセンシング</p></li>
<li><p>オープンイノベーション<br/>
  「あるもの」をいかにうまく組み合わせて、「必要なもの」を「必要な人」に届けられるか。</p></li>
</ul>


<p> （プラットフォーム展開：コアビジネスを利用した周辺ビジネスをパッケージングすること）</p>

<p> 感想：<br/>
 全体的な印象として、UNIX的価値観というか、そういうものを感じた。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
