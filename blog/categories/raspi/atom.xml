<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: raspi, | MQTT and ...]]></title>
  <link href="http://mm011106.github.io/blog/categories/raspi/atom.xml" rel="self"/>
  <link href="http://mm011106.github.io/"/>
  <updated>2015-02-26T20:05:29+09:00</updated>
  <id>http://mm011106.github.io/</id>
  <author>
    <name><![CDATA[Masakazu Miyamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[init.dスクリプトを書いてみる]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/23/init-dot-d-script/"/>
    <updated>2015-02-23T21:20:50+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/23/init-dot-d-script</id>
    <content type="html"><![CDATA[<p>以前ハードウエアのスイッチでRaspberry Piをシャットダウンする時に、GPIOを監視するデーモンをシステム起動時に動かすことを試しました。
今回、MQTTのデータ経路を暗号化するためのポートフォワードを起動時にオープンすることを試します。</p>

<!-- more -->


<p>当初の設計では、MQTTでのパブリッシュの時にSSHのポートフォワードを実行するようにしていましたが、外部から操作を可能に出来るようなファンクションも入れておこうということになり、コマンド用のトピックを定義、そこへのメッセージを監視する常駐プロセスを起動する運びとなりました。</p>

<p>そのためデバイスとしては、常にブローカと暗号化経路を維持するのがリーズナブルという判断で、システム起動時に暗号化経路を作るスクリプトをinit.dで作成します。</p>

<h2>init.d用スクリプトを見てみる</h2>

<p>いろいろとwebを検索しましたが、なかなか「これだ」という回答を得られないままでしたが、<a href="https://gist.github.com/atr000/643783">ここで</a>わかりやすいスクリプトを見つけたので、これを元に動作を検証していきます。<br/>
このスクリプトはautosshを起動時に動かすためのinit.d用スクリプトです。
autosshはsshの動作を監視して、止まったら起動させる仕事をします。そのため、設定それ自身はsshのものと同じ（というかsshにそのまま渡す）になります。<br/>
このスクリプトでは、コマンドオプションで全ての指定をしていますが、
今回の様なポートフォワードではパラメタが多くなり、間違えやすくなるのでconfigファイルを作って指定してあげます。<br/>
また、ポートフォワード用のユーザを作ってそのユーザでsshを起動します。</p>

<p>まず、INIT INFO部分について記述がなかったので足しておきます。
INIT INFOが無いと登録したときにいろいろと文句を言われますし、そもそもきちんとしたランレベルで実行されないので、やっておいた方が良いかなと。</p>

<p>完成したスクリプトを最後の方に書いておきます。この内容を順番みていきます。</p>

<p>まずはコメントに見えますが、重要なINIT INFO。</p>

<ul>
<li>Provides:

<ul>
<li>このスクリプトが提供する「ファシリティ名」を定義します。このスクリプトを必要とするその他のスクリプトに、このスクリプトの状態を判断できるように名前を付けておきます。<br/>
他のinitdスクリプトでこのスクリプトの必要性をこの名前（ファシリティ名）で指定しておけば、お互いの必要性を考慮して正しい順序でデーモンが起動するようになります。とのことです。</li>
</ul>
</li>
<li>Required-Start:, Required-Stop:

<ul>
<li>このスクリプトの起動・停止に必要な「ファシリティ」を記載します。<br/>
この例では、「メタファシリティ」という物が使われていて、具体的なスクリプトの名前じゃ無く「こういう状態」というような指示です。この定義については<a href="https://wiki.debian.org/LSBInitScripts">debianのwiki</a>をご覧頂いた方が良いかと思います。</li>
</ul>
</li>
<li>Default-Start:, Default-Stop:

<ul>
<li>このスクリプトを起動する／停止するランレベルの条件を設定します。通常、OSが動作状態の時は2のようです。</li>
</ul>
</li>
</ul>


<p>次に定義されている変数です。</p>

<ul>
<li>TUNNEL変数

<ul>
<li>ssh用のconfigの中で設定されているポートフォワード設定のhost名を指定します。実際の接続はポートフォワード用のユーザで実行されるので、 configファイルはポートフォワード用のユーザの中におきます。具体的には<code>~/.ssh/config</code>になります。<br/>
さらに、この設定ファイルの中で「パスワード無し接続」をするために鍵を指定する必要がありますが、この鍵も同じ場所に入れるようにします。<br/>
鍵へのパスはフルパスで指定した方が無難かと思ったので、そうしてあります。</li>
</ul>
</li>
<li>USER変数

<ul>
<li>ポートフォワード用のユーザ名を指定します。start-stop-daemonでユーザを指定してコマンドを起動するのに必要となります。</li>
</ul>
</li>
<li>DAEMON変数

<ul>
<li>起動するautosshを指定します。コメントにもありますように、リンクとかじゃなく実態を指定する必要があるようです。ここを変更すれば他のコマンド・スクリプトも起動できると思いますが、PIDが出来るとか出来ないとかコマンドによって違うようなので、そこら辺は試しながらstart-stop-daemonのオプションを調整する必要があるようです。</li>
</ul>
</li>
<li>PIFLILE変数

<ul>
<li>pidを保存するファイルを指定します。stopするときpidが必要ですのでpidファイルには正しい値が入っている必要があります。ファイル名そのものは<code>basename $0</code>(このスクリプト自身のパスを含まないファイル名)になります。スクリプト名に拡張子が入っていると、拡張子を含んだ形のpidファイル名になってしまいます。（例えばhogehoge.sh.pid）</li>
</ul>
</li>
<li>SCRIPTNAME変数

<ul>
<li>usageを表示するときに使います。daemonの起動に直接関係ありません。</li>
</ul>
</li>
<li>DESC変数

<ul>
<li>起動スクリプト実行時に何が起動されているのか、を表示しますが、そのときのメッセージです。短めが（4wordぐらい）が良いかもしれません。daemonの起動に直接関係ありません。</li>
</ul>
</li>
<li>ASOPT変数

<ul>
<li>起動するコマンドにオプションを与えるための変数です。今回の例では<code>-M 0 -N host名指定</code>だけです。</li>
</ul>
</li>
</ul>


<p>これらの変数を適宜設定すればokかと思います。</p>

<h2>ポイントは。。。</h2>

<p>実は、autosshの起動の前にssh単体での起動を試しました。そのときの問題はpidの取得で、起動したsshのpidを上手く取得できませんでした。色々調べてみると、実行をバックグラウンドに移行するときの指定にコツが必要でした。</p>

<ul>
<li>ssh にもバックグラウンドに移行するオプション(-f)があるが、それを使うと上手くpidを取得できない</li>
<li>そのため、start-stop-daemonコマンドの「起動したプロセスをバックグラウンドに移行する」オプションである<code>--background</code>指定する</li>
<li>さらに、このオプションを指定した場合 <code>--make-pidfile</code>を付ける。</li>
</ul>


<p>これらをきちんとやると、PIDファイルが出来て上手く行きました。ですので、これをそのままautosshに適用しました。</p>

<p>結果的に、コマンドラインは</p>

<pre><code>start-stop-daemon --start --quiet --background \
--chuid $USER --user $USER --pidfile $PIDFILE  \
--make-pidfile --exec $DAEMON -- $ASOPT
</code></pre>

<p>となりました。他のコマンド／スクリプトのデーモン化では<code>--make-pidfile</code> <code>--background</code>は不要かもしれません。</p>

<ul>
<li><code>--chuid</code> はdaemonを起動するときのユーザ名を指定します。</li>
<li><code>--user</code> はプロセスをチェック（起動しているかどうか）の時のユーザ指定のようです。</li>
</ul>


<p>シンプルなスクリプトになりましたので、他の用途にも使っていこうと思います。</p>

<p>これを起動時に動かすためには、</p>

<p><code>
sudo update-rc.d SCRIPTNAME defaults
</code></p>

<p>としましょう。これ以前に周到に動作チェックをしたほうがいいですけど。</p>

<pre><code class="sh mqtt-pf">
#! /bin/sh
### BEGIN INIT INFO
# Provides:          mqtt-pf
# Required-Start:    $syslog $network sshd
# Required-Stop:     $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Port forward for MQTT protocol
### END INIT INFO

#
# Author:   Andreas Olsson &lt;andreas@arrakis.se&gt;
# Version:  @(#)autossh_tunnel.foo  0.1  27-Aug-2008  andreas@arrakis.se
# modified : 13-Feb-2015 mqtt.and@gmail.com #     
#
# For each tunnel; make a uniquely named copy of this template.

## SETTINGS

#
# specify a host name descibed in /home/${USER}/.ssh/ssh_config
TUNNEL="MY_Broker"

#
#  user name for port forwading
USER="pfuser"

#
# You must use the real autossh binary, not a wrapper.
DAEMON=/usr/lib/autossh/autossh
#
## END SETTINGS

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

NAME=`basename $0`
# NAME is always including the extension of $0
# the script should be named without extension for good looking
PIDFILE=/var/run/${NAME}.pid
SCRIPTNAME=/etc/init.d/${NAME}
DESC="SSH Tunnel for MQTT protocol"

# exit when test result = false
test -x $DAEMON || exit 0

export MQTT_PF_PIDFILE=${PIDFILE}
ASOPT=" -M 0 -N "${TUNNEL}

#   Function that starts the daemon/service.
#
#  ssh command is not able to make a pid file with -f (force background) option.
#  To obtain pid file properly, put --background, --make-pidfile option on the start-stop-deamon command
#    and force forground to ssh command.

d_start() {
    start-stop-daemon --start --quiet --chuid $USER --user $USER \
        --background --pidfile $PIDFILE --make-pidfile \
        --exec $DAEMON -- $ASOPT
    if [ $? -gt 0 ]; then
        echo -n " not started (or already running)"
    else
        sleep 1
        start-stop-daemon --stop --quiet --pidfile $PIDFILE \
        --test --exec $DAEMON &gt; /dev/null || echo -n " not started"
    fi

}

#   Function that stops the daemon/service.
d_stop() {
    start-stop-daemon --stop --quiet --pidfile $PIDFILE \
        --exec $DAEMON \
        || echo -n " not running"
}


case "$1" in
  start)
    echo -n "Starting $DESC: $NAME"
    d_start
    echo "."
    ;;
  stop)
    echo -n "Stopping $DESC: $NAME"
    d_stop
    echo "."
    ;;

  restart)
    echo -n "Restarting $DESC: $NAME"
    d_stop
    sleep 1
    d_start
    echo "."
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart}" &gt;&amp;2
    exit 3
    ;;
esac

exit 0
</code></pre>
]]></content>
  </entry>
  
</feed>
