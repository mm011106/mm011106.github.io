<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mqtt, | MQTT and ...]]></title>
  <link href="http://mm011106.github.io/blog/categories/mqtt/atom.xml" rel="self"/>
  <link href="http://mm011106.github.io/"/>
  <updated>2015-12-06T11:22:48+09:00</updated>
  <id>http://mm011106.github.io/</id>
  <author>
    <name><![CDATA[Masakazu Miyamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ET/IoT 2015　コンファレンスレポート3日目]]></title>
    <link href="http://mm011106.github.io/blog/2015/11/22/iot-et-2015-day3/"/>
    <updated>2015-11-22T15:19:46+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/11/22/iot-et-2015-day3</id>
    <content type="html"><![CDATA[<p>三日目のレポートです。</p>

<!-- more -->


<hr />

<h1>11/20 10:00〜10:45</h1>

<h2><em>状態遷移設計の基本とツールによる効率化</em>　　河野さん　　スパークシステムズ</h2>

<p>状態遷移設計の話。以前書籍を買って勉強したけれど、それを裏打ちする情報を得たくて参加。<br/>
この会社はツールを売っている会社。</p>

<ol>
<li>状態遷移設計とは</li>
<li>設計のためのヒント</li>
<li>ツールの活用</li>
</ol>


<hr />

<ul>
<li><p>状態遷移設計とは<br/>
  ここでは表記方法としてUML/SYSMLを使用</p>

<ul>
<li>「状態」に着目した「振る舞い」の設計</li>
<li>「振る舞い」の対語として「構造」</li>
<li>システム全体を見通すための状態遷移設計とソースコードを起こすためのものがある</li>
</ul>


<p>  前者の「システム全体を見通すためのもの」にフォーカスする</p></li>
<li><p>状態とは何か<br/>
  区分可能な状況に名前をつけて定義したもの<br/>
  状態が違えば同じ入力でもレスポンスが異なる可能性がある。</p></li>
<li><p>遷移とは<br/>
  状態が変化すること</p>

<ul>
<li>イベントによるもの</li>
<li>条件によるもの</li>
</ul>


<p>  遷移の前後で処理がある可能性を考慮</p></li>
<li><p>表記方法<br/>
  <a href="http://www.sparxsystems.jp/products/EA/tech/StateMachine.htm">表記例など</a><br/>
  イベントドリブンな処理が多い場合、それを記述しやすい<br/>
  イベント、状態を中心に全体を見渡すと見え易い、考えやすい。<br/>
  並列処理を記述しやすい（複数のステートマシンを定義する）</p></li>
<li><p>設計の流れ</p>

<ul>
<li>状態の抽出<br/>
モジュール全体、外部、内部</li>
<li>状態間の遷移の抽出</li>
<li>操作の流れに沿った遷移の検討</li>
<li>イベント抽出から状態（どうあるべきか）を考える</li>
</ul>
</li>
<li><p>状態抽出のヒント<br/>
  イベント処理の場合、処理中がステートの場合が多い<br/>
  具体的な状況からステートを抽出する</p>

<ol>
<li> すべての出力パターンを考える</li>
<li> すべてのパターン同士をつなぐイベントを記入</li>
<li> 共通のものを見出す</li>
<li> 状態の共通性、親子関係を見出す</li>
</ol>


<p>  矛盾なく、無駄なく</p></li>
<li><p>注意点
  手順にならないように<br/>
  考えるのは「状態」であって「手順」ではない。<br/>
  =>　<strong>製品から見た時の動き</strong>　を考える<br/>
  これは、ユーザから見た時の動き（ユースケース）とは異なる。</p></li>
<li><p>より良い状態遷移設計のためのヒント</p>

<ol>
<li> 状態をまとめる<br/>
階層的な構造を持ったステートを作ると見やすくなる可能性</li>
<li> 色や線の太さで区別してみる（異常と正常、通常と緊急など）　見通しが良くなる</li>
<li> 利用する要素を最小限にして直感的にわかりやすく（図を書くのは見通しを良くするため）</li>
</ol>
</li>
</ul>


<h3>感想：</h3>

<p>わかりやすい話だったし、具体的な図の書き方が理解できたような気がする。<br/>
ツール自身は比較的安価だったので、お絵かきツール的なレベルでとりあえず使ってみるのもいいかもしれない。</p>

<p>まずはやって見るところから始まるし。</p>

<hr />

<h1>2015/11/20 13:00〜13:45</h1>

<h2><em>IoT通信技術が生む、新たな価値・サービスとは？</em>　　和泉さん　株式会社日新システム</h2>

<p>日進システムさんでやられているIoTデバイス（ハブ）を中心とした解説。</p>

<p>ざっくりまとめると</p>

<ul>
<li>IoTは現在幻滅期に入っている（ガードナー　<a href="https://www.gartner.co.jp/press/html/pr20150827-01.html">ハイプサイクル　2015年版</a>）。</li>
<li>デバイス側は未だ標準化されておらず、ビジネスが立ち上がるまで数年かかるだろう。</li>
<li>Industry 4.0 などはIoTを生産基盤としてとらえているが、まだ夢の話。現状できることからはじめるべき</li>
<li>実例として920MHZ帯(Wi-SUN)の活用例</li>
<li><a href="https://unit.aist.go.jp/cfsr/2009/PDRevakit/">PDR</a>、音波ビーコンによる室内の位置検出</li>
<li>Wi-SUNのネットワークを3Gと相補的に使うことで、長期バッテリ動作のシステムが構築できる</li>
</ul>


<p>と言った感じ。</p>

<h3>感想：</h3>

<p>ということで、Wi-SUNが使えそうかなあと思い調べて見ることにする。</p>

<hr />

<h1>2015/11/20 14:00〜14:45</h1>

<h2><em>産業向けIoTの実現に必須のセンサ計測とエッジコンピューティング </em>　　岡田さん　日本ナショナルインスツルメンツ</h2>

<p>NIでのIoTの取り組みについて。<br/>
実世界はアナログで動いており、それをそのままサンプリングした場合データが膨大になる。なので、エッジデバイスできちんと処理をしてあげましょう。という話。</p>

<p>キーワード：</p>

<ul>
<li>構造化データ（処理データ）　＜ー＞　非構造化データ（生データ）</li>
<li>「ビッグ『アナログ』データ」TM</li>
<li>マルチモーダルなセンシングシステムでは、相互のデータの同期が重要ー＞NIでのソリューションで解決可能</li>
</ul>


<p>全体的に既知の内容でしたので、ばっさり省略。</p>

<h3>感想：</h3>

<p>NIは比較的大きな規模のIoTデバイスを想定している。特に動画・画像系の処理に注力している感じ。AlteraなどがSoCで実現していることを、計測ボード（ユニット）で実現し、TATを短くすることで付加価値をつけるというスタンス。<br/>
（しかしながら、LabViewが有効なツールだとは思えない）<br/>
大型のデバイスを持ち込むことで高度な処理を比較的短時間で具現化できること、変更が容易であるため観測対象が変化した場合も同じ構成のハードウエアで継続的に処理できる可能性をアピール。</p>

<hr />

<h1>2015/11/20 15:00〜16:30</h1>

<h2><em>どう使う？IoT時代のオープンソース</em>　パネルディスカッション</h2>

<p>モデレーター：進藤 智則 NikkeiBP</p>

<p>パネリスト：</p>

<ul>
<li>姉崎 章博　NEC</li>
<li>太田 寛　　日本マイクロソフト</li>
<li><p>鈴村 延保　アイシン・コムクルーズ</p>

<p>  パネリストについて詳しくは<a href="http://www.jasa.or.jp/expo/conf/confpage-p02.html">こちら</a></p></li>
</ul>


<p>太田氏：</p>

<ul>
<li>プロトコルなどが高度化し速い速度で入れ替わっている時代に自前でコーディングするのは不可能に近い。そのためOSSの利用は必須といってもいい。</li>
</ul>


<p>（他に注目すべき発言なし）</p>

<p>鈴村氏：</p>

<ul>
<li>自動車の業界ではOSSを利用することはかなりハードルが高い（ライセンス）</li>
<li>ただ、OSSのプラットフォームや考え方は社内の開発ワークフローに導入すべき
  レビューの管理、工程の可視化、ドキュメンテーションなどなど。。</li>
<li>特にGitHubの環境は開発に最適と思われるのでどんどん活用するべき</li>
</ul>


<p>姉崎氏</p>

<ul>
<li>OSSのライセンスについて間違った考え方をしている人が多い

<ul>
<li>ライセンスは「契約」ではなく「許諾の条件」である。</li>
</ul>
</li>
<li><p>著作権により著作物の複製・2次利用は<del>制限</del>著作者の専有の権利とされているが、
BSD・GPLなどのライセンス条項は「こういう状態で配布すれば
<del>著作権で主張される権利を一部緩和</del>著作者が専有する権利の行使を許諾しますよ」ということ。</p></li>
<li>よって、ライセンス違反は著作権の侵害となる。</li>
</ul>


<p><em>IPAのOSSライセンスについてのレポートはこの点で嘘が書かれている</em></p>

<p><strong>2015/11/25:講演者の姉崎さまに当ページの記載についてご指摘いただきましたので修正しました。ありがとうございます。姉崎さま。</strong></p>

<h3>感想</h3>

<p>マイクロソフトの話は大したことは無く、いつも大口を叩く割にアタリマエのことしか言ってない。</p>

<p>一方、鈴村氏はミッションクリティカルな分野でOSSの活用を考えており、OSSそのものよりそれによって導きだされた開発環境や手法が有効であるとの発言で、それには重みを感じた。</p>

<p>姉崎氏のライセンスの話は、OSSライセンスの概観とともに考え方についても語られており、大変参考になった。<br/>
<a href="http://www.atmarkit.co.jp/flinux/index/indexfiles/osslcindex.html">@ITの記事</a>をリンクしておきます。</p>

<h3>感想</h3>

<p>OSSのライセンスは正直良くわからないことが多かったが、今回のtalkを聞いて概要がつかめたような感じがする。今後活用することもあると思うので、勉強したい。<br/>
また、GitHubの活用についても、「使い方」ではなく「ワークフローのあり方」とGitHub上でそのあるべき姿をどのように実現するのか・できるのか、という点から勉強しなおしてみたいと思った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ET/IoT 2015　コンファレンスレポート 2日目]]></title>
    <link href="http://mm011106.github.io/blog/2015/11/21/iot-et-2015-day2/"/>
    <updated>2015-11-21T11:12:50+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/11/21/iot-et-2015-day2</id>
    <content type="html"><![CDATA[<p>二日目のレポートです。雨模様でした。</p>

<!-- more -->


<hr />

<h1>11/19 10:00〜11:30</h1>

<h2>TSI4  <em>つながるIoTシステムのセキュリティ確保に向けて</em>　　重要生活機器連携セキュリティ協議会 伊藤 公祐さん</h2>

<p>セキュリティのお話で、なかなかまとまった話をweb上で見つけられないのでいい機会でした。</p>

<p><strong>内容：</strong></p>

<ol>
<li>クラッカーの視点から　（事例紹介）</li>
<li>IoT標準か動向</li>
<li>セキュリティ対策のポイント　->　開発プロセスの検討</li>
</ol>


<hr />

<ol>
<li><p>事例紹介</p>

<ul>
<li><p>Jeepのcase</p>

<ul>
<li>wifiがインターネットにつながっていて、外から入れる。</li>
<li>VPNの脆弱性（電話会社のサービス）</li>
</ul>


<p>  クラッカーとしては、内部のファームウエアを書き換える際に、「動くファーム」を作ることが大変だった。経路確保や書き換えそのものはおおきな作業ではない。</p></li>
<li><p>プラントのセンサネットからメインのネットへの侵入
通常（インターネットからイントラへ）と逆向きの侵入。<br/>
センサネットの脆弱性を狙った。</p></li>
<li><p>ライフルの照準機へのクラッキング
対象物の危険性とリスクを考慮した「重要度」の位置づけ</p></li>
<li><p><strong>教訓：</strong><br/>
設計でセキュリティを作り込む。製品を取り巻く環境まで含めて「製品の一部」として考えてセキュリティの確保をいかにするか。<br/>
デバグのためのハードウエアのポート（GPIO）でさえも、バックドアになる可能性。</p></li>
</ul>


<p> ハードウエアはリバースエンジニアリングされる前提で設計する。</p>

<p> クラッキングの最短ルートは「ファームウエアの書き換え」</p>

<ul>
<li>クラッカーの視点

<ul>
<li>ターゲット：　高価値なものの自由を奪いたい</li>
<li>そのシステムがどう動いているのか理解するため分解、解析をする</li>
<li>コントロールを奪う糸口を探す</li>
<li>できるだけ汎用のインターフェイスを使ってローコストに作業する</li>
</ul>
</li>
</ul>


<p> インターネットにつながっている機器の口を見つけるサイト：
 <a href="https://www.shodan.io/">SHODAN</a></p></li>
<li><p>標準化</p>

<ul>
<li><a href="http://www.onem2m.org/">oneM2M</a> 接続レベルの標準化</li>
<li>ITU-T JCA-IoT  IoTの標準化を見守るような立場</li>
<li>SAE 自動車の中で使われる標準化のなかでIoTの検討</li>
<li>ETSI 自動車向け標準化組織</li>
<li><a href="https://www.car-2-car.org/index.php?id=22">C2C</a> 自動車同士の接続　TAL(Trust Assurance Level)というのを定義していて、「お互いどれだけ信頼できるのか」ということを知らせ合い、情報の優先度選択ができるようになっている</li>
</ul>


<p> TALのような考え方は車だけでなくIoT全般に必要となる。</p>

<p> セキュリティとセーフティの両立：同じアナロジーで考えてみる</p>

<ul>
<li>IEC61508-1　プラント・工場の安全性</li>
<li>EN50126-5(draft)  鉄道の安全性</li>
</ul>


<p> 日本の状況</p>

<ul>
<li>NISC 2015　セキュリティ方針</li>
<li>IPA ガイドライン</li>
</ul>


<p> セーフティオリエンテッドデザインとともにセキュリティオリエンテッドな考え方も入れるべき。ISO27001, IEC61508<br/>
 ただ、IoTにはヘビーな面も。。。。</p>

<p> セキュリティコストと製品の価格のバランスが必要（でも、最低限は）</p></li>
<li><p>IoTセキュリティ対策</p>

<p> 脆弱性はどこにあるか<br/>
 <a href="http://jvndb.jvn.jp/">JVN iPedia</a>に一般的なクラッキングターゲットとなる<a href="https://www.ipa.go.jp/security/vuln/CWE.html">脆弱性</a>が書かれている。ここから検討していく</p>

<ul>
<li><p>設計プロセスでの対応</p>

<ul>
<li>セキュリティ要件（どの程度）</li>
<li>セキュリティのアーキテクチャ（どうやって）</li>
<li>コーディングの工夫（リバースされにくいコーディング）</li>
<li>テスト（テスト、ファジング）</li>
</ul>
</li>
<li><p>従来行程から加えるべきもの</p>

<ul>
<li>セキュリティ要件、定義</li>
<li>セキュリティ設計</li>
<li>verification</li>
<li>validation</li>
</ul>
</li>
</ul>


<p> 具体的な検討方法　->　<a href="https://www.ipa.go.jp/security/vuln/CVSS.html">CVSS</a></p>

<ul>
<li>含まれる欠陥、脆弱性の定義</li>
<li>あり得る可能性をリストアップ（脅威分析）<br/>
フォルトツリー解析と同様な手法　脆弱性と可能性の積で定量的な「脅威」をはかる</li>
</ul>


<p> IoTに特有なものがあり脆弱なポイントは多い</p>

<ul>
<li>物理的なものへの影響度がある</li>
<li>自動的に動作するものについての深刻度・重要度評価</li>
<li>「きちんと動作する」というのはどういうことか。正常と異常の定義</li>
<li>複雑さに対する考慮（多数の機器がつながっている場合）</li>
</ul>


<p> 最適な対策を最適な部分にデプロイすることが大切。むやみにやっても危険は減らない。<br/>
 何が脅威でどうやってリジェクトするのか。</p>

<ul>
<li>構成要素がすべて自分の製品の一部と考えること。他人任せにしない</li>
<li>ファームウエアアップデート手法の最適化</li>
<li>リバースしにくいハードウエア</li>
<li>広い視野で危機を検討</li>
<li>他人からみてもらう</li>
</ul>
</li>
</ol>


<h3>感想：</h3>

<p>セキュリティというとネットワークの話で、「SSLがどうした」とか言うことかと思ったらもっと全体的な話をしてくれたので、面白かった。<br/>
特にジープのインシデントはいかに最近のクラッキングが高度になっているかということがよくわかった（リバースエンジニアリングでファームウエアを作るってすごい）。<br/>
またセキュリティを安全性と同様なスキームで考えるとわかりやすい、という点は「なるほど」という感じ。具体的な脅威についての考察はひつようだけれど全体を見渡す大切さを教えてもらった。</p>

<hr />

<h1>2015/11/19 12:00〜13:00</h1>

<h2><em>Big Dataのボトルネック</em>　　矢野さん　日立製作所技師長</h2>

<p>話はAIの宣伝で、タイトルとは全く関係ない感じでしたが、これもまとまった話を聞く機会がないので面白く聞かせていただきました。</p>

<p>パラダイムのシフト</p>

<ul>
<li>旧：ソフトに従ってコンピュータが処理する</li>
<li>今：ビッグデータをもとにAIが処理する</li>
</ul>


<p>AIとは（定義）</p>

<ul>
<li>目的、入出力は人間が決める（どんなデータを入れて何をして何を最適化するのか、の指示）</li>
<li>問題に対するロジックを与えない</li>
<li>既存システムに追加することができる（システムを変更しない）</li>
</ul>


<p>ブランコを漕ぐロボットの例->５分ぐらいで最適な漕ぎ方を学習<br/>
=>企業戦略に応用できないか</p>

<p>人間の行動も含めてシステムとして入力して、AIが最適化する（工場の例）</p>

<p>アナロジーとしては「ソフトを作るソフト」　</p>

<h3>感想：</h3>

<p>AIの宣伝だったけど、日立がやっているあたりちょっと怖い感じもする。<br/>
本当に企業戦略立案に入れたらその企業は間違いなく「ブラック」になるとおもう。試行錯誤の中では到底人間には受け入れられない仕事が出てくるはず。ま、そこら辺も含めて評価関数に入れてしまえばいいのだけれどね。<br/>
あと、気になったのが、人間の作ったシステム、特に金融系やソーシャルなものに対して応用すると、何かのきっかけで系が相変化してしまって応答特性が全くかわってしまった場合、収束が難しくなるような気がする。試行錯誤のTATが十分短ければいいけれど、人間系のシステムはたいてい時定数が長いので答えを収束させている間に系が変化するというのはあり得る話。
結局「十分長い時間でみれば”知能”だけど、人間的時定数からすると”試行錯誤”マシン」というところか。人間の「知恵」というのは、「即決」できるところだと思うけどね。</p>

<hr />

<h1>2015/11/19 14:00〜14:45</h1>

<h2><em>IoTを現実のものにするプログラマブル デバイス技術動向</em> 　吉澤さん　cypress semiconductor</h2>

<p>デバイス動向の話。</p>

<p>デバイスの数量的成長は落ちているが、新しいものはどんどん出てきている。特にリーンスタートのためのプログラムブルデバイスとARMベースのプロセッサ。</p>

<p>cypressでのサポート
- spansionとの合併によりFlashメモリ、元富士通のMPU,アナログ系のIPの取り込み
- デジタルではプログラマブルでバイスとプロセッサの融合が進んでいるが、cypressではマイクロプロセッサとコンフィギュアラブルなアナログ回路を融合している</p>

<p>PSocシリーズの紹介</p>

<ul>
<li><p>新しく出るもの</p>

<ul>
<li>1pAレベルのノイズの電流アンプ（トランスコンダクタンスアンプ）が入ったデバイス。</li>
<li>PSoC 7:工業用ARM-M7内蔵</li>
<li>PSoC 6:コンシューマー用ARM-M4,M0+ 内蔵</li>
<li>汎用インターフェイス内蔵：USB,USART,Ethernet,CANなど</li>
<li>アナログインターフェイス回路</li>
</ul>
</li>
<li><p>新しく出たもの</p>

<ul>
<li>PsoC4 BLE: Lowpower版　メモリを256kBに拡張</li>
</ul>
</li>
</ul>


<h3>感想：</h3>

<p>どうもCypressのデバイスは型番が整理されていない印象があって、わかりづらい。<br/>
今回もこのプレゼンの後にwebでしらべてみたけれど、型番とシリーズの関連が読みづらい（なれればわかるのかもしれないけど）。
ちょっと面白そうだけど、そこら辺にいまいち感があるものは、ツールや設定方法もいまいち感がある場合が多いので二の足を踏んでいる感じ。<br/>
（昔評価キットを買いましたが、使ってません）</p>

<hr />

<h1>2015/11/19 15:00〜15:45</h1>

<h2><em>ARM 搭載 SoC FPGA、最新情報と実装例</em>　　小山 さん、吉田さん　Altera</h2>

<p>アルテラのFPGAの技術動向</p>

<p>微細プロセスへの対応</p>

<ul>
<li>現状最先端は10nmプロセス（インテルのファブで製作）</li>
<li>製品としては14nm（FPGA）</li>
<li>一般的なASSP(ASIC)では65nmなのでだいぶアドバンテージがある</li>
</ul>


<p>次世代FPGA(Altera Common Architecture)</p>

<ul>
<li><strong>Cedar</strong> : Cyclone の次世代版　14nmで64bitコアを２コア</li>
<li><strong>Oak</strong> : Arriaの次世代版 14nmでA53を４コア</li>
<li><strong>Sequoia</strong> : Stratixの次世代版 10nm CPU未定</li>
</ul>


<p>事例：</p>

<ul>
<li>自動運転 Cyclone V</li>
<li>PLC（工業用シーケンサ）</li>
<li>3Dスキャナ</li>
</ul>


<p>ツール：</p>

<ul>
<li>Quartus Prime　（IIの次世代版）= SpectraQエンジンを搭載</li>
<li>OpenCL プロセッサ＋周辺回路の設計時のソリューション

<ul>
<li>ロジックのみときはHLS</li>
</ul>
</li>
</ul>


<p>OpenCL</p>

<ul>
<li>(ここら辺間違いを書くといけないので、<a href="https://www.altera.co.jp/products/design-software/embedded-software-developers/opencl/overview.html">こちら参照</a>）</li>
</ul>


<p>私の受け取ったところを書くと、</p>

<ul>
<li>OpenCLで並列処理システムとして、ARMプロセッサとロジック回路の構造を記述しPC上でシミュレーション、デバッグをしてからFPGAにでプロイする。</li>
<li>HDLでコードをかかなくとも（真偽のほどは？）OpenCLの記述で回路も構成できる。</li>
<li>回路だけ書きたいなら&#8221;HLS&#8221;　（VHDLとかの新しいバージョン？調べてみたらsystemCとかに近い立ち位置なのかしら？）</li>
</ul>


<p>説明の中でも、「FPGAだけがターゲットであればC/C++で記述してデバグしたものをHLSに落としてさらにHDLに」というようなことを言っていたような気がする。</p>

<p>画像処理の例：</p>

<p>「視的感覚から状況を判断して動作するオブジェクト」を作ることをターゲットとした。<br/>
従来、機能フローに対して最適なデバイス（FPGAやCPU）を使っていたが、SoCではすべてが1chipに入っている。  <br/>
前処理に近いところをFPGA, 後処理をプロセッサ</p>

<p>アプリケーション：</p>

<ul>
<li>自動運転支援システム</li>
<li>街灯のインテリジェント化（カメラ、センサ）</li>
<li>deep learning</li>
</ul>


<p>OpenCLでの<a href="https://www.altera.co.jp/support/support-resources/design-examples/design-software/opencl/opencl.html">デザイン例</a>をダウンロード可能。</p>

<h3>感想：</h3>

<p>Intelと一緒になってどうなるかと思っていましたが、最先端プロセスを手に入れて一歩先をいく感じでしょうか。10nmはすんごい速いんだろうなあ。<br/>
Intelとしても、ファシリティの減価償却をシェアできるというのはちょっと楽になるですね。<br/>
気になるのは最先端プロセスの値段です。１個10万円とかになっちゃう感じですかね。</p>

<hr />

<h1>2015/11/19 16:00〜16:45</h1>

<h2><em>簡単に始められるアルテラ MAX 10 FPGA開発</em>　　福原  さん　Altera</h2>

<p>Max10は１０世代目製品のうちの一つ</p>

<ul>
<li>MAX10　55nm　Flashメモリのプロセスを利用（不揮発）</li>
<li>Arria10　20nm　TSMCのプロセス</li>
<li>Stratix10 14nm　Intelのプロセス</li>
</ul>


<p>MAX10の特徴として</p>

<ul>
<li>コンフィグメモリ２つ（切り替えて使える）　10ms程度でコンフィグできる</li>
<li>DSPブロック、RAM、DDRコントローラ、オンチップオシレータ、電源内蔵</li>
<li>NIOSII実装可能</li>
</ul>


<p>Enpirionという電源チップも用意　電源シーケンスを自動で管理</p>

<p>NIOSIIは遅い動作でよければ600〜700LE、速いものでも1000LE〜1500LE程度で実装できる</p>

<p>開発ソフト</p>

<ul>
<li>Quartus Primeを使う。</li>
<li>Qsys : IPの接続をウイザード形式でやってくれる（実際に配線する必要なし）</li>
<li>最初にプロジェクトを作るときは、テンプレートから作成することをおすすめ　->　Desgin Store</li>
<li>NiOSIIのコンパイラはEclips環境</li>
</ul>


<p>キット</p>

<ul>
<li>10M08版(8000LE)　で　$50ぐらい</li>
</ul>


<p>トラ技３月ごろキット本を出版予定</p>

<h3>感想：</h3>

<p>MAX10も使ってみたいと思います。でも利用するアプリケーションがない。<br/>
現在の開発環境をアップデートする必要あり。また設定し直すのが面倒くさい。。。。<br/>
キット購入しましょう。（以前マクニカのIoT用のキットを買ったけれど、使い方がいまいちわからず放置中）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ET/IoT 2015　コンファレンスレポート]]></title>
    <link href="http://mm011106.github.io/blog/2015/11/18/iot-et-2015/"/>
    <updated>2015-11-18T20:42:17+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/11/18/iot-et-2015</id>
    <content type="html"><![CDATA[<p>今年もEmbedded Technologyに行って来ましたので、レポートを残しておきます。 展示会はあまり面白くないので、コンファレンスのレポートです。</p>

<p>今年から展示会のタイトルに IoTの冠が付いて、IoTを明示的に意識した展示会になっています。コンファレンスの方はそういう雰囲気ですが、展示会の方はそんなに区別がきっかり付いている感じではありませんでした。</p>

<!-- more -->


<hr />

<h1>2015/11/18 10:00〜13:00</h1>

<h2><em>C-1 : Ruby による組み込みソフト開発</em>　　田中 和明氏　九州工業大学　</h2>

<p>Rubyと「組み込み」という言葉がちょっと距離がある感じがして面白そうだったので聞いて見ました。</p>

<ul>
<li><p>内容</p>

<p>  もともとのRubyの実行環境はかなりリッチである必要があるが、それをどこまでシェイプできるか、組み込みに使えるかどうかというポイントで小型化した処理系。</p>

<p>  Ruby処理系とは別物としてのmrubyを作った。（経産省のプロジェクト）</p>

<p>  現状の組み込み開発は、ソフトであるがゆえ自由度があり、その自由度と引き換えに開発コストが上昇している。そこで、開発効率の高いRuby環境を組み込みに持ってくることで生産性の向上を図ろうということ。</p>

<p>  mrubyでは、中間コードまでをコンパイルして、ターゲットに持って行き、ターゲット上には専用のRubyVMを実装しておいて、そこで中間コードを実行するというモデルになる。 ポイントとしては、Rubyの動的動作を小さな環境でどのように実行するか、ということだった。オブジェクトの再定義など。（Rubyは全く経験無いのでよくわかりませんが。。。）</p>

<p>  VMは16bitCPUでも実装できる。実際にPICにもポーティングしているとのこと。 C99コンパイラがあればVMをコンパイルできる。</p>

<p>  利点として、開発用PCのリッチな環境で徹底的にデバッグができること。実際にはターゲットを仮想化した環境を作る必要があるが、IO関係の単純なドライバ（入出力をファイルに落とすとか、プリントするとか）を作るだけ。</p>

<p>  欠点としては、リソースが必要なこと。1MbyteRAM程度は必要。</p></li>
</ul>


<h2><em>mrubyの使われ方</em> SCSK九州　石井さん</h2>

<p>どのようなシーンで使われているかという話で</p>

<ul>
<li>mod mruby Apach用モジュール</li>
<li>ios用</li>
<li>ゲーム(PC)での利用</li>
<li>組み込み用</li>
</ul>


<p>組み込みボードとして</p>

<ul>
<li>wakayama.rb ボード　（ルネサスRXプロセッサ）</li>
<li>enzi ボード （ARM）</li>
</ul>


<p>（正直、ちょっと選択肢が狭い。自分でポーティングするなら何でもいいのだろうけれど、そこまで出来るスキルがあるならC++でコーディングしてもいいかと思う。）</p>

<p>RAMは1MB程度必要なので、mbedの環境と比較するとちょっと大きいかなと思う。</p>

<h2><em>mruby組込みシステム開発の勘所</em> 　SCSK九州　三牧さん</h2>

<p>MINDSTORMにmruby環境を実装。<br/>
第1世代目では、ハードウエア環境が64KBRAMだったため、VMを実装できたがフリーエリアが7KBでロボットのアーキテクチャを記述するには不十分で諦め。</p>

<p>第2世代では64MBにRAMが大きくなったので、余裕で実装。</p>

<p>実際の利用時にはmrubyだけではだめなので、Cでラップする必要あり。 OSがあると更にいい。</p>

<p><em>（ここから先、知識不足でついていけず。。。。大幅カット）</em></p>

<p>わかったことは、</p>

<ul>
<li>結局、OSがあったほうがいいし、mrubuy単体ではだめ。</li>
<li>レイヤ構造を取らざるを得ないし、ちょっと面倒</li>
<li>ただ、一度そういう環境を作ってしまえばあとはラクチンという感じか？</li>
<li>そこまでするモチベーションがない。</li>
<li>mbedの開発環境などに比べるとリソースリッチ環境が必要</li>
</ul>


<h2><em>実装事例</em> 　　IIJ 斎藤さん</h2>

<p>ルータのユーザインターフェイスの実装をmrubyでやっている、という話。</p>

<p>webエンジニアが多い環境では、rubyを組み込みに使えるということは大きな利点で、同じ技術者が組み込みの一部を担える。</p>

<p>コンフィグファイルの中にスクリプトを入れられるような構造とすることで、多用なことができるようになる。</p>

<p>UIのような文字の処理が多いところは得意。</p>

<h2><em>enziによるmruby実行環境</em>　　ManyColors　中野さん</h2>

<p>JSONパース用のクラスライブラリもあり。（魅力的）</p>

<p>ほとんどがデモンストレーションだったけれど、ボード上で直接インタプリタが動くというのはちょっと変な感じ。</p>

<h3>セッションの感想：</h3>

<p>mrubyがいかに生産性を上げようとも、利用の障壁がC/C++並に下がらないと普及は難しそう。そもそも、おおきなファンクションを持ったライブラリは駆動環境も大きくなるはずなので、その辺のバランスあるいはアプリケーションとのバランスが必要な気がする。（素人ながら）<br/>
ミッションクリティカルなソフトウエアパスではなく、ユーザインターフェイスとか緩い外部とのコネクションとかそういったところでは使えそう。（結局Cが要るのだから、こういったバランスはとりやすいかと）</p>

<hr />

<h1>2015/11/18  14:30-15:10</h1>

<h2><em>IoTビジネス最前線</em>　　 ユビキタス　佐野さん</h2>

<p>IoTのビジネスモデルというか、何を目指しているのか、的な話。<br/>
キーワードとしては、<strong>CPS(Cyber Physical System)</strong></p>

<p>M2Mとの違いとして
- オープン化
- データのフィードバック アーキテクチャがオープンになって接続性が保たれるようになってきている。（昔の電話みたいな感じか？）</p>

<h3>ビジネス環境の変化</h3>

<ul>
<li>1980年代　量産の時代

<ul>
<li>販売ネットワークの整備によるマスプロダクション</li>
<li>生産技術の拡大</li>
</ul>
</li>
<li>2000年代　ネットワークの時代

<ul>
<li>製品がネットワークにつながる付加価値</li>
<li>ユーザに製品が渡ってから付加価値が上がる仕組み</li>
<li>ネットワークコストの低減による環境の下支え</li>
<li>ネットワーク技術の向上
->　　デザイン性、サービス、楽しさを軸とした製品の評価</li>
</ul>
</li>
<li>これから

<ul>
<li><p>組み合わせによる付加価値の増大<br/>
=>「現実」と「仮想」の組み合わせ<br/>
=>「デバイス相互」の組み合わせ</p></li>
<li><p>大手企業の「自前主義」の終焉<br/>
いろんなモノが組み合わさってより良いものができる、付加価値の高いものができる<br/>
->　新しいバリューチェーン</p></li>
</ul>


<p>  一つの物の見方だけでは良いものはできない。多様な視点から見た最適な製品を集めて新しいバリューを創りだす。</p></li>
</ul>


<h3>価値観の変化</h3>

<ul>
<li>所有　から　共有</li>
<li>マーケットシェア　から　マインドシェア</li>
<li>買わせる　から　好きになる、使ってもらう時間を長くする</li>
<li>利益の最大化　から　利益の透明化</li>
<li>終身雇用　から　クラウドソーシング</li>
<li>画一　から　部分的カスタマイズ</li>
</ul>


<p><strong>CPS</strong> :</p>

<p>2006年頃から提唱され始めた現実社会と計算機の中のシステムの統合<br/>
現実社会の現象をセンシングし、処理し、最適なフィードバックを掛けることでいろんなことを最適化しようとすること。<br/>
最適化のためには共有スタイルのビジネスモデルへの対応が必要</p>

<p>大企業はすでにこういったモデルではついてこれない可能性があり、そういう企業はプロデューサ的な立場でビジネスをするべき　</p>

<h3>要素技術</h3>

<ul>
<li>デバイス・センサ</li>
<li>位置情報：どこにいても、正確に、リアルタイムで</li>
<li>UXデザイン：使いやすさ、直感に訴える</li>
<li>SNS：人間自身の行動、発言がセンサ</li>
</ul>


<p>これら技術は充分安価になっていて参入障壁は低下している（一部の大企業のものではなくなった）</p>

<h3>ビジネスモデルのイノベーション</h3>

<p>実例：</p>

<ul>
<li><p>農業用トラクタのIT化<br/>
  自動運転は当たり前で、その生産性の増加率の議論へ。<br/>
  トラクタの運転パターンを作物に対し最適化、そのパターンを「ソフト」として販売へ。</p></li>
<li><p>公共インフラ工事の最適化<br/>
  機材の自動的なデプロイ<br/>
  危ないところなど、工事の必要になりそうなところをセンシング</p></li>
</ul>


<h3>オープンイノベーション</h3>

<p>「あるもの」をいかにうまく組み合わせて、「必要なもの」を「必要な人」に届けられるか。<br/>
（プラットフォーム展開：コアビジネスを利用した周辺ビジネスをパッケージングすること）</p>

<h2>セッションの感想：</h2>

<p>全体的な印象として、UNIX的価値観というか、そういうものを感じた。適材適所で小さな仕事をこなすものを大量に投入して効率を上げる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IBM IoT foundationを試してみた]]></title>
    <link href="http://mm011106.github.io/blog/2015/03/29/ibm-iot-foundation/"/>
    <updated>2015-03-29T09:42:17+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/03/29/ibm-iot-foundation</id>
    <content type="html"><![CDATA[<p>デバイスの方で手一杯で、MQTTブローカをVPSで立ち上げるとか、データのビジュアライズとか解析とかまで手が出ないので、SaaSというかIaaSをためしに使って見ることにしました。</p>

<!-- more -->


<p>最近では、wolfram もIoT向けのサービスを提供しているぐらい、いろんな会社でやっていますが、私はMQTTを使っていることもあり、本家IBMの&#8221;IBM Internet of Things foundation&#8221;を試し始めました。<br/>
イマイチわかってはいないのですが、IBM Bluemixというサービスがあって、その拡張としてMQTTを扱えるようにした、というような感じだと認識しています。</p>

<h2>まずはアカウントを作る</h2>

<p>で、早速<a href="https://internetofthings.ibmcloud.com/">IBM IoT foundation</a>のページに行って登録しました。
ページの上の方にSignUp、下の方に Try Quick startのボタンがあったので、QuickStartの方から登録しました。支払い条件とかを聞かれませんでしたので、完全にお試しのようです。
ページの上の方にあるSignUpではコースを選んだりするところがあり、こちらは「購入」という感じです。ただ、デバイスが20台以下、月間のデータ転送量が100MB以下、月間の使用ストレージが1GB以下だと無料のようです。</p>

<p>まずは、アカウントを作ります。
多分<a href="https://apps.admin.ibmcloud.com/manage/trial/iot.html">ここから</a>入れば大丈夫だと思います。。。。大手のIT企業のwebページはどうも複雑で、昨日やったことをトレースしようと思ってもうまく行きませんでした。</p>

<p>登録すると、confirmation e-mailが届きますので指定されたURLをクリックして完了です。
このとき表示されるwebページが「ダッシュボード」となります。左上に”Organization: xxxxx (Trial)&ldquo;のように表示されていると思います。この6文字のコードがデバイスを接続するホスト名につくIDの&#8221;organaization Code&#8221;となりますので、メモしておいてください。</p>

<h2>デバイスを登録</h2>

<p>次にやることは、デバイスの登録です。
このページの左側コラムにあるように、「ページのdeviceタブを押して」「Add Deviceを選択」します。<br/>
そうすると、新しいページに移動します。ページ中央に&#8221;Device Type&#8221;を入力する欄、その下に&#8221;Device ID&#8221;を入力する欄があります。これはデバイスを識別するためのもので、自分で勝手に決めていいようです。私はDevice Type に製品の型式、Device IDに、指示のようにMACアドレス（コロン抜きで）を入れました。</p>

<p>入力を終えると、次のページでデバイスをクラウドに接続するための大事な情報が表示されるので、メモしておきます。</p>

<pre><code class="sh DEVICE IDs">org=asdfjk
type=AD
id=abcd12345654
auth-method=token
auth-token=(@dS&amp;34+#2upCxP1
</code></pre>

<p>のような感じです。</p>

<h2>MQTTで接続</h2>

<p>さあ、これで接続だあ！とmosquitto_pubでデータをパブリッシュしてみます。</p>

<p>ひとまず、ホームとなる「ダッシュボード」に戻ります。URLは<code>https://internetofthings.ibmcloud.com/dashboard/#/organizations/${org}/home</code>のようになるはずです。迷ったらここに戻りましょう（私は何度と無く迷子になりました）。
${org}には先の「大切な情報」の中のorgを入れます。</p>

<p>Deviceタブをクリックして、先ほど登録したデバイスが出てくるのを確認します。</p>

<p>次に、ページの一番上、グレーのバンドのところに&#8221;QuickStart&#8221;というところがあるので、それを押してみます。すると、新しいページに移動して、左側にMACアドレスを入力する欄が出てきます。なんだかわからないまま、うながされるまま登録したデバイスのMACを入れてみます。</p>

<p>すると、「メッセージを待ってます」みたいなセリフが出て「Device IDは登録されていますが、データが来ていません。有効なデータが来ればビジュアライズしますよ」というメッセージが見えます。</p>

<p>ならば、web上でビジュアライズしてもらおうじゃあないか、ということでMQTTでパブリッシュしてみます。</p>

<p>とはいうものの、何をどうしていいやら。。。。。webを捜し回ること1時間ほど。<a href="https://docs.internetofthings.ibmcloud.com/messaging/devices.html">Documentation</a>
を発見。結局これが一番わかり易い感じです。</p>

<p>これによれば、MQTTのパラメタを以下のように指定すればつながるようです。
shellスクリプト風の表記をして見ました。</p>

<ul>
<li>client_id : d:${org_id}:${device_type}:${device_id}</li>
<li>username : &ldquo;use-token-auth&rdquo;</li>
<li>password : ${auth-token}</li>
</ul>


<p>必要な情報はすべてデバイスを登録した時点で「重要な情報」として出てきたものです。</p>

<p>同時にトピックツリーも重要ですが、デフォルトでこのような構成になっているようです。</p>

<ul>
<li>iot-2/evt/${event_id}/fmt/${format_string}</li>
</ul>


<p>event_id,format_stringは任意に（適当に）決めていいようです。ただ、クラウドで処理する分には決まりがあるようです。（ここらへん未だに解明できていない。。。）</p>

<p>具体的にmosquitto_pubのコマンドパラメータに展開すると、</p>

<pre><code class="sh ">mosquitto_pub -i d:asdfjk:AD -h asdfjk.messaging.internetofthings.ibmcloud.com \
-u use-token-auth -P "(@dS&amp;34+#2upCxP1" \
-t iot-2/evt/hogehoge/fmt/json -m "hello IBM"
</code></pre>

<p>のような感じになるはずです。</p>

<p>で、早速、適当なデータをPublishしてみるも<a href="https://quickstart.internetofthings.ibmcloud.com/#/device//sensor/">web上</a>には何も現れません。</p>

<p>また、ダッシュボード上のデバイス一覧を見ると、データが受信されていることはわかったので、一応つながっているのだな。ということはわかりました。<br/>
webでのデータ表示方法の解明まで時間がかかりそうだったので、データが来ていることが確認できた所でやめておきます。</p>

<h2>ダメなら、ブローカとして使えるか？</h2>

<p>デバイスが送ったデータをクラウド上で表示するのが定番でしょうけれど、どうもうまく行かなかったので、クラウドをふつうのブローカと同じように使えないかとやって見ました。 <br/>
結論から言うと、ストレートフォワードなブローカから比べると面倒くさいけど、できました。</p>

<pre><code class="sh"># デバイス側
mosquitto_pub -i d:${ORG}:${TYPE}:${ID} \
 -h AAAAAA.messaging.internetofthings.ibmcloud.com \
 -u use-token-auth -P "${auth-token}" \
 -t iot-2/evt/hogehoge/fmt/text -m "hello IBM"

# サブスクライブ
mosquitto_sub -i a:${ORG}:${TYPE} \
 -h AAAAA.messaging.internetofthings.ibmcloud.com \
 -u "${API-KEY}" -P "${API-AUTH-Token}" \
 -t iot-2/type/${TYPE}/id/${ID}/evt/hogehoge/fmt/text
</code></pre>

<p>サブスクライブするためにはAPI-KEYというものが必要になります。これを発行するためにダッシュボードに戻ります。</p>

<p>ダッシュボードのページに&#8221;API KEYS&#8221;というタブがあるので、それをクリックします。さらに&#8221;New API Key&#8221;というハイライトがあると思うので、それをクリックします。</p>

<p>ポップアップが現れて、Key, Auth Tokenが表示されますので、メモしておきます。サブスクライブするときにこのキーを指定する必要があります。</p>

<h2>まとめ</h2>

<p>最初に&#8221;Organaization&#8221;を作ります。IoT foundationに登録すれば自動的に自分のOrganaizationコードが発行されます。</p>

<p>次に、デバイスを登録します。登録すると接続のためのTYPE,ID,Tokenが発行されます。</p>

<p>さらに、アプリケーション（デバイスのデータを受信・利用する側）のIDを登録します。登録すると key, Auth-tokenが発行されます。</p>

<p>デバイス側のトピックツリーとアプリケーション側のトピックツリーはちょっと違っています。デバイス側のツリーはアプリケーション側のツリーのサブセットという感じです。アプリケーションは多くのデバイスからのデータを取り込む必要があるためそうなっているのかと。</p>

<p>デバイス、アプリケーションkeyは「ダッシュボード」&#8221;<a href="https://internetofthings.ibmcloud.com/dashboard/#/organizations/$">https://internetofthings.ibmcloud.com/dashboard/#/organizations/$</a>{org}/home&#8221;からいつでも確認できます。
デバイスからのパブリッシュのタイムスタンプも確認できるので、動作状況を軽くチェックするにはいいかもしれません。</p>

<p>とりあえず、IBM IoT foundationをMQTTブローカとして使えることがわかりました。目的であるwebアプリケーションを作るところまではまだまだですが、ドキュメントをよく読めばある程度わかるかな、という感じです。</p>
]]></content>
  </entry>
  
</feed>
