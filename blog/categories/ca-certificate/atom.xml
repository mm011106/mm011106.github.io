<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ca certificate | MQTT and ...]]></title>
  <link href="http://mm011106.github.io/blog/categories/ca-certificate/atom.xml" rel="self"/>
  <link href="http://mm011106.github.io/"/>
  <updated>2015-02-02T21:05:01+09:00</updated>
  <id>http://mm011106.github.io/</id>
  <author>
    <name><![CDATA[Masakazu Miyamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[オレオレ証明書を作ってみようかと　実践2]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/02/ore-ore-certificate3/"/>
    <updated>2015-02-02T20:41:28+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/02/ore-ore-certificate3</id>
    <content type="html"><![CDATA[<p>先の投稿では「オレオレ証明書」を作って、無事nginxに導入してTLS接続が出来るようになりました。<br/>
あとはこれをmosquittoに応用するだけ、と思っていたら実はCA certificate（CA証明書）が必要だと言うことにはたと気づき、がっくり。</p>

<!-- more -->


<p>結局、</p>

<ul>
<li>認証局(CA)を作る</li>
<li>その認証局の鍵でサーバの証明書にサインしてもらう</li>
</ul>


<p>と言う手順をとる必要があります。<br/>
認証局と行っても、自己証明書ということでは先に作ったサーバの証明書と同じです。</p>

<h2>自前のCAを作る</h2>

<p>基本的には、サーバの自己証明書を作るのと同じ手順で認証局の証明書（CA certificate)をつくります。手順としては</p>

<ul>
<li>CAの鍵を作る　(CA key)</li>
<li>自己署名の証明書を作る　（これがCAの証明書（CA certificate)になる）</li>
</ul>


<p>となります。 ここでは、CAの鍵をCA_private_key.pem,　CAの証明書をCA_selfsigned_Certificate.pemというファイル名を付けました。</p>

<p>実は、これがいっぺんにできるそうで、これが以下のコマンド。</p>

<pre><code>$ sudo openssl req -new -x509 -newkey rsa:2048 -keyout CA_private_key.pem -days 7300 &gt; CA_selfsigned_Certificate.pem
</code></pre>

<p>このなかで、</p>

<ul>
<li>鍵を作って</li>
<li>リクエスト用のファイルを作って</li>
<li>それに対して自分でサインして</li>
</ul>


<p>という3つのことが行われているようです。</p>

<p>このコマンドでは、キーを暗号化するためのパスフレーズを要求されます。さらに、証明書に記載するための情報（組織名とか所在地とか）を聞かれますので、適宜答えていきます。</p>

<p>最初、以下の様なコマンドでも良いはずですが、パスフレーズを入力するところがでません。確認してみると、鍵は暗号化されていないようです。</p>

<pre><code>$ sudo openssl genrsa 2048 &gt; CA_private_key.pem
$ sudo openssl req -new -key ./CA_private_key.pem -x509 -days 7300 &gt; CA_selfsigned_Certificate.pem
</code></pre>

<p>manでしらべてみると、genrsaのオプションで -des3とか暗号化のオプションを付けないためパスフレーズを聞かれないようです。暗号化する指示をすればパスフレーズを聞いてきました。理由が分かれば当たり前の話。<br/>
なので、最初の鍵を作るコマンドは</p>

<p><code>$ sudo openssl genrsa -des3 2048 &gt; CA_private_key.pem</code></p>

<p>とするのが、安全性の面でも良い感じですかね。</p>

<p>これでCA鍵とCA証明書ができあがりです。「俺様認証局」ですね。この鍵でいくらでも「オレオレ」証明書がつくれます。</p>

<p>会社内、組織内のセキュア接続のためには有効につかえるかな、とおもいます。ただ鍵が流出するといくら社内用といえどもセキュリティ的に問題があるので、きちんと管理しないといけません。鍵には名前も書いてありますしね。</p>

<h2>サーバの証明書にサインする</h2>

<p>それでは、サーバの証明書を作ってみます。</p>

<p>最初にサーバに設置する証明書のための鍵をつくります。さらに、その鍵をもとに証明書署名リクエストファイルを作成します。まあ、申請書みたいな物ですね。これは、前回の<a href="http://mm011106.github.io/blog/2015/01/31/ore-ore-certificate2/">オレオレ証明書を作ってみようかと　実践１</a>を参考にしてください。この記事の１．２．を実行してもらうといいとおもいます。</p>

<p>ここでは、署名リクエストファイルをmyserver.csr、署名付き証明書をmyserver.crtとします。</p>

<p>サーバの証明書にCAのサインをするので、myserver.csrとCA_selfsigned_Certificate.pem（CA証明書）, CA_private_key.pem（CA鍵）が必要になります。</p>

<p>具体的には、</p>

<pre><code>$ sudo openssl x509 -CA CA_selfsigned_Certificate.pem -CAkey CA_private_key.pem -req -days 7300 -CAcreateserial &lt; myserver.csr &gt; myserver.crt
</code></pre>

<p>とします。ここで、-daysはサインする証明書の有効日数、-CAcreateserialは最初に署名するときだけ必要なオプション。これをやるとシリアル番号のファイルが出来るそうな。</p>

<p>これだけで、サーバの証明書にCAのサインをしてサーバに設定出来る証明書ができあがりました。</p>

<p>nginxに入れて動作を確認しました。</p>

<p>ブラウザから証明書を確認すると、「発行者名」と「サブジェクト名」がそれぞれ、CA証明書を作るときに入力した情報、myserverの証明書（証明書署名リクエストファイル）作るときに入力した情報になっているはずです。</p>

<p>ここでもう少しきちんとしたい人は、CA証明書をブラウザに読み込むことで、「この証明書は不明な機関によって署名されています」的なメッセージを回避できます。この作業はこの証明書を信じます、と言う宣言ですので、もしこの鍵が悪用されたりすると大変なことになる可能性があります。鍵の管理はしっかりしておきましょう。</p>

<p>信じてもらうためにはしっかりと行動するということですね。人生。</p>

<p>mosquittoではブローカがcertificateを提供してくるので、それが正しいかどうか確認するための認証局の証明書が必要になります。webブラウザなんかだと、パブリックな認証局の情報は一通りはいっていますから普段認証局のcertificateを意識することは無いですよね。</p>

<p>きょうは、ここまでです。</p>
]]></content>
  </entry>
  
</feed>
