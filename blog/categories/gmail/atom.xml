<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gmail | MQTT and ...]]></title>
  <link href="http://mm011106.github.io/blog/categories/gmail/atom.xml" rel="self"/>
  <link href="http://mm011106.github.io/"/>
  <updated>2015-12-06T12:15:12+09:00</updated>
  <id>http://mm011106.github.io/</id>
  <author>
    <name><![CDATA[Masakazu Miyamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gmailでメールを送る]]></title>
    <link href="http://mm011106.github.io/blog/2015/03/08/send-email-via-gmail/"/>
    <updated>2015-03-08T10:53:20+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/03/08/send-email-via-gmail</id>
    <content type="html"><![CDATA[<p>gmailでメールを送るスクリプトを作り直しました。<br/>
プロトタイプの時に作ったスクリプトがあったのですが、googleのセキュリティアップデート(?)でSSL接続以外では基本的に接続できないようになったため、以前のシンプルな認証手順のスクリプトは動作しなくなりました。</p>

<!-- more -->


<p>実際には、gmailアカウントからセキュリティの設定をしなおすと一応接続はしてくれるようになります。しかし、送付先がgmail内に制限されているようです。</p>

<h2>再び検索</h2>

<p>全く持ってどうすればいいのかわからなかったので、またしても検索しました。</p>

<p>結果、<a href="http://qiita.com/ssh0/items/7baa0cd094d9fb7561e1">こちらのページ</a>を見つけましたので、これを基に自分の作業用のメール送信スクリプトを作ることにします。ありがとうございます。<br/>
おかげさまで6時間ぐらいで完成させることが出来ました。</p>

<h2>目的・目標</h2>

<p>このスクリプトの目的は、基本的なメール送信の手順を確認することが第一の目的です。 <br/>
デバイスのデータをまとめているサーバ側からユーザへの通知方法の1つとして、メールは必須と考えられるので基本的なところを勉強しておこうということです。
また今回作ったスクリプトは、データをまとめたグラフをユーザへプッシュすることを目的としています。</p>

<p>スクリプトの目標は以下のとおりです。</p>

<ul>
<li>送信者リスト(recipients list)から送信先を読み込んで、それをメールの送信先として設定する。</li>
<li>添付ファイル(PDF)を付けられるようにする。`</li>
<li>送信者リストのファイル名からIDを抽出して、それをメールのタイトルに入れる

<ul>
<li>具体的には、送信者リストのファイル名の中の数値(整数)をとりだします</li>
</ul>
</li>
</ul>


<h2>結果</h2>

<p>ソースコードはgithubの方に載せておきます。（相変わらず使い方がよくわからない。。。） <br/>
<a href="https://github.com/mm011106/sendgmail.py/blob/master/sendgmail.py">sendgmail.py</a></p>

<p>動作の検証を何回かやって、エラーハンドリング用のコードを少し入れて通常に使うにはokぐらいになりました。</p>

<h2>ポイント</h2>

<p>今回の作業でポイントとなったところをいくつか記録しておきます。</p>

<h3>ヘッダの中の宛先とメール送信コマンドの引数としての宛先</h3>

<p>普段メールを書いているときにはほとんど意識しない宛先の取り扱いですが、意識していないからこそひっかかったという感じでしょうか。</p>

<p>送信先を読み込んで、その宛先を <code>msg['To'] = to_addr</code>というように設定してあげます。<code>to_addr</code>は文字列で複数のメールアドレスがコンマで区切られて入っています。<br/>
最初はてっきりこの設定で実際のメール送信の宛先になるものだ、と思い込んでいました。<br/>
しかしながら、複数の宛先が指定されていても、送られてくるのは最初の宛先だけ、という状況でした。
アドレス指定が文字列じゃいけなくて、リストなのかなあ、などと思いつつ色々調べていて、はたと気がつきました。「もしかしたら送信用のアドレス指定とメールヘッダ用の宛先指定は違うのじゃないか？」と。スクリプトを眺めると0.1秒でそれが正しいことがわかりました。</p>

<p>結局、<code>msg['To'] = to_addr</code>はヘッダ用で、実際の送信にこの内容は関与しない、という事です。さらに送信用の実際のアドレス指定は<code>send_via_gmail(from_addr, to_addr, passwd, msg)</code>の<code>to_addr</code>であって、これは複数の宛先の場合「リスト」で有る必要があります。
具体的には、</p>

<pre><code class="sh">ヘッダ用アドレス指定：'aaa@gmial.com, bbb@yahoo.com'
メール送信用アドレス指定：['aaa@gmail.com', 'bbb@yahoo.com']
</code></pre>

<p>これら2つの変数を混同して使っていたため、<code>send_vi_gmail</code>に送られる引数のアドレスは「複数のアドレスを記載した文字列」となっていました。これが、<code>send_via_gmail</code>に渡されてリストとして扱われたため、「要素数１」で（頭に書かれている）1ヶ所だけにメールが送られていたようです。</p>

<h3>パーサが使える！</h3>

<p>pythonでこんなに簡単に引数をパースできるとは！参考にしたページを書いていただいた人に感謝します。ありがとうございます。</p>

<p>早速使わせて頂きました。</p>

<h3>「内包表現」？</h3>

<p>なんだかよくわからないけど、表現としてはすっきりするので使って見ました。<br/>
具体的には、recipient listから読み込んだ内容をリストにして、そのリスト内から不要なもの（空、#で始まるコメントの要素）を取り除くために使っています。</p>

<pre><code class="python"># 　正規表現定義（コメント行と空行） 
re_comment = re.compile("^\s*#")
re_null_line = re.compile("^\s*$")

#  内包表現を使って正規表現に”マッチしない”要素を取り出す
#　　address_listには、コメントや空行も含めファイルから読み込んだ宛先が入っている
address_list= [x for x in address_list if re_comment.match(x) == None ]
address_list= [x for x in address_list if re_null_line.match(x) == None ]
</code></pre>

<h3>添付ファイルの用意</h3>

<p>添付ファイルはMIMEエンコードする必要があるので、なんだかちょっと面倒です。<br/>
説明できないですが、webの情報をかき集めてこのようなコードにしています。</p>

<p>多分こんなかんじかと。。。</p>

<ul>
<li>MIMEBaseで添付ファイルのオブジェクトをPDFとして作る。</li>
<li>添付ファイルの実体をファイルから読み込んでオブジェクトに入れる。</li>
<li>base64でエンコード</li>
<li>ヘッダをつける</li>
</ul>


<p>ここには書かれていませんが、このあとメッセージにattachします。</p>

<pre><code class="python">
#   prepare PDF file as a attachment
    attach_file_name = args.attach_file

    if attach_file_name != None :
        if os.path.exists(attach_file_name) :
            attachment = MIMEBase("application","pdf")

            with open(args.attach_file, 'rb') as fp:
                attachment.set_payload(fp.read())

            Encoders.encode_base64(attachment)
            base_file_name = os.path.basename(attach_file_name)
            attachment.add_header("Content-Disposition", "attachment", filename=base_file_name)
        else:
            print ('No attachment file is found.')
    else:
       print ('No attachment file is specified.')
</code></pre>

<h2>展望</h2>

<p>動作は問題ありませんが、メールアカウントのパスワードが生で入っているのがちょっと気になりますね。  スクリプト自体をrootしか見れないようにすれば少しは良いかもしれません。</p>
]]></content>
  </entry>
  
</feed>
