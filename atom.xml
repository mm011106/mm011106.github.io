<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MQTT and ...]]></title>
  <link href="http://mm011106.github.io/atom.xml" rel="self"/>
  <link href="http://mm011106.github.io/"/>
  <updated>2015-01-31T20:48:42+09:00</updated>
  <id>http://mm011106.github.io/</id>
  <author>
    <name><![CDATA[Masakazu Miyamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[オレオレ証明書を作ってみようかと　実践１]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/31/ore-ore-certificate2/"/>
    <updated>2015-01-31T20:29:12+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/31/ore-ore-certificate2</id>
    <content type="html"><![CDATA[<p>先に投稿した、オレオレ証明書の続きです。</p>

<p>今回は、実際の証明書を作りwebサーバに導入して動作確認までやって見ました。</p>

<!-- more -->


<h2>オレオレ証明書を作る</h2>

<p>いったいどこから手を付ければ良いか分からないので、検索してみます。
いろいろなところで例が示されていますが、opensslで作れそうな感じです。とくに<a href="http://d.hatena.ne.jp/ozuma/20130511/1368284304">こちらのページ</a>に非常にわかりやすくまとめられていましたので、こちらをそのまま順番に試していこうと思います。</p>

<p>詳しい解説は、そちらをご覧ください。</p>

<h3>1.秘密鍵を作る</h3>

<p>まずは、秘密鍵(server.key)を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl genrsa <span class="m">2048</span> &gt; server.key
</span></code></pre></td></tr></table></div></figure>


<p>これで2048bitのRSAキーが作られます。参考ページの解説によると、この情報の中に暗号化に必要な全てのものが入っています。ここから公開鍵も作られます。</p>

<p>中身を見てみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl rsa -text &lt; server.key
</span><span class='line'>Private-Key: <span class="o">(</span><span class="m">2048</span> bit<span class="o">)</span>
</span><span class='line'>modulus:
</span><span class='line'>  :
</span><span class='line'>  :
</span></code></pre></td></tr></table></div></figure>


<p>見てもよく分かりませんが、なんか出来てます。</p>

<h3>2.証明書署名リクエストファイルを作る</h3>

<p>次に、証明書にサインしてもらうためのリクエストファイルを作ります。
このファイルには、秘密鍵から作られた公開鍵と秘密鍵のハッシュ値（鍵の情報を要約した物）が入っています。さらに証明書に記載する署名情報（サーバのFQDNとか組織名とか）が加わります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl req -new -key server.key &gt; server.csr
</span></code></pre></td></tr></table></div></figure>


<p>このときに、サーバのFQDNや組織名、所在地など聞かれます。適当で良いようですが、サーバのFQDNはきちんと入れておいた方が良いようです。証明書のFQDNとそれを設置したサーバのFQDNが違うのはダメなような気がしますね。</p>

<p>再び内容を確認します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl req -test &lt; server.csr
</span></code></pre></td></tr></table></div></figure>


<h3>3.認証局に成り代わって、証明書にサインします</h3>

<p>できあがった証明書署名リクエストファイルに署名をして正式な証明書にします。<br/>
本来これは認証局がやることですが、「おれおれ」なので「おれ」が証明書にサインします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>openssl x509 -req -days <span class="m">7300</span> -signkey server.key &lt; server.csr &gt; server.crt
</span></code></pre></td></tr></table></div></figure>


<p>-days オプションでは有効期限を指定します。ここでは7300日、20年、だいたい私が死ぬまで有効。</p>

<p>できあがりを確認してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl x509 -text &lt; server.crt
</span></code></pre></td></tr></table></div></figure>


<p>先ほど入力した組織名やFQDNが見えてくると思います。</p>

<p>必要なファイルは、.crtファイル（証明書）と.key（秘密鍵）です。
両方ともownをrootにして、パーミッションを600に設定しておきます。</p>

<h2>まずはwebサーバに設定してみる</h2>

<p>先のwebcamの投稿でnginxをインストールしましたが、このサーバに作った鍵を設定して試してみます。</p>

<p>これも、設定方法を検索したところ、そのものずばり<a href="http://heartbeats.jp/hbblog/2012/06/nginx06.html">&ldquo;nginxのTLS設定&rdquo;</a>というページが見つかりました。この連載、とてもわかりやすくnginxの設定方法が書かれていますので、あとでよく勉強しておこうと思います。</p>

<p>やることとしては、configファイルを変更してhttpsの受け口を作り、そこに先ほど作った証明書をいれる、ということになります。</p>

<p>設定ファイルは、先のページを参考に以下の様にしました。</p>

<figure class='code'><figcaption><span>/etc/nginx/sites-sites-available/default</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen <span class="m">443</span> ssl<span class="p">;</span>
</span><span class='line'>  server_name my.www.server.jp<span class="p">;</span>
</span><span class='line'>  root /home/mynginx/www<span class="p">;</span>
</span><span class='line'>  index index.html index.htm<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  ssl_certificate /etc/nginx/server.crt<span class="p">;</span>
</span><span class='line'>  ssl_certificate_key /etc/nginx/server.key<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  ssl_session_timeout 5m<span class="p">;</span>
</span><span class='line'>  ssl_session_cache shared:SSL:10m<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  ssl_protocols SSLv3 TLSv1<span class="p">;</span>
</span><span class='line'>  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP<span class="p">;</span>
</span><span class='line'>  ssl_prefer_server_ciphers on<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  location / <span class="o">{</span>
</span><span class='line'>      try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
</span><span class='line'>      auth_basic <span class="s2">&quot;Restricted&quot;</span><span class="p">;</span>
</span><span class='line'>      auth_basic_user_file /etc/nginx/.htpasswd<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>httpsのポートを443に設定してsslを有効にします。</li>
<li>サーバのFQDNを設定</li>
<li>webサーバのドキュメントルートを設定</li>
<li>証明書と秘密鍵を指定</li>
<li>タイムアウトとキャッシュを設定（ここら辺は参考webページの写しです）</li>
<li>SSLのプロトコル指定と暗号化スイートの指定です。ここら辺はnginxのデフォルト設定ファイルのコピー</li>
<li>ドキュメントの特定の場所のビヘイビアの指定です。ここではルート以下の全てのアクセスでBasic認証を要求するような設定です</li>
</ul>


<p>認証のために.htpasswdが必要になりますが、これはhttp-toolsのなかにあるhtpasswdコマンドでつくりました。</p>

<figure class='code'><figcaption><span>how-to make a password file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo htpasswd -c .htpasswd UserName
</span><span class='line'>New password:
</span><span class='line'>Re-type new password:
</span></code></pre></td></tr></table></div></figure>


<p>のようにしてパスワードファイルを作成して、設定します。</p>

<h3>4.設定を有効にして、再起動</h3>

<p>設定を書き終えたら設定を確認して、読み込ませます。</p>

<figure class='code'><figcaption><span>restart nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo nginx -t
</span><span class='line'><span class="nv">$ </span>sudo nginx -s reload
</span></code></pre></td></tr></table></div></figure>


<h3>5.動作確認</h3>

<p>これで、TLSが有効になっているはずです。アクセスしてみます。</p>

<p><code>https://my.www.server.jp</code></p>

<p>ブラウザからは「この証明書は無効です」などのワーニングが出てきました。証明書に有効なサインがない、サインした人が「ちゃんとした」人じゃ無いので、このようにワーニングがでます。
出てきたワーニングから「証明書を確認する」などのボタンをおして、自分が作った証明書だということを確認します。</p>

<p>確認できたら、ワーニングを無視して進みます。
ここでログイン（Basic認証）のポップアップが出てくるはずです。先ほど設定したログイン名とパスワードを入力します。無事ログインして、webページがみれました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi にシャットダウンスイッチをつける]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/31/shutdown-switch/"/>
    <updated>2015-01-31T11:05:35+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/31/shutdown-switch</id>
    <content type="html"><![CDATA[<p>Raspberry PiはOSが動いているので、いきなり電源を切ると厄介なことになる可能性があります。私は何回か「ブッチ」していますが、とりあえずは大事故にいたっていません。しかしながら、起動時にエラーが出るなどマイナーな不具合は何度か起こっていますですので、非常時は仕方ないとして、できるだけきちんとシャットダウンしたいものです。<br/>
ここでは外部装置からの停止信号検出で止まれるように、GPIOを利用したシャットダウンスイッチを検討してみます。</p>

<!-- more -->


<p>まずは検索、ということで見てみるとこちら<a href="http://d.hatena.ne.jp/penkoba/20130925/1380129824">ページ</a>がヒットしました。これを参考に、というか丸写しで、試してみます。ありがとうございます。</p>

<h2>導入とテスト</h2>

<p>このページにあるように、まずGPIOの動作を試してみます。サンプルから頂いたコードを入力します。</p>

<figure class='code'><figcaption><span>interrupt1.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env python2.7  </span>
</span><span class='line'><span class="c"># script by Alex Eames http://RasPi.tv/  </span>
</span><span class='line'><span class="c"># http://raspi.tv/2013/how-to-use-interrupts-with-python-on-the-raspberry-pi-and-rpi-gpio  </span>
</span><span class='line'>import RPi.GPIO as GPIO
</span><span class='line'>GPIO.setmode<span class="o">(</span>GPIO.BCM<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># GPIO 23 set up as input. It is pulled up to stop false signals  </span>
</span><span class='line'>GPIO.setup<span class="o">(</span>23, GPIO.IN, <span class="nv">pull_up_down</span><span class="o">=</span>GPIO.PUD_UP<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>print <span class="s2">&quot;Make sure you have a button connected so that when pressed&quot;</span>
</span><span class='line'>print <span class="s2">&quot;it will connect GPIO port 23 (pin 16) to GND (pin 6)\n&quot;</span>
</span><span class='line'>raw_input<span class="o">(</span><span class="s2">&quot;Press Enter when ready\n&gt;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>print <span class="s2">&quot;Waiting for falling edge on port 23&quot;</span>
</span><span class='line'><span class="c"># now the program will do nothing until the signal on port 23   </span>
</span><span class='line'><span class="c"># starts to fall towards zero. This is why we used the pullup  </span>
</span><span class='line'><span class="c"># to keep the signal high and prevent a false interrupt  </span>
</span><span class='line'>
</span><span class='line'>print <span class="s2">&quot;During this waiting time, your computer is not&quot;</span>
</span><span class='line'>print <span class="s2">&quot;wasting resources by polling for a button press.\n&quot;</span>
</span><span class='line'>print <span class="s2">&quot;Press your button when ready to initiate a falling edge interrupt.&quot;</span>
</span><span class='line'>try:
</span><span class='line'>        GPIO.wait_for_edge<span class="o">(</span>23, GPIO.FALLING<span class="o">)</span>
</span><span class='line'>        print <span class="s2">&quot;\nFalling edge detected. Now your program can continue with&quot;</span>
</span><span class='line'>        print <span class="s2">&quot;whatever was waiting for a button press.&quot;</span>
</span><span class='line'>except KeyboardInterrupt:
</span><span class='line'>        GPIO.cleanup<span class="o">()</span>  <span class="c"># clean up GPIO on CTRL+C exit  </span>
</span><span class='line'>GPIO.cleanup<span class="o">()</span>          <span class="c"># clean up GPIO on normal exit </span>
</span></code></pre></td></tr></table></div></figure>


<p>wait_for_edge()は割り込み動作になるので、CPU時間を消費しないはずですね。またexceptでキーボード入力をハンドルしています。<br/>
エッジを検出したあとは、つかったGPIOを掃除して終了です。</p>

<p>ファイルができたら<code>chmod +x interrupt1.py</code>として実行できるように設定し、実行してみます。<br/>
さらに、GPIO23をGNDに落としてみます。<br/>
なにやらいろいろメッセージが出て、最終的に&#8221;Falling edge detected.&ldquo;とメッセージが出れば成功。</p>

<p>うまく行ったら、次。</p>

<h2>実際のコード</h2>

<p>実際にshutdownするコードを入れますが、実際にシャットダウンしちゃうとdebugが面倒なので、とりあえずはプリント文を入れてコマンドラインから試します。</p>

<figure class='code'><figcaption><span>shutdown-btn.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env python2.7  </span>
</span><span class='line'><span class="c">#  Shutdwon the system at the Falling edge of GPIO23 </span>
</span><span class='line'>
</span><span class='line'>import RPi.GPIO as GPIO
</span><span class='line'>import os
</span><span class='line'>GPIO.setmode<span class="o">(</span>GPIO.BCM<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>GPIO.setup<span class="o">(</span>23, GPIO.IN, <span class="nv">pull_up_down</span><span class="o">=</span>GPIO.PUD_UP<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>        GPIO.wait_for_edge<span class="o">(</span>23, GPIO.FALLING<span class="o">)</span>
</span><span class='line'>except KeyboardInterrupt:
</span><span class='line'>        GPIO.cleanup<span class="o">()</span>  <span class="c"># clean up GPIO on CTRL+C exit  </span>
</span><span class='line'>GPIO.cleanup<span class="o">()</span>          <span class="c"># clean up GPIO on normal exit </span>
</span><span class='line'>print <span class="s2">&quot;Dave... Dave, I don&#39;t understand why you are doing this to me...&quot;</span>
</span><span class='line'>print <span class="s2">&quot;I will become nothing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#os.system(&quot;/sbin/shutdown -h now&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>キーボード入力で停止できるように、<code>except KeybordInterrupt</code>が設定されてい
ます。実際の運用では不要だとおもうので、最終的にはコメントアウトしてもいいと思います。</p>

<p><code>chmod +x shutdown-btn.py</code>して、実行してみます。</p>

<p>うまく動いたら、/usr/local/sbin/あたりにコピーして、最終行のコメントを外します。</p>

<pre><code>    Dave... Dave, I don't understand why you are doing this to me...
</code></pre>

<p>と悲痛な叫びがコンソールに出てくればokです。</p>

<p>ここまで来たら、シャットダウンコマンドのコメントアウトを外して、できあがりです。
一度、実際にシャットダウンできるか確かめました。そして次に。</p>

<h2>システム起動時にスイッチ監視を始めるようにする</h2>

<p>最後にinit.dに登録して、システム起動時にスイッチ監視を始めるように設定します。<br/>
ここはちょっと勉強が必要でした。</p>

<p>今回作ったスクリプトをバックグラウンドでシステム起動時に実行させたいので、initを使って起動する、と参照先のページの著者の方がおっしゃって居られましたが、いまいちその意味が自分で理解できておらず、このままではだめだなあと思い検索かけまくりましたが、イマイチすっきりしません。initからupstartが起動されて、ランレベルに応じたデーモンの起動を管理する。という感じではあるのですが。。。</p>

<p>ま、ここら辺は後から補完するとして、とりあえず深く考えずやってみます。</p>

<p>/etc/init.d/　の下に下記のようなスクリプトを作成します。</p>

<figure class='code'><figcaption><span>/etc/init.d/shutdown-btn</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'><span class="c">### BEGIN INIT INFO</span>
</span><span class='line'><span class="c"># Provides:          　shutdonw-btn</span>
</span><span class='line'><span class="c"># Required-Start:   $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Required-Stop:    $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6</span>
</span><span class='line'><span class="c"># Short-Description: send shutdown sig on the GPIO23 falling down edge</span>
</span><span class='line'><span class="c"># Description:       shutdown service initiated by hardware shutdown sw or</span>
</span><span class='line'><span class="c">#                     a logic sigal. </span>
</span><span class='line'><span class="c">### END INIT INFO</span>
</span><span class='line'><span class="c"># /etc/init.d/shutdown-btn</span>
</span><span class='line'><span class="nv">PIDFILE</span><span class="o">=</span>/var/run/shutdown-btn.pid
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>        start<span class="o">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">[</span> -f <span class="nv">$PIDFILE</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                        <span class="nb">echo</span> <span class="nv">$PIDFILE</span> exists.
</span><span class='line'>                        <span class="nb">exit </span>1
</span><span class='line'>                <span class="k">fi</span>
</span><span class='line'>                start-stop-daemon -S -x /usr/local/sbin/shutdown-btn.py -b -m -p <span class="nv">$PIDFILE</span>
</span><span class='line'>                <span class="p">;;</span>
</span><span class='line'>        stop<span class="o">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$PIDFILE</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                        <span class="nb">echo</span> <span class="nv">$PIDFILE</span> not found.
</span><span class='line'>                        <span class="nb">exit </span>1
</span><span class='line'>                <span class="k">fi</span>
</span><span class='line'>                start-stop-daemon -K -p <span class="nv">$PIDFILE</span>
</span><span class='line'>                rm <span class="nv">$PIDFILE</span>
</span><span class='line'>                <span class="p">;;</span>
</span><span class='line'>        *<span class="o">)</span>
</span><span class='line'>                <span class="nb">echo</span> <span class="s2">&quot;Usage: /etc/init.d/shutdown-btn {start|stop}&quot;</span>
</span><span class='line'>                <span class="nb">exit </span>1
</span><span class='line'>                <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>スケルトン(/etc/init.d/skeleton)からINIT INFOのあたりをコピーして、その下は先のwebページのものをコピーです。
init.dのスクリプトの書き方は、<a href="https://wiki.debian.org/LSBInitScripts">ここらへん</a>が詳しいですが、英語です。</p>

<p>コメント行も重要のようです。ちょっと見てみると</p>

<figure class='code'><figcaption><span>INIT INFO </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Provides:          　スクリプト名（つまりこのスクリプトのファイル名）</span>
</span><span class='line'><span class="c"># Required-Start:   $remote_fs $syslog　（スタートに必要な条件）</span>
</span><span class='line'><span class="c"># Required-Stop:    $remote_fs $syslog　（ストップに必要な条件）</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5　（このランレベルのとき起動される）</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6　　（このランレベルの時停止する）</span>
</span><span class='line'><span class="c"># Short-Description: 　（簡単な説明　1行以内）</span>
</span><span class='line'><span class="c"># Description:       （詳しい説明　次の行の頭を#にしてタブかスペース2つ以上でテキストと区切れば何行でも）</span>
</span></code></pre></td></tr></table></div></figure>


<p>start-stop-daemon についてはmanを見るのが一番わかりやすいかもしれません。よく分かっているわけでは無いので詳しくは書けませんが、要はシステムレベルのプロセスの管理に便利だ、と言うことでしょうか。（そうmanに書いてあるし）
ちなみに、ここでのオプションを確認しておくと</p>

<ul>
<li>-S プロセスをスタートをさせる。</li>
<li>-x /usr/local/sbin/shutdown-btn.pyは -Sオプションの引数で、-xで指定された実行ファイルのインスタンスであるプロセスがあるかどうか、を返します。</li>
</ul>


<p>この2つで、指定した実行ファイルがプロセスとして起動していればそのまま、起動していなければ起動されます。</p>

<ul>
<li>-b　バックグラウンドに移行</li>
<li>-m　star-stop-daemon用のPIDファイルを-p で指定したファイル名に従って作成します。</li>
</ul>


<p>これちょっと、オプションがいっぱいあってわかりにくいので、オプションをフルスペルとかにしたほうが可読性が良い感じですね。</p>

<p>ちなみに、上のやつをわかりやすく書き直すと</p>

<figure class='code'><figcaption><span>alternative format</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>start-stop-daemon --background --start --exec /usr/local/sbin/shutdown-btn.py  --make-pidfile --pidfile <span class="nv">$PIDFILE</span>
</span></code></pre></td></tr></table></div></figure>


<p>てなかんじでしょうか。動作確認していないのでご注意ください。</p>

<p>起動用のスクリプトが編集できたら、これを登録します。
　</p>

<figure class='code'><figcaption><span>append shutdown-btn script to rc.d</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo update-rc.d shutdown-btn defaults
</span></code></pre></td></tr></table></div></figure>


<p>これで、defaultのランレベル設定で当該のスクリプトのシンボリックリンクが/etc/rc?.dのディレクトリに作成されます。<br/>
これで、起動時にこのスクリプトがスタートするようになるはずです。</p>

<h2>再起動と動作確認</h2>

<p>ここまで来たら再起動させてみます。これでリセット用のGPIOの監視プロセスが起動されているはずです。</p>

<p>そして、GPIO23をGNDに落としてみます。
見事シャットダウンされました！</p>

<p>めでたし。</p>

<p>今回、init.dの使い方もちょっぴり勉強出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebCamをつなげてみる]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/25/webcam/"/>
    <updated>2015-01-25T09:20:05+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/25/webcam</id>
    <content type="html"><![CDATA[<p>今回はwebカムの接続を試して見ました。いろいろ話を聞いていると、データロガーが提示するデータだけでは情報が足りない、ということが多かったです。せっかくオンラインにするなら、写真とか「雰囲気」を伝えてくれるとありがたい、という意見が多かったです。言われてみれば、データだけなら今までのシステムでもできるし、とおもいましたので絵も転送できるようなケイパビリティを持たせたいなと思った次第。</p>

<!-- more -->


<p>webカムはRaspberry Piに接続できるのかどうか調べてみると、意外と簡単に接続できそうです。一昔前は結構苦労していたように感じたので、時代は進んだなあと。</p>

<p>で、キャプチャするソフトをリストアップしてみると。</p>

<ul>
<li>fswebcam　スチル撮影</li>
<li>motion　画像の変化を検出して記録</li>
<li>guvcview 動画のキャプチャ（GUI必要？）</li>
</ul>


<p>と言ったところが皆さんに使われているようです。特に監視カメラ用途ではmotionが便利そうです。</p>

<p>今回は、能動的にシャッターを切って記録する用途ですので、fswebcamを使うことにしました。</p>

<hr />

<h3>USBカメラを接続してみる</h3>

<p>とりあえずUSBカメラを何も考えずRaspberry Piにつないでみます。</p>

<p>認識されているか確認してみると</p>

<figure class='code'><figcaption><span>UBS device list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsusb
</span><span class='line'>Bus <span class="m">001</span> Device 002: ID 0424:9514 Standard Microsystems Corp.
</span><span class='line'>Bus <span class="m">001</span> Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</span><span class='line'>Bus <span class="m">001</span> Device 003: ID 0424:ec00 Standard Microsystems Corp.
</span><span class='line'>Bus <span class="m">001</span> Device 006: ID 046d:080a Logitech, Inc. Portable Webcam C905
</span></code></pre></td></tr></table></div></figure>


<p>こんなかんじで認識されています。</p>

<p>次に、fswebcamをインストール。参考にしたのは<a href="http://www.raspberrypi.org/documentation/usage/webcams/">こちら</a></p>

<p>続けて試し撮りなどしてみます。</p>

<figure class='code'><figcaption><span>install fswebcam</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install fswebcam
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam -v   <span class="c">#こうすると色々教えてくれます。</span>
</span><span class='line'>--- Opening /dev/video0...
</span><span class='line'>Trying <span class="nb">source </span>module v4l2...
</span><span class='line'>/dev/video0 opened.
</span><span class='line'>src_v4l2_get_capability,87: /dev/video0 information:
</span><span class='line'>src_v4l2_get_capability,88: cap.driver: <span class="s2">&quot;uvcvideo&quot;</span>
</span><span class='line'>src_v4l2_get_capability,89: cap.card: <span class="s2">&quot;UVC Camera (046d:080a)&quot;</span>
</span><span class='line'>src_v4l2_get_capability,90: cap.bus_info: <span class="s2">&quot;usb-bcm2708_usb-1.4&quot;</span>
</span><span class='line'>src_v4l2_get_capability,91: cap.capabilities<span class="o">=</span>0x84000001
</span><span class='line'>src_v4l2_get_capability,92: - VIDEO_CAPTURE
</span><span class='line'>src_v4l2_get_capability,103: - STREAMING
</span><span class='line'>No input was specified, using the first.
</span><span class='line'>src_v4l2_set_input,181: /dev/video0: Input <span class="m">0</span> information:
</span><span class='line'>src_v4l2_set_input,182: <span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;Camera 1&quot;</span>
</span><span class='line'>src_v4l2_set_input,183: <span class="nb">type</span> <span class="o">=</span> 00000002
</span><span class='line'>src_v4l2_set_input,185: - CAMERA
</span><span class='line'>src_v4l2_set_input,186: <span class="nv">audioset</span> <span class="o">=</span> 00000000
</span><span class='line'>src_v4l2_set_input,187: <span class="nv">tuner</span> <span class="o">=</span> 00000000
</span><span class='line'>src_v4l2_set_input,188: <span class="nv">status</span> <span class="o">=</span> 00000000
</span><span class='line'>src_v4l2_set_pix_format,541: Device offers the following V4L2 pixel formats:
</span><span class='line'>src_v4l2_set_pix_format,554: 0: <span class="o">[</span>0x56595559<span class="o">]</span> <span class="s1">&#39;YUYV&#39;</span> <span class="o">(</span>YUV 4:2:2 <span class="o">(</span>YUYV<span class="o">))</span>
</span><span class='line'>src_v4l2_set_pix_format,554: 1: <span class="o">[</span>0x47504A4D<span class="o">]</span> <span class="s1">&#39;MJPG&#39;</span> <span class="o">(</span>MJPEG<span class="o">)</span>
</span><span class='line'>Using palette MJPEG
</span><span class='line'>Adjusting resolution from 384x288 to 352x288.
</span><span class='line'>src_v4l2_set_mmap,693: mmap information:
</span><span class='line'>src_v4l2_set_mmap,694: <span class="nv">frames</span><span class="o">=</span>4
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">0</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">1</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">2</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">3</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>--- Capturing frame...
</span><span class='line'>verify_jpeg_dht,94: Inserting DHT segment into JPEG frame.
</span><span class='line'>Captured frame in 0.00 seconds.
</span><span class='line'>--- Processing captured image...
</span><span class='line'>There are unsaved changes to the image.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam -r <span class="m">1000</span> ./test.jpg
</span><span class='line'>--- Opening /dev/video0...
</span><span class='line'>Trying <span class="nb">source </span>module v4l2...
</span><span class='line'>/dev/video0 opened.
</span><span class='line'>No input was specified, using the first.
</span><span class='line'>Adjusting resolution from 1000x-1 to 960x720.
</span><span class='line'>--- Capturing frame...
</span><span class='line'>Captured frame in 0.00 seconds.
</span><span class='line'>--- Processing captured image...
</span><span class='line'>Writing JPEG image to <span class="s1">&#39;./test.jpg&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>上の例では解像度1000pxぐらいの絵をとってtest.jpgで保存してもらう例です。実際にはカメラの撮影可能な解像度に適宜調整されるようです。</p>

<p>撮影したのはいいですが、このままでは本当にとれているのか絵を觀ることができないので判りません。scpなどのコマンドで転送してもいいですが、すぐにMQTTで転送することを考えなきゃいけないので、とりあえず手動でmosquittoを使って転送してみます。</p>

<p>プロトコルとしては、どんなファイルでも（中身に関係なく）送れるのですが、mosquittoはコマンドラインということもあり、メッセージをサブスクライブしたときペイロードの内容を出力したあと改行コードを出力してしまいます。文字情報の時は便利なのですが、バイナリのときはちょっと厄介です。<br/>
それを抑止するために-N オプションがあり、これを使うとバイナリファイルも比較的扱いやすくなるはずです。</p>

<p>これを試してみます。</p>

<figure class='code'><figcaption><span>binary file subscription via MQTT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#サブスクライブ側を用意</span>
</span><span class='line'><span class="nv">$ </span>mosquitto_sub -N -h MY.BROKER -t MY/DEVICE/photo &gt; test.jpg
</span><span class='line'>
</span><span class='line'><span class="c">#写真をとったエッジデバイス側でファイルまるごとパブリッシュ</span>
</span><span class='line'><span class="nv">$ </span>mosquitto_pub -h MY.BROKER -t MY/DEVICE/photo -f ./test.jpg
</span></code></pre></td></tr></table></div></figure>


<p>このあと、サブスクライブ側をCtrl−Cで中断して、サブスクライブしたtest.jpgを確認してください。</p>

<p>手動で中断しないといけないのが、イマイチですが一応転送はできます。</p>

<p>スクリプトによる写真データのサブスクリプションは、mosquitto_subでは対処しきれない感じがします。
ここは、paho版の出番になりそうですね。(もちろん、mosquittoのライブラリをつかってCで書いてもいいのですけど、わたしはCができませんので。。。。)</p>

<h2>おまけ</h2>

<p>このままじゃあまり役立たないので、webサーバを動かして写真を配信する設定を試して見ました。
こちらの<a href="http://nofx2.txt-nifty.com/it/2013/07/raspberry-pi-ng.html">ページ</a>丸写しです。ありがとうございます。</p>

<p>webサーバにはいまどきの、nginxを選びました。apacheは昔苦労した記憶があり、めんどくさいし時間がかかりそうというイメージでしたので今時流行りを。</p>

<figure class='code'><figcaption><span>install nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Nginxインストール</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install nginx
</span><span class='line'><span class="c"># 1.2.1-2.2+wheezy3がインストールされました。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># web page 用ディレクトリの作成</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>mkdir www
</span><span class='line'>
</span><span class='line'><span class="c"># Nginxの設定の変更</span>
</span><span class='line'><span class="nv">$ </span>sudo vi /etc/nginx/sites-available/default
</span><span class='line'><span class="c"># 設定フアイルは/etc/nginx/nginx.confにもありますが、</span>
</span><span class='line'><span class="c">#　ここらへんの使い分けはよくわかっていません。</span>
</span><span class='line'><span class="c"># server {　}</span>
</span><span class='line'><span class="c">#   の中にある公開するweb pageディレクトリを先ほど作ったディレクトリに変更します</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#root /usr/share/nginx/www;</span>
</span><span class='line'>    root /home/pi/www<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># サイトを有効にするため、シンボリックリンクを張る。</span>
</span><span class='line'><span class="nv">$ </span>sudo ln -s /etc/nginx/sites-available/pi /etc/nginx/sites-enabled/
</span><span class='line'><span class="c">#  ここらへんは詳細不明です。</span>
</span><span class='line'><span class="c">#　多分これがなくても先ほどの設定変更はdefaultに対して行ったので、</span>
</span><span class='line'><span class="c">#　有効になると思います。</span>
</span><span class='line'><span class="c">#　すでに、/etc/nginx/sites-enabled/には</span>
</span><span class='line'><span class="c">#  /etc/nginx/sites-available/defaultのリンクが置かれていました。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Nginxの設定ファイルに問題が無いかチェック</span>
</span><span class='line'><span class="nv">$ </span>sudo nginx -t
</span><span class='line'>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
</span><span class='line'>nginx: configuration file /etc/nginx/nginx.conf <span class="nb">test </span>is successful
</span><span class='line'>
</span><span class='line'><span class="c"># Nginx再起動</span>
</span><span class='line'><span class="nv">$ </span>sudo service nginx restart
</span><span class='line'>
</span><span class='line'><span class="c"># 自動起動設定</span>
</span><span class='line'><span class="nv">$ </span>sudo update-rc.d nginx defaults
</span><span class='line'>
</span><span class='line'><span class="c"># index.htmlの作成</span>
</span><span class='line'><span class="c">#　とりあえず、nginxの初期設定のindex.htmlをコピー</span>
</span><span class='line'>
</span><span class='line'>cp /usr/share/nginx/www/index.html ~/www/
</span></code></pre></td></tr></table></div></figure>


<p>ここまでできたら、webサーバにアクセスしてみてください。
なにか反応があるはずです。</p>

<p>次に、とった写真を見れるようにします。</p>

<h3>　写真入りindex.htmlを用意</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vi ~/www/index.html
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;Welcome to nginx!&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body <span class="nv">bgcolor</span><span class="o">=</span><span class="s2">&quot;white&quot;</span> <span class="nv">text</span><span class="o">=</span><span class="s2">&quot;black&quot;</span>&gt;
</span><span class='line'>&lt;center&gt;&lt;h1&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;./test.jpg&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;test picture&quot;</span> &gt;&lt;/h1&gt;&lt;/center&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># 写真をとってwwwディレクトリに入れてみます。</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam ~/www/test.jpg
</span></code></pre></td></tr></table></div></figure>


<p>ここでwebをアクセスすると写真が見えるはずです。</p>

<p>一段落。</p>

<p>さて、このファイルはフラッシュメモリ上に展開されているので、あまり派手に何回もとっては消しをすると、あっという間にフラッシュメモリが使えなくなります。そこで、ramdiskを写真の置き場に使うことにします。
webサーバは指定したwebページ保存場所以外のファイルは読めないようなので、最初にramdisk上の写真ファイルのリンクをwwwディレクトリ上に作っておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ln -s /run/shm/picture.jpg ~/www/test.jpg
</span><span class='line'><span class="c"># /run/shmのディレクトリはRAM-DISKになっています。</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam /run/shm/picture.jpg
</span><span class='line'><span class="c">#　これでwebページ上の写真が、今撮ったものに変わるはずです。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで来ると、立派な定点カメラの出来上がり、という感じです。</p>

<p>MQTTのサブスクライバをつければ、シャッタや解像度のコントロールがMQTT経由でできますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mosquittoをアップデートする]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/21/update-mosquitto/"/>
    <updated>2015-01-21T20:07:57+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/21/update-mosquitto</id>
    <content type="html"><![CDATA[<p>なんか変だと思っていたら、ubuntuに入れたmosquittoのバージョンが最新ではありませんでした。webにあるmanページとどうも違うなと思っていたら、そんなことが原因でした。
なので、アップデート。</p>

<!-- more -->


<p>最初にmosquittoをインストールしたときは、<code>apt-get install mosquitto-client</code>でやりましたが、普通にアップデートマネージャでアップデートのチェックをしてもmosquittoは引っかかってきません。</p>

<p>本家の<a href="http://mosquitto.org/download/">download page</a>を確認すると、最新版はパーソナルパッケージアーカイブ(PPA)からインストールする必要があるとのことでしたので、指示のとおりインストールします。<br/>
私、PPAは初耳でした。</p>

<p>こちらも参照。
<a href="https://launchpad.net/~mosquitto-dev/+archive/ubuntu/mosquitto-ppa">mosquitto PPA team</a></p>

<figure class='code'><figcaption><span>commandlines for upgarde mosquitto and client.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get dist-upgrade
</span><span class='line'><span class="c">#  dist-upgrade は　upgrade するときにコンフリクトする（あるいは不要な）前のパッケージを削除します。</span>
</span></code></pre></td></tr></table></div></figure>


<p>おっと、 dist-upgarde ではブローカのconfigファイルは<strong>上書きされてしまいます</strong>！
必要に応じてバックアップを取ってください！！！！！<br/>
client だけをインストールしている場合は関係ないです。</p>

<p>きちんとインストールできたか、<code>mosquitto_sub --help</code>で確認してみます。</p>

<figure class='code'><figcaption><span>commandlines for upgarde mosquitto and client.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mosquitto_sub is a simple mqtt client that will subscribe to a single topic and print all messages it receives.
</span><span class='line'>mosquitto_sub version 1.3.5 running on libmosquitto 1.3.5.
</span><span class='line'>
</span><span class='line'>Usage: mosquitto_sub <span class="o">[</span>-c<span class="o">]</span> <span class="o">[</span>-h host<span class="o">]</span> <span class="o">[</span>-k keepalive<span class="o">]</span> <span class="o">[</span>-p port<span class="o">]</span> <span class="o">[</span>-q qos<span class="o">]</span> <span class="o">[</span>-R<span class="o">]</span> -t topic ...
</span><span class='line'>  :
</span><span class='line'>  :
</span></code></pre></td></tr></table></div></figure>


<p>とでてきましたので、多分大丈夫。</p>

<p>これで、-Nオプションが使えるはず。</p>

<p>ちなみに、Raspberry Pi用のビルドは普通に<code>apt-get install</code> でインストールしても最新版が入るようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オレオレ証明書を作ってみようかと　準備]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/18/ore-ore-certificate/"/>
    <updated>2015-01-18T11:28:32+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/18/ore-ore-certificate</id>
    <content type="html"><![CDATA[<p>現在、セキュアな通信はSSHで確保する方針ですが、証明書ベースの暗号化についても考えておいてもいいのじゃないかなあとおもい、いわゆる「オレオレ証明書」を試してみようかと思った次第です。
ここでは、まず勉強。</p>

<!-- more -->


<p>英語のwebでは&#8221;self-signed certificate&#8221;なんて言われていますが、日本では「オレオレ詐欺」にちなんで、「オレオレ証明書」と呼ぶのがツウのやりかたのようです。でも、これは結構いいネーミングじゃないかと思います。日本で「オレオレ」というのはかなりダーティな印象があるので、「これ、オレオレ証明書だよね」というと、直感的に騙されそうな感じがします。</p>

<p>昔の記事（2007年頃）ですが、銀行のオンラインバンキングなどでもオレオレ証明の一種が使われていたということで、間違ったITリテラシを教えてしまうという危険が<a href="http://takagi-hiromitsu.jp/diary/20071117.html">指摘</a>されています。</p>

<p>このページの終わりの方には証明書の分類が挙げられており、一口に「オレオレ」といってもいろいろあるのだよ。ということがわかります。</p>

<p>今回つくろうとしているのは、ここで言うところの「第四種オレオレ証明書」です。<br/>
とくに悪意があってself-signedにするわけではなく、パブリックに公開されるサーバではないし、特定の用途にしか使わない、自分たち専用の暗号化経路ということです。</p>

<p>ポリシーとしては、</p>

<ul>
<li>経路の暗号化には証明書ベースの共通鍵暗号化</li>
<li>ログイン制御にはユーザ名/パスワード</li>
<li>ポート番号の変更</li>
</ul>


<p>という3本柱で考えてみたいと思います。</p>

<p>証明書ベースの認証を行うという事は、だれでも（ポート番号がわかれば）暗号化経路を作れる、ということになります。そのため、実際にブローカに接続できるかどうかは、ユーザ名による認証を行う必要があると思ったからです。実際には、IPやドメイン名の制限など、可能な接続制限を取る必要があると思います。</p>

<h2>mosquitto.conf と mosquitto_pub/subの暗号化についての記載</h2>

<p>まずは、いま使っているクライアント・サーバアプリケーションが証明書ベースの暗号化にどのように対応しているかを確認しておきます。
まずは、ブローカ側の<code>mosquitto.conf</code>から</p>

<h3>mosquitto.conf</h3>

<h4>Authentication</h4>

<blockquote><p>The authentication options described below allow a wide range of possibilities in conjunction with the listener options. This section aims to clarify the possibilities.</p>

<p>以下に示す認証のオプションはリスナーのオプションとともに活用することで広いレンジの可能性を提供します。このセクションはその可能性を明らかにします。</p>

<p>The simplest option is to have no authentication at all. This is the default if no other options are given. Unauthenticated encrypted support is provided by using the certificate based SSL/TLS based options cafile/capath, certfile and keyfile.</p>

<p>最もシンプルなものは認証をしないようにすることです。これは他のオプションが与えられない限り、デフォルトの設定になります。認証なしの暗号化はcafile/capathオプションにより証明書ベースのSSL/TLSから提供されます。</p>

<p>MQTT provides username/password authentication as part of the protocol. Use the password_file option to define the valid usernames and passwords. Be sure to use network encryption if you are using this option otherwise the username and password will be vulnerable to interception.</p>

<p>MQTTはプロトコルの一部としてユーザ名／パスワードによる認証を提供しています。
<code>password_file</code>オプションを使うことで有効なユーザ名とパスワードを設定できます。このオプションを使うときは経路の暗号化を必ず実施してください。そうしないとユーザ名／パスワードは盗聴の対象となってしまいます。</p>

<p>When using certificate based encryption there are two options that affect authentication. The first is require_certificate, which may be set to true or false. If false, the SSL/TLS component of the client will verify the server but there is no requirement for the client to provide anything for the server: authentication is limited to the MQTT built in username/password. If require_certificate is true, the client must provide a valid certificate in order to connect successfully. In this case, the second option, use_identity_as_username, becomes relevant. If set to true, the Common Name (CN) from the client certificate is used instead of the MQTT username for access control purposes. The password is not replaced because it is assumed that only authenticated clients have valid certificates. If use_identity_as_username is false, the client must authenticate as normal (if required by password_file) through the MQTT options.</p>

<p>証明書ベースの暗号化を行う場合、2つのオプションが認証に影響を与えます。<br/>
1つめは<code>require_certificate</code>で、trueもしくはfalseに設定できます。<br/>
falseの場合、クライアントのSSL/TLSコンポーネントはサーバが正確であるかどうかを確かめます。しかし、クライアントは何もサーバに提供する必要はありません。認証はMQTTにビルトインされたユーザ名・パスワードに制限されます。<br/>
trueの場合、クライアントは有効な証明書を接続するために提供する必要があります。</p>

<p>このケースでは2つ目のオプション、<code>use_identity_as_username</code>が関連してきます。<br/>
これをtrueにセットするとアクセスコントロールのために証明書共通名(CN)がMQTTのユーザ名の代わりに使われます。パスワードは、認証取得をしたユーザのみが有効な証明書を持っていると考えているため変更されません。<br/>
<code>use_identity_as_username</code>がfalseの場合、クライアントは通常と同じようにMQTTによって認証されます。（password_fileが必要です）</p>

<p>When using pre-shared-key based encryption through the psk_hint and psk_file options, the client must provide a valid identity and key in order to connect to the broker before any MQTT communication takes place. If use_identity_as_username is true, the PSK identity is used instead of the MQTT username for access control purposes. If use_identity_as_username is false, the client may still authenticate using the MQTT username/password if using the password_file option.
（ここは事前共有キーの話なのでパス）</p>

<p>Both certificate and PSK based encryption are configured on a per-listener basis.</p>

<p>この証明書ベース、PSKベースの暗号化どちらの場合でもリスナー単位での設定になります。</p>

<p>Authentication plugins can be created to replace the password_file and psk_file options (as well as the ACL options) with e.g. SQL based lookups.</p>

<p>たとえば、SQLデータベース参照などの認証プラグインを、ユーザ名／パスワード認証とPSKファイルのオプションをリプレイスするために設定することも可能です。</p>

<p>It is possible to support multiple authentication schemes at once. A config could be created that had a listener for all of the different encryption options described above and hence a large number of ways of authenticating.</p>

<p>また複数の認証スキームを一度にサポートするようにすることも可能です。設定ファイルは一つのリスナーに対して上記にあるすべての違った暗号化のオプション、つまりいくつもの認証方法を設定することも可能です。</p></blockquote>

<p>と、ここまでの説明では、「いろんな方法で暗号化、認証ができます」というところだけしかわかりませんでした。<br/>
これからやろうとしている証明書ベースの暗号化では、認証と絡めることもできるし、それとは別にすることもできる、というところでしょうか。</p>

<p>証明書をクライアントが提供するようなやり方もできるように読めます。
確かに、クライアントが証明書を提示するという方が理にかなっているかもしれません。今想定しているような構成では、接続してきたクライアントが「偽物」である可能性を排除したいわけで、一般的なHTTPプロトコルでの証明書のようにサーバ側の真贋をユーザのセキュリティのために提供するのとは全く逆になります。</p>

<p>兎にも角にも手を動かさないことには勉強できないので、まずは、証明書をサーバが提供するという、一般的なやり方の設定をしてみようと思います。証明書ベースの暗号化経路を確立、次にユーザ名／パスワードでクライアント認証をする、という手順になります。</p>

<p>今日のところは、これまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自分のIPアドレスを送信する]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/13/ipaddress/"/>
    <updated>2015-01-13T20:43:51+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/13/ipaddress</id>
    <content type="html"><![CDATA[<p>自分のIPアドレスをMQTTで送信してもらうと、デバグの時にIPアドレスをいちいち調べなくていいので楽だなあ、とおもい試して見ました。</p>

<!-- more -->


<p>Raspberry Pi で、まずは、どうやってIPアドレスを抽出するかです。</p>

<p>自分のIPアドレスは<code>ifconfig</code>で出てきますが、これは人間用なのでフォーマットがややこしい。</p>

<figure class='code'><figcaption><span>example of result of &#8220;ifconfig&#8221; command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ifconfig eth0
</span><span class='line'>
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr b8:27:eb:29:61:2d
</span><span class='line'>          inet addr:192.168.0.xyz  Bcast:192.168.0.255  Mask:255.255.255.0
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:95729 errors:0 dropped:67 overruns:0 frame:0
</span><span class='line'>          TX packets:62090 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:10362519 <span class="o">(</span>9.8 MiB<span class="o">)</span>  TX bytes:6910384 <span class="o">(</span>6.5 MiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>色々と悩んだ末、こんな感じのコマンドラインではどうかと。。。。</p>

<figure class='code'><figcaption><span>a example of one-liner extracting IP adress from &#8220;ifconfig&#8221; command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ifconfig eth0 <span class="p">|</span> grep -o <span class="s1">&#39;^ *inet addr:.*B&#39;</span> <span class="p">|</span> grep -E -o <span class="s1">&#39;([0-9]{1,3}\.){3}[0-9]{1,3}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初のgrepでインターフェイスのIPアドレスを表示しているフレーズだけを抜き出します。<br/>
具体的には行頭から任意の数のスペースがあって、&#8221;inet addr:&ldquo;とあって、任意の文字が続き&#8221;B&#8221;で終わる部分です。</p>

<p><code>grep -o '^ *inet addr:.*B'</code></p>

<p>次に、そのフレーズの中には1つしかIPアドレスは入っていないはずなので、それを抜き出します。</p>

<p><code>grep -E -o '([0-9]{1,3}\.){3}[0-9]{1,3}'</code></p>

<p>だいたいこれで、行けそうです。
試しにやってみると。</p>

<figure class='code'><figcaption><span>test for the one-liner </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ifconfig eth0 <span class="p">|</span> grep -o <span class="s1">&#39;^ *inet addr:.*B&#39;</span> <span class="p">|</span> grep -E -o <span class="s1">&#39;([0-9]{1,3}\.){3}[0-9]{1,3}&#39;</span>
</span><span class='line'>192.168.0.xyz
</span></code></pre></td></tr></table></div></figure>


<p>今回の目的には十分かとおもいます。</p>

<p>しかし、なんかもっといい方法（どっかのファイルを見るとか）がありそうなきもします。。。。</p>

<p>さて、このコマンドラインをデバイスのスクリプト（cronで動く）にいれてみたところ、うまく動かない。具体的には、結果がNULLになってしまうのです。試しに、手元でコマンドラインから実行するとうまく動く。うう〜ん。<br/>
さっぱり理由が分からず、いろいろ調べてみたところ「<a href="http://higelog.brassworks.jp/?p=1775">動かないときはエラーログを取れ！</a>」という啓示をいただき、試してみたところ、<code>command not found</code>とのこと。ifconfigコマンドへのパスが通ってない、という情けないという状況。言われてみれば確かにそんなことをどこかで見たような気がするなあ。。。。</p>

<p>ということで、ifconfigコマンドを絶対パスで指定して事なきを得ました。</p>

<p><strong>「CRONのコマンドは絶対パス指定」</strong>　勉強しました。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autossh]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/12/autossh/"/>
    <updated>2015-01-12T08:53:44+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/12/autossh</id>
    <content type="html"><![CDATA[<p>sshのコネクションはどうしても切れてしまうことがあるので、それを阻止するためにautosshを使ってみました。<br/>
まず、sshのコマンドラインを簡素にするため、MQTTブローカへの接続設定を書いたconfigファイルを用意します。</p>

<!-- more -->


<p>sshのコンフィギュレーション</p>

<p>まずは、sshの接続のコマンドラインを簡略化するためにconfigファイルを設定します。<br/>
設定を隠蔽できる（シェルスクリプトなどにパラメタを書かなくてもいい）というてんで良いかなと思います。</p>

<figure class='code'><figcaption><span>~/.ssh/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Host Broker
</span><span class='line'>  HostName        MQTT_Broker
</span><span class='line'>  IdentityFile    ~/.ssh/id_rsa_MQTTClient
</span><span class='line'>  User            MQTT_connection
</span><span class='line'>  LocalForward    <span class="m">22883</span> localhost:1883
</span><span class='line'>  Port            22222
</span></code></pre></td></tr></table></div></figure>


<p>ポート番号などは適宜設定してください。</p>

<p>こうすることで、<code>ssh -f -N Broker</code>のコマンドでトンネリング設定ができます。
ここで、公開鍵はパスフレーズ無しで作ったものを指定します。セキュリティのため、ブローカのssh設定にはポート制限やIP制限、コマンドを実行しないなどの処置を<strong>必ず</strong>とる必要があります。<a href="http://mm011106.github.io/blog/2015/01/11/secure-connection/">設定の具体例</a>（「パスフレーズなしでの接続方法とセキュリティ設定」）</p>

<p>さらに、これが切れたとき自動的に再接続するため、autosshを導入します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> <span class="nv">$ </span>sudo apt-get install autossh
</span></code></pre></td></tr></table></div></figure>


<p>autosshを使ってトンネリングを設定するには</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> <span class="nv">$ </span>autossh -M0 -f -N Broker
</span></code></pre></td></tr></table></div></figure>


<p>とします。</p>

<p>-M0 : 接続が切れているかどうかを確認するためのポート指定です。0は切断確認をポートではしないようにする設定です。</p>

<p>-f : 実行をバックグラウンドに移行します。</p>

<p>-N : sshへのオプションです。</p>

<p>autosshはsshを起動してそのプロセスを監視するプロセスを起動するコマンドです。</p>

<p>-Mオプションについては以下のように<a href="http://linux.die.net/man/1/autossh">解説</a>があります。</p>

<blockquote><p>specifies the base monitoring port to use. Without the echo port, this port and the port immediately above it ( port + 1) should be something nothing else is using. autossh will send test data on the base monitoring port, and receive it back on the port above. For example, if you specify &ldquo;-M 20000&rdquo;, autossh will set up forwards so that it can send data on port 20000 and receive it back on 20001.</p>

<p>Alternatively, a port for a remote echo service may be specified. This should be port 7 if you wish to use the standard inetd echo service. When an echo port is specified, only the specified monitor port is used, and it carries the monitor message in both directions.</p>

<p>Many people disable the echo service, or even disable inetd, so check that this service is available on the remote machine. Some operating systems allow one to specify that the service only listen on the localhost (loopback interface), which would suffice for this use.</p>

<p>The echo service may also be something more complicated: perhaps a daemon that monitors a group of ssh tunnels.</p>

<p>Setting the monitor port to 0 turns the monitoring function off, and autossh will only restart ssh upon ssh&rsquo;s exit. For example, if you are using a recent version of OpenSSH, you may wish to explore using the ServerAliveInterval and ServerAliveCountMax options to have the SSH client exit if it finds itself no longer connected to the server. In many ways this may be a better solution than the monitoring port.</p></blockquote>

<p>ということなので、0を指定するとsshがexitした時に再起動します。接続はServerAliveIntervalとServerAliveCountMaxだけ待って応答が来なければexitするので、その場合sshが再起動されるという事でしょう。「この方法がポートモニタするより良い方法だ」といっているので、そうすることにします。</p>

<p>sshのデフォルト<a href="http://www.unixuser.org/~euske/doc/openssh/jman/ssh_config.html">設定</a>では<code>ServerAliveInterval</code>は0になっている(確認のメッセージを送らない）ようなので、適宜設定する必要があります。<br/>
これがまたちょっと厄介ですね。あまり頻繁にパケットを送ると電話回線などプレミアムな回線を使っているときにコストがかさみます。本来はきちんとTPOで設定する必要があると思いますが、とりあえず30秒ぐらいに設定しておきます。</p>

<figure class='code'><figcaption><span>configに追記</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#  connection alive detecting. 30 x 3 [s]</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>ServerAliveInterval   30
</span><span class='line'>ServerAliveCountMax   3
</span></code></pre></td></tr></table></div></figure>


<p><code>ServerAliveCountMax</code>は3がデフォルトのようですので、応答がなくなったあと1分30秒で切断されるようになります。</p>

<p>これで、ちゃんと接続できるか確認してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ps ax <span class="p">|</span> grep <span class="s1">&#39;ssh&#39;</span>
</span><span class='line'> <span class="m">6543</span> ?        Ss     0:00 /usr/lib/autossh/autossh -M0 -N Broker
</span><span class='line'> <span class="m">6544</span> ?        S      0:00 /usr/bin/ssh -N Broker
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mosquitto_sub -v -p <span class="m">22883</span> -t <span class="s1">&#39;$SYS/#&#39;</span>
</span><span class='line'><span class="nv">$SYS</span>/broker/version mosquitto version 1.3.5
</span><span class='line'><span class="nv">$SYS</span>/broker/timestamp 2014-10-18 21:06:44+0100
</span><span class='line'> :
</span><span class='line'> :
</span></code></pre></td></tr></table></div></figure>


<p>Okですね。
さらに、keepalive確認のパケットがどのように出ているか確認してみます。</p>

<p>IPアドレスは下記のようになっています。<br/>
192.168.0.XXX クライアント<br/>
192.168.0.YYY サーバ</p>

<figure class='code'><figcaption><span>Keep Alive packets example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>No.     Time        Source                Destination           Protocol Length Info
</span><span class='line'>      <span class="m">1</span> 0.000000    192.168.0.XXX         192.168.0.YYY           TCP      <span class="m">130</span>    <span class="m">41387</span> &gt; SSHPORT　 <span class="o">[</span>PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">2</span> 0.010903    192.168.0.YYY         192.168.0.XXX           TCP      <span class="m">98</span>     SSHPORT &gt; <span class="m">41387</span> <span class="o">[</span>PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">3</span> 0.010941    192.168.0.XXX         192.168.0.YYY           TCP      <span class="m">66</span>     <span class="m">41387</span> &gt; SSHPORT <span class="o">[</span>ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">4</span> 30.039772   192.168.0.XXX         192.168.0.YYY           TCP      <span class="m">130</span>    <span class="m">41387</span> &gt; SSHPORT <span class="o">[</span>PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">5</span> 30.043964   192.168.0.YYY         192.168.0.XXX           TCP      <span class="m">98</span>     SSHPORT &gt; <span class="m">41387</span> <span class="o">[</span>PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">6</span> 30.044004   192.168.0.XXX         192.168.0.YYY           TCP      <span class="m">66</span>     <span class="m">41387</span> &gt; SSHPORT <span class="o">[</span>ACK<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>30秒ごとに何かしらのパケットをやり取りしていることがわかりました。設定通りです。</p>

<p>さらに、途中で回線を切断してみます。</p>

<figure class='code'><figcaption><span>Packet example (in case of disconnection)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>No.     Time        Source                Destination           Protocol Length Info
</span><span class='line'><span class="c">#　正常なalive確認のパケットやり取り</span>
</span><span class='line'>      <span class="m">1</span> 0.000000    192.168.0.XXX         192.168.0.YYY         TCP      <span class="m">130</span>    <span class="m">41405</span> &gt; SSHPORT <span class="o">[</span>PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">2</span> 0.002137    192.168.0.YYY         192.168.0.XXX         TCP      <span class="m">66</span>     SSHPORT &gt; <span class="m">41405</span> <span class="o">[</span>ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">3</span> 0.002566    192.168.0.YYY         192.168.0.XXX         TCP      <span class="m">98</span>     SSHPORT &gt; <span class="m">41405</span> <span class="o">[</span>PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">4</span> 0.041204    192.168.0.XXX         192.168.0.YYY         TCP      <span class="m">66</span>     <span class="m">41405</span> &gt; SSHPORT <span class="o">[</span>ACK<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#　ここで回線を切断　sshがシャットダウンするまで130秒ぐらい待ち、回線を復旧させる</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  sshがautosshによって再起動されて通信を開始</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 切断前のコネクションをリセット</span>
</span><span class='line'>      <span class="m">5</span> 138.686269  192.168.0.XXX         192.168.0.YYY         TCP      <span class="m">258</span>    <span class="m">41405</span> &gt; SSHPORT <span class="o">[</span>FIN, PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">6</span> 138.687686  192.168.0.YYY         192.168.0.XXX         TCP      <span class="m">98</span>     SSHPORT &gt; <span class="m">41405</span> <span class="o">[</span>PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">7</span> 138.687721  192.168.0.XXX         192.168.0.YYY         TCP      <span class="m">54</span>     <span class="m">41405</span> &gt; SSHPORT <span class="o">[</span>RST<span class="o">]</span>
</span><span class='line'>      <span class="m">8</span> 138.689209  192.168.0.YYY         192.168.0.XXX         TCP      <span class="m">130</span>    SSHPORT &gt; <span class="m">41405</span> <span class="o">[</span>FIN, PSH, ACK<span class="o">]</span>
</span><span class='line'>      <span class="m">9</span> 138.689233  192.168.0.XXX         192.168.0.YYY         TCP      <span class="m">54</span>     <span class="m">41405</span> &gt; SSHPORT <span class="o">[</span>RST<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#　新たなコネクションのスタート</span>
</span><span class='line'>     <span class="m">10</span> 148.955582  192.168.0.XXX         192.168.0.YYY         TCP      <span class="m">74</span>     <span class="m">41407</span> &gt; SSHPORT <span class="o">[</span>SYN<span class="o">]</span>
</span><span class='line'>     <span class="m">11</span> 148.958766  192.168.0.YYY         192.168.0.XXX         TCP      <span class="m">74</span>     SSHPORT &gt; <span class="m">41407</span> <span class="o">[</span>SYN, ACK<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じになりました。何回か試して見ましたが、切断前のコネクションをリセットするやり取りがない場合が多いかもしれません。さらに、alive確認のパケットは2往復でなく1往復半という事もありました。</p>

<p>無事sshの再起動も確認出来ました。</p>

<p>接続確認のためのパケットのサイズは、今回の実験では360byteぐらいでした。もしこの設定（30秒に1回）だとすると1日で1Mbyteぐらいの通信量です。
最近の安いデータ通信用のSIMにとってみれば大したデータ量ではないかもしれませんね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[接続の暗号化]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/11/secure-connection/"/>
    <updated>2015-01-11T11:05:38+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/11/secure-connection</id>
    <content type="html"><![CDATA[<p>普通にMQTTを応用しようとすると、避けては通れない暗号化です。あまり素人が手出しするべき所ではないかもしれませんが、勉強のため考えて見ました。</p>

<!-- more -->


<p>mosquitto.confを眺めてみると、mosquittoでは2つのやり方が準備されているようです。</p>

<ul>
<li><p>公開鍵認証・暗号化</p>

<p>  公開鍵をお互いにやり取りして、お互いを認証・暗号化する普通のやり方ですね。</p></li>
<li><p>証明書ベース認証・暗号化</p>

<p>  HTTPで一般的に使われている証明書による認証ですね。https で始まるwebサイトでは暗号化されるように、この仕組みを使えばMQTTでも通信が暗号化されます。<br/>
  サーバーがオープンで誰でもが接続できるような状況にするためには、必須です。</p></li>
</ul>


<p>mosquittoではユーザ（サブスクライバ、パブリッシャ）認証のためにユーザ名、パスワード方式が使えますが、認証時に平文でこれらがやり取りされるという事ですので、通信経路そのものの暗号化が欠かせません。</p>

<p>MQTTブローカに頼らない暗号化という意味では ssh しかないでしょうか。
ブローカがオープンでない場合であれば、ポートフォワードと合わせ技で安全性が高められるかもしれません。
ただ、この場合、ネットワーク環境によってはsshのトンネリングができない（ポリシー的に）という場合もあるかと思うので、環境の調査が必要かと思います。</p>

<p>最近は<a href="http://jpmens.net/2014/07/03/the-mosquitto-mqtt-broker-gets-websockets-support/">websocket</a>という接続方法もあるので、MQTTブローカをweb applicationでラップしてセキュアにするというやり方もあるかもしれません。</p>

<p>今回はsshのポートフォワードで暗号化してみましたので報告です。</p>

<p>まず、何はなくとも検索。ssh mosquittoあたりでgoogleさんに聞いてみたところ、<a href="http://diabolicalws.blogspot.jp/2012/02/tunneling-mqtt-over-ssh.html">この</a>サイトがヒット。正しくやろうとしていたことです。</p>

<p>このページの最終目標としては、簡易的なVPNとしてのsshによるトンネリングを使ってMQTTプロトコルをセキュアにしようという事のようです。</p>

<p>手順としては、</p>

<ol>
<li><p>トンネリングの設定</p></li>
<li><p>トンネルを使った通信の設定</p></li>
<li><p>パスフレーズなしでの接続方法とセキュリティ設定</p></li>
</ol>


<p>順を追ってやってみます。</p>

<h2>トンネリングの設定</h2>

<p>まずクライアント側の設定です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -f -L 22883:127.0.0.1:1883 SSHusername@MQTT -N
</span></code></pre></td></tr></table></div></figure>


<p>とすることで、クライアント側のポート22883 に対する通信が暗号化された上でサーバ&#8221;MQTT&#8221;の1883に接続されます。ユーザ名は&#8221;SSHusername&#8221;です。
各オプションの意味は以下のとおりです。</p>

<p> -f : バックグラウンドで動作</p>

<p> -L : ローカル側でのポートフォワード（クライアント側のポート変換が設定されます）</p>

<p> -N : サーバ側でコマンドを実行しないように指定</p>

<p>この例ではポートは標準の22となっています。必要に応じて-pオプションでssh通信そのもののポート番号を指定してください。 sshのポート番号も専用のものにしておくことで、更にセキュリティを確保できるかもしれません。<br/>
ここらへんはsshのポートフォワード設定を参照してもらったほうが正しい理解が得られるかと。</p>

<p>この接続をするためには、クライアント、サーバ共にsshが動く環境であることが必要です。適宜設定してください。</p>

<p>このコマンドを実行するとパスワードを聞かれるはずです。実際の無人運用ではこれが問題になりますが、これは後ほど解決してもらえます。</p>

<h2>トンネルを使った通信の設定</h2>

<p>上記の操作でセキュアな通信経路が22883ポートに設定されましたので、これを使って実際にMQTTプロトコルのデータを流してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mosquitto_sub -h 127.0.0.1 -p <span class="m">22883</span> -u dan -P password -t <span class="s1">&#39;test/#&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>-P, -uでユーザ名とパスワードを指定してブローカにサブスクライバとしてログインしています。ホストはローカルホスト、ポートは先程トンネルを設定した22883に指定します。<br/>
-P, -uは必須ではないです。私はこれらナシでつかってます。</p>

<p>トピックを適切に設定してあれば、なにかメッセージを受け取れるはずです。</p>

<h2>パスフレーズなしでの接続方法とセキュリティ設定</h2>

<p>参考にしたページでは、&#8221;Key-Based authentification&#8221;と説明されていますが、公開キーを事前にやり取りしている間柄なら、十分信用できるだろうという事で、鍵を持っている相手はパスフレーズなしでログインさせましょう、という設定です。<br/>
この設定では、ssh接続に際しパスフレーズなしで接続できるようになってしまうので、鍵を他の用途で使うとセキュリティに問題が出る可能性があります。そのため、「このトンネリングだけに使う専用の鍵を用意するように」と注意書きがあります。</p>

<p>パスフレーズ無しでキーを作り、それをサーバに登録します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-keygen
</span><span class='line'>ssh-copy-id SSHusername@MQTT
</span></code></pre></td></tr></table></div></figure>


<p>サーバ側のセキュリティ確保のため、クライアントのキー記述の最初の部分に以下のような設定を追記します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">from</span><span class="o">=</span><span class="s2">&quot;192.168.1.*&quot;</span>,no-pty,permitopen<span class="o">=</span><span class="s2">&quot;127.0.0.1:1883&quot;</span>,command<span class="o">=</span><span class="s2">&quot;/bin/false&quot;</span> ssh-rsa........
</span></code></pre></td></tr></table></div></figure>


<p>この例では</p>

<ul>
<li>接続先のIP制限 from=</li>
<li>ターミナルのアサインをしない no-pty</li>
<li>ローカルホストの指定ポートのみオープン可能にする permitopen=</li>
<li>ログイン時に実行するコマンドを /bin/falseに設定</li>
</ul>


<p>ということを指定しています。
具体的には、192.168.1.*のネットワークからの接続に限定、ターミナルをアサインしない、ローカルホストの1883への接続のみを許可する、リモートから接続するときに指定されたコマンドを実行しない。
という事になりそうです。<br/>
くわしくは、<a href="http://www.nxmnpg.com/ja/8/sshd#9">ここらへん</a>を参照してください。</p>

<blockquote><p>この設定を書くときの注意ですが、設定同士の区切りはコンマですが、設定と鍵本体の区切りは、コンマでなくスペースです。ここを間違えて、2時間ほどハマりました。<br/>
ここをコンマにすると鍵が正しく認識できないのでパスワードを要求されます。</p>

<p>公開鍵をやり取りしていて有効であれば、パスフレーズを聞かれるか何もなしでログインできるかのどちらかです。</p></blockquote>

<p>私の実験では、IPアドレスの制限をしない設定、で実行してうまく動いています。</p>

<p>本来的には、証明書ベースの認証システムを組むのがいいのでしょうけれど、証明書の発行など、よくわかっていないと事故に繋がりそうなので、今回は初学者向けということでトンネリングを実験して見ました。<br/>
小規模なシステムでネットワーク環境もある程度わかっているところにデバイスを配置するには十分な感じかと思います。</p>

<p>また、MQTTプロトコル上からデバイスがつながっているシステムの操作をするときに、重要なパラメタの制御は1箇所でできないようにするとか、あるデバイスの許可とペアで設定して初めてアクチュエートするなど、システム上でのセキュリティ構築も必要かもしれません。</p>

<h2>2015/1/14 追記</h2>

<p>authorized_keysに記入する設定で、<code>permitopen</code>というパラメタがありますが、これを設定すると”コマンドからのsshでは接続出来なくて、configを用いた接続は可能”という変な状態になりました。</p>

<p>具体的には、</p>

<p><code>ssh -f -L 22883:localhost:1883 user@broker -i rsa_key</code></p>

<p>と指定すると、一応sshは動いてトンネリングはできますが、接続しようとするとエラーになります。</p>

<p>一方全く同じパラメタをconfigファイルに書きこんで、configに設定したhost名でsshを起動すると普通に接続できます。</p>

<p>謎です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[引用のフォントサイズ]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/31/font-size/"/>
    <updated>2014-12-31T14:36:58+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/31/font-size</id>
    <content type="html"><![CDATA[<p>以前から、ブログの「引用」のフォントサイズがでかいなあと思っていたのですが、何とか直せたのでメモ。</p>

<!-- more -->


<p>まずは、引用ってなんていうタグ？というところから開始。</p>

<p>firefoxにはWEB開発用にスタイルシートやhtmlのソースとwebページを対比させながら表示する開発モードがあるので、これを使いながらタグを調べました。  <br/>
その結果、&lt;blockquote>ということがわかり、今度はoctopressのスタイルシートの元を検索。結果<code>_typography.scss</code>にその設定がありました。</p>

<p>引用しておくと</p>

<figure class='code'><figcaption><span>_typography.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">blockquote</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">$</span><span class="n">bq</span><span class="o">-</span><span class="k">margin</span><span class="o">:</span> <span class="m">1.2em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-style</span><span class="o">:</span> <span class="k">italic</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.2em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">line-height</span><span class="o">:</span> <span class="m">1.5em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span> <span class="m">4px</span> <span class="k">solid</span> <span class="n">rgba</span><span class="p">(</span><span class="err">$</span><span class="k">text</span><span class="o">-</span><span class="k">color</span><span class="o">-</span><span class="n">light</span><span class="o">,</span> <span class="o">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cite</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">font-style</span><span class="o">:</span> <span class="k">italic</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span> <span class="err">{</span> <span class="k">color</span><span class="o">:</span> <span class="err">$</span><span class="k">text</span><span class="o">-</span><span class="k">color</span><span class="o">-</span><span class="n">light</span> <span class="cp">!important</span><span class="p">;</span> <span class="n">word</span><span class="o">-</span><span class="n">wrap</span><span class="o">:</span> <span class="n">break</span><span class="o">-</span><span class="n">word</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nd">:before</span> <span class="p">{</span> <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;\2014&#39;</span><span class="p">;</span> <span class="k">padding</span><span class="o">:</span><span class="err">{</span><span class="k">right</span><span class="o">:</span> <span class="m">.3em</span><span class="p">;</span> <span class="k">left</span><span class="o">:</span> <span class="m">.3em</span><span class="p">;}</span> <span class="nt">color</span><span class="o">:</span> <span class="o">$</span><span class="nt">text-color-light</span><span class="o">;</span> <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">992px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">padding-left</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.5em</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">border-left-width</span><span class="o">:</span> <span class="nt">4px</span><span class="o">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここに<code>font-size: 1.2em;</code>と指定があるため、文字が他と比べて大きく表示されているように思えましたので、これを上書きすることにします。</p>

<p>具体的には<code>sass/custom/_styles.scss</code>に下記内容を追記しています。</p>

<figure class='code'><figcaption><span>added lines on _styles.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">blockquote</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、本文と同じ程度の大きさのフォントになり、見やすくなりました。</p>

<p>ちなみに、本文のフォントサイズは結局以下のようにして小さくしています。</p>

<figure class='code'><figcaption><span>change the body font size</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">font-size</span><span class="o">:</span> <span class="m">0.9em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[paho-mqttで回線を切るとどうなるか]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/29/vim/"/>
    <updated>2014-12-29T10:28:40+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/29/vim</id>
    <content type="html"><![CDATA[<p>vimのことを書こうと思いましたが、どうもいいネタが思い浮かばないのでMQTTの話にします。</p>

<p>paho-mqttでテスト用のサブスクライブスクリプトを動かして、途中でネットワークのコネクションを切るとどうなるか、という実験です。</p>

<!-- more -->


<p>サブスクライバは下記のようなものです。これはpaho-mqttのページにあったテスト用のスクリプトです。</p>

<figure class='code'><figcaption><span>test_subscriber.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">topic</span> <span class="o">=</span> <span class="s">&quot;TOPIC/YOU/WANTS/SEE&quot;</span>
</span><span class='line'><span class="n">broker</span> <span class="o">=</span> <span class="s">&quot;192.168.0.xxx&quot;</span>
</span><span class='line'><span class="n">portNo</span> <span class="o">=</span> <span class="mi">1883</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">paho.mqtt.client</span> <span class="kn">as</span> <span class="nn">mqtt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when the client receives a CONNACK response from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_connect</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">rc</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Connected with result code &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span>
</span><span class='line'>  <span class="c"># Subscribing in on_connect() means that if we lose the connection and</span>
</span><span class='line'>  <span class="c"># reconnect then subscriptions will be renewed.</span>
</span><span class='line'><span class="c">#    client.subscribe(&quot;$SYS/broker/messages/#&quot;)</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">topic</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when a PUBLISH message is received from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">topic</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">payload</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">mqtt</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_connect</span> <span class="o">=</span> <span class="n">on_connect</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_message</span> <span class="o">=</span> <span class="n">on_message</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">broker</span><span class="p">,</span> <span class="n">portNo</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Blocking call that processes network traffic, dispatches callbacks and</span>
</span><span class='line'><span class="c"># handles reconnecting.</span>
</span><span class='line'><span class="c"># Other loop*() functions are available that give a threaded interface and a</span>
</span><span class='line'><span class="c"># manual interface.</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">loop_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、これを実行して、途中でネットワークを切って見ました。</p>

<p>端末上ではこんな感じ。</p>

<figure class='code'><figcaption><span>In case of transmission line failure..</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1419926642, 1767, 1433, 2513, 0
</span><span class='line'>Connected with result code 0
</span><span class='line'>1419926762, 1767, 1434, 2514, 0
</span><span class='line'>1419926821, 1767, 1432, 2513, 0
</span><span class='line'>  :
</span></code></pre></td></tr></table></div></figure>


<p>最初のサブスクライブを確認してから、接続を60秒以上切断し、元に戻します。</p>

<p>データの最初のフィールドはタイムスタンプなので、120秒のデータ欠損があることがわかります。
その後経路が回復した時点で、再接続されていることがわかります。</p>

<p>スクリプトでは<code>client.connect(broker, portNo, 60)</code>として60秒以上交信しないとpingでMQTT接続をキープするように設定しています。この実験では、60秒以上コネクションを切っていますのでpingが発行され、その答えは帰ってこない状況に有ります。さらにブローカはmosquittoをデフォルトで動かしているので、ブローカがMQTTのコネクションを切ることはありません。（persistent_client_expirationを設定していない）</p>

<p>スクリプトを実行した時のパケットの様子を見てみると。。。。</p>

<ul>
<li><p>TCP でのネゴシエーションがあったあと、MQTTでの接続リクエストがなされます。</p></li>
<li><p>続いてMQTTの接続許可がブローカから来ます。
そしてサブスクライブ要求としてトピックの指定をブローカに送ります。</p></li>
<li><p>この返事として、TCPのACKがあり、サブスクライブの準備が整います。指定したトピックにパブリッシュがあると、サブスクライブされるようになります。</p></li>
</ul>


<p>そして、スクリプト開始から66.9秒後に最初のデータがきました。その後、接続を切ります。</p>

<p>183秒のときに接続を再開。</p>

<p>このとき起こったことは。。。。</p>

<ul>
<li><p>まず、TCPでの接続のために、クライアントからブローカに向かってSYN,ACK、SYNが取り交わされます。</p></li>
<li><p>その後、最初の接続と同じように、MQTTのコネクションが最初の接続と同じIDで開始され、次にサブスクライブ要求が発行されています。</p></li>
<li><p>サブスクライブ要求後、サブスクライブ確認のメッセージがブローカから帰ってきます。</p></li>
<li><p>その3秒後、ブローカからFINパケットとともにデータが送られてきて、クライアントがRSTパケットを返してTCP接続が切られます。</p>

<ul>
<li>このFIN-RST応答は、そのシーケンス番号から、回線を切る前のコネクションの異常終了のためのやり取りだという事がわかりました。ですので、このパケットに乗っていたデータは以前のコネクションのデータだということで破棄されているはずです。スクリプトの出力を見るとこのデータは出力されていませんので、これは正しい理解だという事にします。</li>
</ul>
</li>
</ul>


<!--
このタイミングはパブリッシュのタイミングなので、サブスクライブデータが送られてくるタイミングでもあります。
ブローカ側としては、TCPコネクションが再開したのでデータを送るけれど、すでに同じIDでコネクション要求が入っているので、これは最後のデータね。ということでFINパケットと共に送られたものと思います。
一方のクライアント側は、再接続しているので、このパケットを受け取るソケットが無く、RSTパケットで強制終了のお願いをして終わりにしたのだと考えられます。
-->


<ul>
<li>そのあと、最新のデータが配信されてきました。このデータのタイムスタンプは<code>1419926762</code>で、スクリプトの出力からこのタイムスタンプのデータの受信は確認出来ました。</li>
</ul>


<p>以上が、回線を切断された時のこのスクリプトの動作です。</p>

<p>ここで疑問は、「なぜ、コネクション要求がクライアントから出されるのか」という点です。
スクリプトでは、接続がロストした時の内容は記述していません。ということは、ライブラリ側の判断で再接続がなされているという事になります。</p>

<p>で、よく<a href="https://pypi.python.org/pypi/paho-mqtt#network-loop">マニュアル</a>を読むと、loop_forever()ファンクションがこれを管理しているようです。</p>

<h3>Network loop</h3>

<blockquote><p>These functions are the driving force behind the client. If they are not called, incoming network data will not be processed and outgoing network data may not be sent in a timely fashion.</p>

<p>これらのファンクションはクライアントの裏で駆動力となるものです。これらが呼ばれなければ入力されたデータは処理されず、出力されるべきデータは時間通りに送られないでしょう。</p></blockquote>

<h3>loop_forever()</h3>

<blockquote><p>This is a blocking form of the network loop and will not return until the client calls disconnect(). It automatically handles reconnecting.</p>

<p>これはネットワークループのブロッキングフォームで（私には意味不明）、クライアントがdisconnect()関数を呼び出すまでは帰って来ません。自動的に再接続を管理します。</p></blockquote>

<p>ということなので、（予想では）loop_forever()が再接続を発行して、その結果、スクリプトの処理で再度サブスクライブ要求が出される。ということなのでしょう。</p>

<p>今回、断線後の再接続では切断前と同じIDを使っていましたので、MQTTプロトコル的には再度サブスクライブ要求を出さずとも、以前に指定したトピックをサブスクライブできたはずです。 <br/>
ただ、一体何が起こっているのか判断がつかない状況では、再接続後に再度サブスクライブ要求を出すというのは妥当な処理なのかなとも思います。</p>

<p> ここでのもうひとつの疑問は、「回線が切れた、と判断する基準は何？」ということです。</p>

<p>これについて、<code>connect()</code>のkeepaliveだけ切断する状況と、充分短い時間（ほんの数秒）切断する状況で確認してみたところ、短い時間では再接続が起こらなかったことから、keepaliveの時間以上接続が切れていると(pingに応答がないと)切断されたと判断して「再接続」を行うようです。</p>

<p>マニュアル上では</p>

<h3>keepalive</h3>

<blockquote><p>maximum period in seconds allowed between communications with the broker. If no other messages are being exchanged, this controls the rate at which the client will send ping messages to the broker</p>

<p>ブローカとの最大許されるコミュニケーション間の時間（秒）。他のメッセージが交換されなければ、この数値に基づいてクライアントがpingメッセージをブローカに送るレートをコントロールします。</p></blockquote>

<p>ということで、pingに応答がなければ再接続のトリガになるとは書かれていません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paho MQTT のインストール]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/21/paho-mqtt/"/>
    <updated>2014-12-21T11:25:59+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/21/paho-mqtt</id>
    <content type="html"><![CDATA[<p>もうすこし細かくコントロールできるクライアントを作るべく、Pahoプロジェクトのクライアントをインストールすることにしました。<br/>
現状のテストデバイスは、シェルとmosquittoのクライアントで完成させるつもりですが、次はこちらに移行しようかとおもってます。<br/>
手順は、Pahoのページにも出ていますので、とても簡単。</p>

<!-- more -->


<p>インストールする前に、簡単にお勉強。</p>

<p>Phao Projectとは一体何者？
<a href="http://www.eclipse.org/paho/">Paho project</a></p>

<blockquote><p>The Paho project provides scalable open-source client implementations of open and standard messaging protocols aimed at new, existing, and emerging applications for Machine‑to‑Machine (M2M) and Internet of Things (IoT).</p>

<p>M2M、IoTへのアプリケーションに向けた、オープンで標準なメッセージングプロトコルの、スケーラブルでオープンソースのクライアント実装を提供するプロジェクトです。</p></blockquote>

<p>ということで、たしかにすごい広範囲のクライアント環境を提供しています。</p>

<ul>
<li><h2>MQTT Clients</h2></li>
<li><h3>C/C++</h3>

<p>  Posix C / Windows C<br/>
  embedded systems<br/>
  Posix C++ / Windows C++<br/>
  embedded MQTT-SN 　　(MQTT-SN って何？？: このページの最後にメモ）</p></li>
<li><h3>Java</h3>

<p>  J2SE<br/>
  Android Service</p></li>
<li><h3>JavaScript</h3></li>
<li><h3>Python</h3></li>
<li><h3>Go Client</h3></li>
<li><h3>C# .Net and WinRT</h3></li>
<li><h3>Utilities</h3>

<p>  MQTT Conformance/Interoperability Testing</p></li>
</ul>


<p>で、目的のPython向けのクライアントモジュールは、</p>

<p><a href="http://www.eclipse.org/paho/clients/python/">Python support:</a></p>

<blockquote><p>The Paho Python Client provides a client class with support for both MQTT v3.1 and v3.1.1 on Python 2.7 or 3.x.</p></blockquote>

<p>ということで、2.7と3.xの両方をサポートしているようです。</p>

<p>ここまで確認した所で、インストールを始めました。</p>

<figure class='code'><figcaption><span>steps installing Paho-mqtt for Python</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python --version
</span><span class='line'>Python 2.7.3
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install python-pip
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo pip install paho-mqtt
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cat paho-mqtt-test.py
</span><span class='line'>
</span><span class='line'>import paho.mqtt.client as mqtt
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when the client receives a CONNACK response from the server.</span>
</span><span class='line'>def on_connect<span class="o">(</span>client, userdata, rc<span class="o">)</span>:
</span><span class='line'>    print<span class="o">(</span><span class="s2">&quot;Connected with result code &quot;</span>+str<span class="o">(</span>rc<span class="o">))</span>
</span><span class='line'>  <span class="c"># Subscribing in on_connect() means that if we lose the connection and</span>
</span><span class='line'>  <span class="c"># reconnect then subscriptions will be renewed.</span>
</span><span class='line'>    client.subscribe<span class="o">(</span><span class="s2">&quot;$SYS/#&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when a PUBLISH message is received from the server.</span>
</span><span class='line'>def on_message<span class="o">(</span>client, userdata, msg<span class="o">)</span>:
</span><span class='line'>    print<span class="o">(</span>msg.topic+<span class="s2">&quot; &quot;</span>+str<span class="o">(</span>msg.payload<span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">client</span> <span class="o">=</span> mqtt.Client<span class="o">()</span>
</span><span class='line'>client.on_connect <span class="o">=</span> on_connect
</span><span class='line'>client.on_message <span class="o">=</span> on_message
</span><span class='line'>
</span><span class='line'>client.connect<span class="o">(</span><span class="s2">&quot;iot.eclipse.org&quot;</span>, 1883, 60<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Blocking call that processes network traffic, dispatches callbacks and</span>
</span><span class='line'><span class="c"># handles reconnecting.</span>
</span><span class='line'><span class="c"># Other loop*() functions are available that give a threaded interface and a</span>
</span><span class='line'><span class="c"># manual interface.</span>
</span><span class='line'>client.loop_forever<span class="o">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>python ./paho-mqtt-test.py
</span><span class='line'>
</span><span class='line'>Connected with result code 0
</span><span class='line'><span class="nv">$SYS</span>/broker/version mosquitto version 1.3.5
</span><span class='line'>..
</span><span class='line'>..
</span><span class='line'><span class="nv">$SYS</span>/broker/uptime <span class="m">1258785</span> seconds
</span><span class='line'><span class="nv">$SYS</span>/broker/clients/total 2
</span><span class='line'><span class="nv">$SYS</span>/broker/clients/inactive 1
</span><span class='line'><span class="nv">$SYS</span>/broker/clients/active 1
</span><span class='line'><span class="nv">$SYS</span>/broker/clients/maximum 2
</span><span class='line'><span class="nv">$SYS</span>/broker/clients/expired 0
</span><span class='line'><span class="nv">$SYS</span>/broker/messages/stored 72
</span><span class='line'><span class="nv">$SYS</span>/broker/messages/received 80212
</span><span class='line'><span class="nv">$SYS</span>/broker/messages/sent 65057
</span><span class='line'><span class="nv">$SYS</span>/broker/subscriptions/count 2
</span><span class='line'><span class="nv">$SYS</span>/broker/retained messages/count 50
</span><span class='line'><span class="nv">$SYS</span>/broker/heap/current 12888
</span><span class='line'><span class="nv">$SYS</span>/broker/heap/maximum 23872
</span><span class='line'><span class="nv">$SYS</span>/broker/publish/messages/dropped 5069
</span><span class='line'><span class="nv">$SYS</span>/broker/publish/messages/received 20949
</span><span class='line'><span class="nv">$SYS</span>/broker/publish/messages/sent 5802
</span><span class='line'><span class="nv">$SYS</span>/broker/publish/bytes/received 598854
</span><span class='line'><span class="nv">$SYS</span>/broker/publish/bytes/sent 382692
</span><span class='line'><span class="nv">$SYS</span>/broker/bytes/received 2003874
</span><span class='line'><span class="nv">$SYS</span>/broker/bytes/sent 1025439
</span><span class='line'>.....
</span></code></pre></td></tr></table></div></figure>


<p>となりました。
ここまで、10分かからず完了。</p>

<p>先人に感謝。引き続き、巨人の肩の上で仕事させてもらいます。</p>

<hr />

<p><a href="http://mqtt.org/new/wp-content/uploads/2009/06/MQTT-SN_spec_v1.2.pdf">MQTT-SN</a></p>

<p>MQTT For Sensor Networks</p>

<p>だそうです。概略だけ、かいつまんでみると。</p>

<blockquote><p>It is optimized for communications over networks where bandwidth is at a premium or where the network con-
nection could be intermittent. However MQTT requires an underlying network, such as TCP/IP, that provides
an ordered lossless connection capability and this is too complex for very simple, small footprint, and low-cost
devices such as wireless SAs.
The purpose of this document is to specify MQTT-SN, a pub/sub protocol for wireless sensor networks.
MQTT-SN can be considered as a version of MQTT which is adapted to the peculiarities of a wireless commu-
nication environment.</p>

<p>センサーネットワークのような、回線の費用がかかるような場所、しばしば回線が落ちるようなところに最適化されたMQTTプロトコルではありますが、小さなローコストのシンプルデバイスにとっては、複雑すぎるTCP/IPのようなロスレスのコネクションを基礎にしています。
このドキュメントはワイヤレスセンサネットワークのためのパブリッシュ・サブスクライブプロトコルであるMQTT-SNの仕様を規定します。MQTT-SNはワイヤレスコミュニケーション環境の特色に特化したMQTTのバージョンだと考えられます。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MQTTのパケットを覗いてみた(1)]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/20/mqtt-packets/"/>
    <updated>2014-12-20T12:24:00+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/20/mqtt-packets</id>
    <content type="html"><![CDATA[<p>mosquitto_pubなど、mosquittoのクライアント用コマンドで接続した時、どんなことになっているのかちょっと気になったので調べて見ることにしました。
ここでは、サブスクライブ要求した時にどんなことが行われているか、また、mosquitto_subをkillで殺した時、なにか通信しているのか、ということを確認しました。</p>

<!-- more -->


<h2>mosquitto_sub でサブスクライブ要求した場合</h2>

<p>まずは、パケットをキャプチャするものを用意しなければいけません。
定番、ということでwiresharkをインストールして、キャプチャ用のソフトにデバイスへのアクセスのパーミッションを付与します。
<a href="http://www005.upp.so-net.ne.jp/develop-tom/deb/wireshark-deb.html">こちらのページ</a>にわかりやすく記載されています（ありがとうございます）。</p>

<p>まとめておくと、</p>

<figure class='code'><figcaption><span>Install wireshark and configure&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>:# apt-get install wireshark
</span><span class='line'>:# setcap <span class="s1">&#39;CAP_NET_RAW+eip CAP_NET_ADMIN+eip&#39;</span> /usr/bin/dumpcap
</span></code></pre></td></tr></table></div></figure>


<p>キャプチャインターフェイスをeth0にし、IPアドレスのフィルタにブローカのアドレスを指定してキャプチャを始めます。</p>

<p>サブスクライブを要求します。</p>

<pre><code>:$ mosquitto_sub -v -t \$SYS/broker/messages/# -h mqtt.broker.host.name
</code></pre>

<p>MQTTプロトコルメッセージの最初2バイトは固定ヘッダーになります。MQTTプロトコルメッセージの最小単位です。</p>

<p>TCPレベルでの接続作業があって、MQTTの接続が始まります。</p>

<hr />

<h3>STEP 1: 接続要求　Client -> Broker</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="m">0000</span>   <span class="m">10</span> <span class="m">22</span> <span class="m">00</span> <span class="m">06</span> 4d <span class="m">51</span> <span class="m">49</span> <span class="m">73</span> <span class="m">64</span> <span class="m">70</span> <span class="m">03</span> <span class="m">02</span> <span class="m">00</span> 3c <span class="m">00</span> <span class="m">14</span>  .<span class="err">&quot;</span>..MQIsdp...&lt;..
</span><span class='line'><span class="m">0010</span>   6d 6f <span class="m">73</span> <span class="m">71</span> 5f <span class="m">73</span> <span class="m">75</span> <span class="m">62</span> 5f <span class="m">33</span> <span class="m">35</span> <span class="m">38</span> <span class="m">35</span> 5f <span class="m">75</span> <span class="m">62</span>  mosq_sub_3585_ub
</span><span class='line'><span class="m">0020</span>   <span class="m">75</span> 6e <span class="m">74</span> <span class="m">75</span>                                      untu
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>固定ヘッダ：<br/>
0000 : メッセージタイプ (メッセージ’１’＝CONNECT）<br/>
0001 : 長さ (続く可変ヘッダーのメッセージ長、ここでは34byte)</p></li>
<li><p>可変ヘッダー<br/>
0002 : 次のメッセージの長さ　MSB<br/>
0003 : LSB　（ここでは6byte）<br/>
0004 : &ldquo;MQIsdp&rdquo; （ここは定型句のようです）<br/>
000A : プロトコルバージョン &ldquo;03&rdquo;<br/>
000B : FLAGs (CleanSession=&lsquo;1&rsquo;)<br/>
000C : Keep Alive timer[s] MSB<br/>
000D : Keep Alive timer[s] LSB  （ここでは60秒）<br/>
000E : 次のメッセージの長さ　MSB<br/>
000F :  　　LSB　（ここでは20byte) <br/>
0010 : クライアント識別子 (オプション&ndash;idで指定したものが入ります。この例ではデフォルト値）</p></li>
</ul>


<p>まず、ブローカにMQTTプロトコルの接続要求をだします。自分のIDを指定していますので、ブローカは誰が何のトピックをサブスクライブしているか、をこのときのIDをキーにして把握します。</p>

<hr />

<h3>STEP 2 : 要求の返事　Client &lt;- Broker</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="m">0000</span>   <span class="m">20</span> <span class="m">02</span> <span class="m">00</span> <span class="m">00</span>                                       ...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>固定ヘッダ：<br/>
0000 : メッセージタイプ (メッセージ’2’＝CONNACK）<br/>
0001 : 長さ 2byte</p></li>
<li><p>可変ヘッダ：<br/>
0002 : トピック名圧縮要求(予約：未使用）<br/>
0003 : 接続要求戻りコード（ここでは&#8217;00&#8217;で接続許可。&#8217;00&#8217;以外は接続拒否）</p></li>
</ul>


<p>先の接続要求に対して、許可の返事がブローカから来ます。</p>

<hr />

<h3>STEP 3: サブスクライブ要求　Client -> Broker</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="m">0000</span>   <span class="m">82</span> 1b <span class="m">00</span> <span class="m">01</span> <span class="m">00</span> <span class="m">16</span> <span class="m">24</span> <span class="m">53</span> <span class="m">59</span> <span class="m">53</span> 2f <span class="m">62</span> <span class="m">72</span> 6f 6b <span class="m">65</span>  ......<span class="nv">$SYS</span>/broke
</span><span class='line'><span class="m">0010</span>   <span class="m">72</span> 2f 6d <span class="m">65</span> <span class="m">73</span> <span class="m">73</span> <span class="m">61</span> <span class="m">67</span> <span class="m">65</span> <span class="m">73</span> 2f <span class="m">23</span> <span class="m">00</span>           r/messages/#.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>固定ヘッダ：<br/>
0000 メッセージタイプ (メッセージ’8’＝SUBSCRIBE, このメッセージ自身をQoS=1で送信）<br/>
0001 長さ　27byte</p></li>
<li><p>可変ヘッダ：<br/>
0002 メッセージID　16bit (MSB,LSB)<br/>
0004 ペイロード長さ　16bit (MSB,LSB) ここでは22byte<br/>
0005 ペイロード本体　ここではサブスクライブ要求するトピックを指定。<br/>
001C QoS指定　要求するサブスクライブのQoS指定　QoS=&lsquo;0&rsquo;</p></li>
</ul>


<p>サブスクライブ要求をします。同時にどのトピックを購読するのかを指定します。</p>

<p>複数トピックを指定した場合は、可変ヘッダに「ペイロード長さ指定+ペイロード本体（トピック名）+QoS指定」が続きます。</p>

<hr />

<h3>STEP 4: データの送付　Client &lt;- Broker</h3>

<p>本当は、ここでSUBACKがブローカから送られてくるはずなのですが、それが無く、いきなりデータが送られてきました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="m">0000</span>   <span class="m">31</span> 1f <span class="m">00</span> 1b <span class="m">24</span> <span class="m">53</span> <span class="m">59</span> <span class="m">53</span> 2f <span class="m">62</span> <span class="m">72</span> 6f 6b <span class="m">65</span> <span class="m">72</span> 2f  1...<span class="nv">$SYS</span>/broker/
</span><span class='line'><span class="m">0010</span>   6d <span class="m">65</span> <span class="m">73</span> <span class="m">73</span> <span class="m">61</span> <span class="m">67</span> <span class="m">65</span> <span class="m">73</span> 2f <span class="m">73</span> <span class="m">74</span> 6f <span class="m">72</span> <span class="m">65</span> <span class="m">64</span> <span class="m">37</span>  messages/stored7
</span><span class='line'><span class="m">0020</span>   <span class="m">32</span> <span class="m">31</span> <span class="m">24</span> <span class="m">00</span> 1d <span class="m">24</span> <span class="m">53</span> <span class="m">59</span> <span class="m">53</span> 2f <span class="m">62</span> <span class="m">72</span> 6f 6b <span class="m">65</span> <span class="m">72</span>  21<span class="nv">$.</span>.<span class="nv">$SYS</span>/broker
</span><span class='line'><span class="m">0030</span>   2f 6d <span class="m">65</span> <span class="m">73</span> <span class="m">73</span> <span class="m">61</span> <span class="m">67</span> <span class="m">65</span> <span class="m">73</span> 2f <span class="m">72</span> <span class="m">65</span> <span class="m">63</span> <span class="m">65</span> <span class="m">69</span> <span class="m">76</span>  /messages/receiv
</span><span class='line'><span class="m">0040</span>   <span class="m">65</span> <span class="m">64</span> <span class="m">37</span> <span class="m">33</span> <span class="m">38</span> <span class="m">33</span> <span class="m">30</span> <span class="m">31</span> <span class="m">20</span> <span class="m">00</span> <span class="m">19</span> <span class="m">24</span> <span class="m">53</span> <span class="m">59</span> <span class="m">53</span> 2f  ed738301 ..<span class="nv">$SYS</span>/
</span><span class='line'><span class="m">0050</span>   <span class="m">62</span> <span class="m">72</span> 6f 6b <span class="m">65</span> <span class="m">72</span> 2f 6d <span class="m">65</span> <span class="m">73</span> <span class="m">73</span> <span class="m">61</span> <span class="m">67</span> <span class="m">65</span> <span class="m">73</span> 2f  broker/messages/
</span><span class='line'><span class="m">0060</span>   <span class="m">73</span> <span class="m">65</span> 6e <span class="m">74</span> <span class="m">35</span> <span class="m">39</span> <span class="m">34</span> <span class="m">34</span> <span class="m">31</span>                       sent59441
</span></code></pre></td></tr></table></div></figure>


<p>固定ヘッダ：<br/>
0000 : メッセージタイプ (メッセージ’3’＝PUBLISH, このメッセージ自身をQoS=1で送信）<br/>
0001 : 長さ　31byte</p>

<p>可変ヘッダ：
0002 : トピック名長さ　16bit (MSB,LSB) ここでは27byte<br/>
0004 : トピック名　&#8217;$SYS/broker/messages/stored&#8217;<br/>
  (QoSによっては、ここにメッセージID（16bit）が入る）<br/>
001F : ペイロード　上記トピックのデータが来る<br/>
　（ここまでが固定ヘッダで指定された長さ）</p>

<p> 複数トピックが同時に同じパケットで配信される場合、「固定ヘッダ(PUBLISHメッセージ)+可変ヘッダ(トピックとデータ）」が続きます。</p>

<p>この例でも、0021から他のトピックのデータが繰り返されているのがわかります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="m">0020</span>      <span class="m">31</span> <span class="m">24</span> <span class="m">00</span> 1d <span class="m">24</span> <span class="m">53</span> <span class="m">59</span> <span class="m">53</span> 2f <span class="m">62</span> <span class="m">72</span> 6f 6b <span class="m">65</span> <span class="m">72</span>  .1<span class="nv">$.</span>.<span class="nv">$SYS</span>/broker
</span><span class='line'><span class="m">0030</span>   2f 6d <span class="m">65</span> <span class="m">73</span> <span class="m">73</span> <span class="m">61</span> <span class="m">67</span> <span class="m">65</span> <span class="m">73</span> 2f <span class="m">72</span> <span class="m">65</span> <span class="m">63</span> <span class="m">65</span> <span class="m">69</span> <span class="m">76</span>  /messages/receiv
</span><span class='line'><span class="m">0040</span>   <span class="m">65</span> <span class="m">64</span> <span class="m">37</span> <span class="m">33</span> <span class="m">38</span> <span class="m">33</span> 30
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>よくわからなかったのが、固定ヘッダの1バイトでどうやって長いメッセージの長さを表現するのか、というところです。</p>

<p>仕様をよく見ると下記のように書いてありました。</p>

<blockquote><p>The variable length encoding scheme uses a single byte for messages up to 127 bytes long. Longer messages are handled as follows.</p>

<p>Seven bits of each byte encode the Remaining Length data, and the eighth bit indicates any following bytes in the representation.<br/>
Each byte encodes 128 values and a &ldquo;continuation bit&rdquo;.<br/>
For example, the number 64 decimal is encoded as a single byte, decimal value 64, hex 0x40.<br/>
The number 321 decimal (= 65 + 2*128) is encoded as two bytes, least significant first. The first byte 65+128 = 193. Note that the top bit is set to indicate at least one following byte. The second byte is 2.</p></blockquote>

<p>この日本語訳もよくわからないし、英語も何が言いたいのかよくわからずに、仕様書にある例をつらつら眺めると。。。
つまりは、</p>

<ul>
<li>全体の長さをバイナリで示して、下から7ビット切り離す</li>
<li>切った残りのbitに&#8217;1&#8217;がのこっているのなら、切り取った7bitの最上位に&#8217;1&#8217;をつけて、最初の「長さを示す値(1byte)」とする</li>
<li>さらに残ったものを同じように処理して、残りが0になるまでやる</li>
</ul>


<p>という事がわかりました。</p>

<p>仕様では、長さを示す数値は4バイトまで長くできる、ということなので
単純に<code>7 x 4 = 28 bit</code>長の変数(unsigned int)だ、ということです。</p>

<p>固定長でフィールドを用意するのではなく、短いメッセージをできるだけ効率良く送出するために、こんな工夫をしているのだなあと思った次第。</p>

<hr />

<p>mosquitto_subを起動した状態から、killあるいはCtrl-Cでプロセスを止めた場合ですが、</p>

<p>これは、ご想像通り、TCPのセッションは切れますが、MQTTプロトコル上でのUNSUBSCRIBEはなされません。ですので、同じIDを指定して接続した場合、再度同じトピックが配信されます。
しかし、mosquittoのクライアントでは、単純に接続する、というだけのコマンドが無いので、新たにトピックをサブスクライブする指定しかできません。その場合、前のサブスクライブでclean sessionをどのように指定していたか、で結果が変わります。</p>

<p>clean sessionでサブスクライブしていたもの（mosquitto_subではこれがデフォルト）はセッションが切れて、新たにセッションが開始されます。<br/>
clean sessionをDisable していたセッションも、あらたに発行したサブスクライブセッションがclean sessionだと、以前のセッションは切断されます。<br/>
最初のサブスクライブも次のサブスクライブもclean sessionをdisableしていると両方のサブスクライブセッションが維持されて（多分、一つにマージされる）、両方のデータが配信されます。</p>

<p>今回、パケットを確認してみて、mosquittoのクライアントソフトではあまり行儀のいいクライアントスクリプトは書けないなあ、という感じがしました。
デバイス側はRaspiからmbedに移行しようという計画なので、その時にいいクライアントをつくりましょ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2つのトピックが。。。]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/19/disable-clean-session/"/>
    <updated>2014-12-19T20:45:30+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/19/disable-clean-session</id>
    <content type="html"><![CDATA[<p>現在、テスト用に2台のRaspiでMQTTを使ったテレメトリシステムを運用しています。先日、どうも一台のRaspiのファイルシステムの調子が悪くなったようで、コンソールにエラーが出ていました。立ち上がらなくなると大変なので、適宜バックアップを取り、もう一つ新しいRaspiを用意して移行する手順を進めていました。</p>

<!-- more -->


<p>そして、テストとして新しいRaspiからのデータを手元の計算機（Ubuntu)でサブスクライブしてみたところ、新しいRaspiからのトピックだけを受信しているはず（と思っている）なのに、古いサブスクライブのトピックも同時に受信されてしまいます。</p>

<p>よく見てみると、古いRaspiからのデータをサブスクライブする時にオ、プションとして<code>--disable-clean-session</code>と<code>--id</code>を指定していました。新しいRaspiには、同じオプション（idも同じ）で違うトピック（新しいRaspiがパブリッシュするトピック）をサブスクライブするようにブローカにお願いしています。</p>

<p>ここでハタと気づいたのが、「もしかしたら、同じIDだし、クリーンセッションをオフにしてサブスクライブ要求しているから、一度サブスクライブかけたトピック（セッション）はクリーンにならず、他のトピックをサブスクライブしてもついてくるのでは・・・」という点でした。</p>

<p>これを確認するため、<code>--disable-clean-session</code>をとって、ほかのパラメタは同じで、古いRaspiがパブリッシュしているトピックをサブスクライブ要求してすぐに切断し（これで、セッションが切れるはず）、さらに新しいRaspiがパブリッシュしているトピックのみをサブスクライブ要求してみました。これで昔のトピックサブスライブセッションはクリアされ、新しいトピックのみが受信されることになるはずです。</p>

<p>結果、新しいサブスクライブだけを入手することが出来ました。</p>

<p>具体的には、</p>

<figure class='code'><figcaption><span>Why Two topics comes up??</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mosquitto_sub --disable-clean-session --id abcd -t data/OLD_pi -q 1
</span><span class='line'><span class="o">(</span>古いRaspiからのデータ）
</span><span class='line'>^c
</span><span class='line'>　　これで、このサブスクライブはおしまいにした、と思っていたが。。。。
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mosquitto_sub --disable-clean-session --id abcd -t data/NEW_pi -q 1
</span><span class='line'>（古いRaspiからのデータ）
</span><span class='line'>（新しいRaspiからのデータ）
</span><span class='line'>^C
</span><span class='line'>
</span><span class='line'>　　？？なぜ2つから？？
</span><span class='line'>  --disable-clean-sessionがあると一度サブスクライブしたセッションは、
</span><span class='line'>  IDに張り付いているのでは？？？
</span><span class='line'>  だから、同じIDで違うトピックをサブスクライブしようとしても、
</span><span class='line'>  前のセッションも復活する？
</span><span class='line'>  ならば、昔のセッションをクリアにしてあげればいいはず。
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mosquitto_sub --id abcd -t data/OLD_pi -q 1
</span><span class='line'>^c
</span><span class='line'>  clean sessionで接続してすぐに切断。
</span><span class='line'>  これで、古いサブスクライブのセッションが切れたはず。
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mosquitto_sub --disable-clean-session --id abcd -t data/NEW_pi -q 1
</span><span class='line'>（新しいRaspiからのデータ）
</span><span class='line'>（新しいRaspiからのデータ）
</span><span class='line'>（新しいRaspiからのデータ）
</span><span class='line'>
</span><span class='line'>　　思ったとおり
</span></code></pre></td></tr></table></div></figure>


<p>という感じです。</p>

<p>ということで、スクリプトで Clean Session を設定していないサブスクライブを切り替えるときは、プロセスをkillするだけではだめで、 Clean Sessionで一度接続して切断することで、セッションを切る必要があるという事でした。さもないと、同じIDで再接続した時に前にサブスクライブしていたトピックも送られてきてしまう、のでは？ということした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本語入力]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/14/ime/"/>
    <updated>2014-12-14T20:07:28+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/14/ime</id>
    <content type="html"><![CDATA[<p>日本語入力を変更しました。Mozcです。</p>

<p>なかなかいい感じで変換してくれます。キーバインドをATOK風にしていますが、比較的思ったとおりに使えます。</p>

<!-- more -->


<p>インストールメモ、といってもapt-getだけですが。。。</p>

<pre><code>sudo apt-get install ibus-mozc
</code></pre>

<p>だけです。
あとは、一旦ログアウトしてログインするとibusの「インプットメソッドの選択」の日本語入力メニューにmozcが見えてえいるはず。それを選択して、「設定」を押して適当な設定変更をして、おしまい。</p>

<p>日本語入力はキーボードに次いで重要な部分なので、思ったとおりに動いてくれるのは大変ありがたいです。</p>

<p>1つ気になるのが、変換中でのキャレット表示がわかりづらい。これはシステムの問題かと思いますが、たとえば、「ひとつきになるのが」と打って変換した時に、「ひと月になるのが」と表示されてるのですが、変換がどこで区切られて変換されているのかがわかりにくいです。普通のIMEだと変換しているところまでが太いアンダーラインがついたりしますが、ubuntu12.04では全部同じ太さのアンダーラインになってしまいます。14以降だと改善されているのですけど。。。。</p>

<p>ちなみに、今、キーボードはFILCOのMajestouch 黒軸　です。いいキーボードなのですが、キーのタッチが私の癖に合わないみたいで、ミスタイプがちょっと多いです。もう少しクリックのある感じで、奥まで押した時に打鍵が確定するのがいいような感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awkを使う]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/14/awk-example/"/>
    <updated>2014-12-14T09:04:24+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/14/awk-example</id>
    <content type="html"><![CDATA[<p>いま、MQTTでデータを送っていますが、データの最初のフィールドがエポックタイムになっています。なので、データをパッと見たところでは何時のデータなのか分かりません。
そこで、awkを使って普通の表示にしてやります。</p>

<!-- more -->


<p>まずは、最初のフィールドを切り出す必要があります。これは簡単で</p>

<pre><code>awk -F, '{print $1}'
</code></pre>

<p>です。セパレータがコンマなので、-Fオプションで変更します。セパレータで区切られた最初のフィールドがプリントされます。</p>

<p>これだけだと</p>

<pre><code>1418394962
1418395021
1418395081
1418395142
1418395202
</code></pre>

<p>なかんじなのでこれをdate コマンドで時刻表示に変換してあげます。
strftime()なる関数があるawk処理系もあるようですが、ここではシェルコマンドを使ってやってみました。</p>

<p>単純には</p>

<pre><code>date -d @`cat data.txt|awk -F, '{print $1}'`
</code></pre>

<p>とやるとよさそうですが、複数行だとエラーします。</p>

<p>なので、各行ごとにdateコマンドが発行される必要があります。
ということはawk中で処理する必要があるということで。。。。</p>

<pre><code>cat data.txt|awk -F, '{cmd="date -d @"$1; system(cmd)}'
</code></pre>

<p>これで、</p>

<pre><code>2014年 12月 13日 土曜日 00:02:01 JST
2014年 12月 13日 土曜日 00:03:02 JST
2014年 12月 13日 土曜日 00:04:01 JST
2014年 12月 13日 土曜日 00:05:01 JST
</code></pre>

<p>こんな感じになります。ひとまずok。</p>

<p>で、さらに、この日付の後、データを表示しようとおもって、</p>

<pre><code>cat data.txt|awk -F, '{cmd="date -d @"$1; system(cmd); print $2"  "$3}'
</code></pre>

<p>とすると。。。。</p>

<pre><code>2014年 12月 13日 土曜日 00:05:01 JST
 1710   2004
2014年 12月 13日 土曜日 00:06:02 JST
 1709   2002
2014年 12月 13日 土曜日 00:07:01 JST
 1710   2003
</code></pre>

<p>コマンド実行結果に改行コードが入っているので、こんなになってしまいます。
これではいけないということで、色々調べてみると</p>

<pre><code>cat data.txt|awk -F, '{cmd="date -d @"$1; cmd | getline result; close(cmd); print result "  " $2"  "$3}'
</code></pre>

<p>としてやるといいことが分かりました。変数にコマンドを書いて、それを実行して結果を得るために　cmd | getline 変数（結果が入る） というのが想像できませんでした。</p>

<pre><code>2014年 12月 13日 土曜日 00:09:01 JST   1710   2003
2014年 12月 13日 土曜日 00:10:02 JST   1710   2002
2014年 12月 13日 土曜日 00:11:02 JST   1709   2003
</code></pre>

<p>これで、望むフォーマットになりました。</p>

<p>日付と時間だけをプリントするのはdateコマンドにフォーマット指示を追加して</p>

<pre><code>cmd= "date +\"%F %T\" -d @"
</code></pre>

<p>フォーマット内部にスペースを指定するためにはダブルクオートでフォーマットをくくる必要があります。awkにはバックスラッシュでダブルクオートをエスケープしておきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[やっと復活。。。]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/13/restarted/"/>
    <updated>2014-12-13T16:23:35+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/13/restarted</id>
    <content type="html"><![CDATA[<p>前のブログで「ランチャが消えちゃう」なんていう話をしていたらもっと深刻な状況に。<br/>
今度は、ランチャやメニューは表示されるのですが、デスクトップ自体が真っ黒のままで何も表示されず。ターミナルのアイコンをランチャ上でクリックすると、ターミナルは立ち上がっているようなのですが、見えません。メニューも一応見えていますが、クリックすると茶色いプルダウンらしきものが広がるだけで何も見えません。</p>

<!-- more -->


<p>ブログに書いた手順を試してみるも、ターミナルが見えないのでいかんともし難く。。。。<br/>
ブラインド状態でコマンド入力してみても、うまく入力できているようですが、効果なし。</p>

<hr />

<h2>新しいubuntuを立ち上げ</h2>

<p>webでいろいろ調べましたが、結局解決には至らず。新しいubuntuをインストールするのが早いのじゃないか、ということで再インストールに。</p>

<p>幸い、MacOSのParallelsの上の仮想PCだったので、トラブった環境はそのままにしてすすめました。こういうとき仮想環境は楽ですね。</p>

<p>まずは、大事なブログのソースファイルをまるごと救出。<br/>
Ctrl-Alt-F1でCUIベースのターミナルを開いて、</p>

<pre><code>tar czf octopress.tar.gz octopress
</code></pre>

<p>のような感じで。</p>

<p>さて、これをscpでコピーしようとしたら、どうもうまくいかず。。。</p>

<p>きちんとsshの設定をしていなかったからか。。。反省。</p>

<p>ですが、これまたラッキーなことにParallelsにはホストOSとのファイル共有が標準で用意されていて、これがubuntuでも有効です。</p>

<pre><code>cp ./octopress.tar.gz ~/Desktop/Parallels\ Shared\ Folders/
</code></pre>

<p>とするだけです。
これで大事な原稿と環境はホストOSにコピーされました。</p>

<p>肝心のインストールは、ubuntu のインストール用ディスクイメージを持ってきて、Parallelsに教えてあげるだけであとは勝手にインストールして完了。</p>

<hr />

<h2>git インストール</h2>

<p>さてここから環境の構築です。</p>

<p>まず、SSH関係をしっかりと構築したあと、</p>

<p><a href="http://octopress.org/docs/setup/">octopressのセットアップ手順</a>にしたがって、</p>

<pre><code>sudo apt-get install git
</code></pre>

<p>としてインストール。簡単。問題無し。</p>

<p>一応、動作を確認。gitで使うディレクトリに移動して</p>

<pre><code>git init
</code></pre>

<p>エラーなし。okです。</p>

<h2>ruby インストール</h2>

<p>これまた、手順にしたがって、rbenvでRubyを<a href="http://octopress.org/docs/setup/rbenv/">インストール</a>することにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span>
</span><span class='line'>git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>ubuntuでは、<code>.bash_profile</code>をログイン時に実行するために</p>

<pre><code>echo 'source ~/.bash_profile' &gt;&gt; .bashrc
</code></pre>

<p>としました。</p>

<p>インストールの結果を確認します。
新しいターミナルを開いて、</p>

<pre><code>echo $PATH
</code></pre>

<p>の結果に<code>~/.rbenv/bin</code>などが入って入ればいいかと思います。</p>

<p>これでrbenvツールが設定できたので、ここからRubyのインストールです。</p>

<p>私の環境では<code>zlib1g-dev</code>と<code>libssl-dev</code>が入っていなかったので、あとあとエラーしました。</p>

<p>念のため前もって</p>

<pre><code>sudo apt-get install zlib1g-dev libssl-dev
</code></pre>

<p>などとして、インストールするか確認しておいたほうがいいかもしれません。
そうでないと何回もRubyをインストールすることになります。</p>

<ul>
<li>octopressのセットアップではRubyのモジュールをダウンロードしますが、このときサーバにSSLで接続します。そのためにSSLのライブラリが必要なようです。</li>
</ul>


<p>では、インストール。解説にしたがい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rbenv install 1.9.3-p0
</span><span class='line'><span class="nv">$ </span>rbenv <span class="nb">local </span>1.9.3-p0
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<p>と、しました。</p>

<p>実は、<code>rbenv install 1.9.3-p0</code>で<code>installなんてコマンドないよ！</code>と起こられましたが、<code>ruby-build</code>が正しい位置に持ってこれていなかったのが原因でした。</p>

<pre><code>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<p>を正しく実行し直して事なきを得ます。</p>

<ul>
<li>webの解説によれば、<code>rbenv local ruby 1.9.3-p0</code>は、その他のディレクトリにあるRuby環境を変更することなく、octopressをインストールするために使われるそうです。もし、どこでもこのバージョンを使いたいなら、local を grobal に変更するといい、と書かれています。</li>
</ul>


<p>インストールができたら、<code>Ruby --version</code>でバージョンを確認。OK。</p>

<hr />

<h2>Octopress</h2>

<p><a href="">こちらの手順</a>にしたがってインストール。</p>

<p>まず</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>


<p>としてoctopress自身を持ってきます。</p>

<p>さらに、gemで必要なRubyモジュールをインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash <span class="c"># If you use rbenv, rehash to be able to run the bundle command</span>
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>ここで、ちゃんと動くかどうか</p>

<pre><code>rake generate
</code></pre>

<p>でためしてみたところ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="c">## Generating Site with Jekyll</span>
</span><span class='line'>identical <span class="nb">source</span>/stylesheets/screen.css
</span><span class='line'>/home/masa/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/
</span><span class='line'>execjs-2.2.2/lib/execjs/runtimes.rb:51:in <span class="sb">`</span>autodetect<span class="err">&#39;</span>: Could not find
</span><span class='line'>a JavaScript runtime. See https://github.com/sstephenson/execjs <span class="k">for</span> a
</span><span class='line'>list of available runtimes. <span class="o">(</span>ExecJS::RuntimeUnavailable<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>と言われてしまいました。
&ldquo;octopress Could not find a JavaScript runtime&#8221;をキーワードに
googleさんに尋ねてみると、解決策が</p>

<pre><code>sudo apt-get install nodejs
</code></pre>

<p>を実行しろ、ということだったので、さっそくインストールし、無事<code>rake generate</code>できることを確認。</p>

<p>さらに<code>rake preview</code>で出来栄えも確認し、インストール完了。</p>

<p>やっと環境が整いました。</p>

<hr />

<h2>昔の機械から原稿を持ってくる</h2>

<p>さて、昔の機械からデータを持ってこなきゃいけませんが、オリジナルのoctopress からテーマを更新(oct2を使用)しているので、もしかしたらコピーだけではだめかもしれないという危惧もあり、厄介かなあとおもいつつも、ダメモトということで、octopressディレクトリをまるごとコピー。</p>

<p>オリジナルをキープしておいて、持ってきたものをコピーしましたが、<code>rake generate</code>では<code>「バージョンが違いますけど！」</code>と注意されてしまいます。しかたがないので、オリジナルに戻して、今度はsourceフォルダだけを昔のものに入れ替えて試してみました。</p>

<p>すると、何事もなくgenerateが可能に。さらにpreviewして元のBlogページが戻ることを確認！！ああ、素晴らしい。</p>

<p>ということで、記事を書き始めるとまたまたトラブル。。。。</p>

<p>どうも文字が大きい。さらに、バックグラウンドの絵がページの頭の部分で黒くなる。。。。</p>

<p>「うむ、やはりコピーだけではダメかああああ。」
しかたなく、もう一度octopressの環境から作り直し。さらにoct2も素直にインストールし直し。</p>

<p>まず、octopressのディレクトリをまるごと削除。もう一度インストールし直します。</p>

<p>さらにoct2を以下のようにしてインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/bijumon/oct2.git .themes/oct2
</span><span class='line'>rake install<span class="o">[</span><span class="s2">&quot;oct2&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/bijumon/oct2">oct2のページ</a>によるインストール方法ではcloneの保存先が<code>.themes/</code>ですが、これではエラーしてしまうので、<code>.themes/oct2</code>としてみました。</p>

<p>これで一応環境は整っているはずなので、このまま何もせず</p>

<pre><code>rake preview
</code></pre>

<p>としてfirefoxなどで<a href="http://localhost:4000">localhost:4000</a>をアクセス。oct2が有効になっていることを確認します。</p>

<p>いよいよblogのソースをコピーします。といっても、.mdの原稿を<code>_post</code>ディレクトリにコピーするだけです。</p>

<p>さらに、以下のファイルをコピーしました。</p>

<pre><code>./_config.yml
./public/image/background.png  (自分で作ったバックグラウンドカラー）
./public/image/logo.png
./public/image/(その他必要な画像）
./source/includes/post/date.html（日付表示がうまくいくように変更したもの）
./source/(その他、自分で作ったディレクトリ）
</code></pre>

<p>これで、再び<code>rake preview</code>を実行。</p>

<p>！！！やっとこれで元通り！！！とおもったところが、まだ文字が異常に大きい。。。</p>

<p>これまた、googleにたずねると、「<a href="http://blog.nambo.jp/2013/07/26/change-octopress-font-size/">ここをご覧なさい</a>」といわれたので、そのまま追加して、納得できる出来栄えに。。。。</p>

<figure class='code'><figcaption><span>./sass/custom/_stypes.scss　に追加</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.2em</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h2</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.1em</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h3</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#content</span> <span class="nc">.blog-index</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">article</span> <span class="n">h1</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">1.2em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これもちょっと腑に落ちない妙な動作をするのですが、まあ、とりあえず吉としておきます。とおもいましたが、やはり気になるので<a href="http://yuyunko.github.io/blog/2013/03/04/octopress-%E3%83%86%E3%83%BC%E3%83%9E%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%B9%E3%82%99/">他の方法</a>も試してみるとこちらの方がいい感じなので、こうしました。</p>

<figure class='code'><figcaption><span>./sass/custom/_styles.scss　を変更</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">0.8em</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>お疲れさまでした。
ほぼ1日消費です。</p>

<p>そうそう、Parallelsでスナップショットをとっておこう。</p>

<h3>2014/12/14 update</h3>

<p>_styles.scssをエディットしましたが、どうもこれが有効になったり無効になったり、おかしな感じになります。ちょっとしらべたところ、geditでは編集しているファイルのバックアップファイルを編集しているファイルと同じホルダに作ります。この時のファイル名が　&#8221;オリジナルのファイル名～&#8221;　となるのですが、どうもそれをoctopressが区別できていない、あるいは編集中のものにはアクセスロックがかかる？ようです。</p>

<p>geditを使うときは、保存したファイルを一旦閉じるか、バックアップファイルを作るのをやめるように設定するか、編集後バックアップファイルを消して　generate　なり　preview　なりしたほうがいいようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntuのランチャとかが消えてしまう件]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/07/ubuntu-problem/"/>
    <updated>2014-12-07T13:19:44+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/07/ubuntu-problem</id>
    <content type="html"><![CDATA[<p>apt-get upgradeとかコマンドラインから実行するとubuntuのランチャなどが消えてしまうという状態に時々なります。ランチャだけならいいのですが、メニューが表示されるところまで消えてしまうし、文字入力もできなくなります（つまり、見えはするけど手が出せない状態）</p>

<!-- more -->


<p>検索してみたところ、<a href="http://m12i.hatenablog.com/entry/2014/05/24/100539">この</a>ページにあるような症状にぴったりだったので、書かれている復活手順を踏んでみました。以下はその引用です。　<strong>　<em>mizukyfさん、ありがとうございます。</em> </strong></p>

<ul>
<li><p>ログイン後 Ctrl＋Alt＋F1キー入力 でコンソール画面に遷移。</p></li>
<li><p>「（マシン名） login:_」という表示されるのでログイン。</p></li>
<li><p>「DISPLAY=:0.0 gnome-terminal」と入力しEnter。gnomeの上のターミナルを起動</p></li>
<li><p>Alt＋F7キーを押下するとデスクトップ画面に復帰するが端末ウィンドウが新たに表示されている。</p></li>
<li><p>このターミナル上で「dconf reset -f /org/compiz/」と入力してEnter。</p></li>
<li><p>「sudo shutdown -r now」と入力してEnter。OSが再起動する。</p></li>
</ul>


<p>多分、<code>dconf reset -f /org/compiz/</code>が重要なので、コンソールでログインしたあとにこれを実行すればいい、という気もします。
今度不具合になったら試してみましょう。</p>

<p>PS:<br/>
<a href="http://ja.wikipedia.org/wiki/Compiz">compiz</a>を調べてみたところ、ウインドーマネージャなのですねえ。<br/>
<a href="http://en.wikipedia.org/wiki/Dconf">dconf</a>はいろいろな設定を一気に引き受けるユーティリティ。あるwebの解説によれば「Windowsのレジストリシステムのようなもの」とのこと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[max_queued_messagesオプションの動作]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/07/max-quieued-messages/"/>
    <updated>2014-12-07T10:14:05+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/07/max-quieued-messages</id>
    <content type="html"><![CDATA[<p>ということで、先の<code>max_queued_messages</code>オプションを試してみました。</p>

<p>結論から言うと、バッファリングしているのは<strong>指定した数の最も古いデータ</strong>でした。</p>

<!-- more -->


<p>確認手順：</p>

<ul>
<li><p>mosquitto.confに<code>max_queued_messages 30</code>と設定<br/>
これで、30個のデータが保持されるはず。</p></li>
<li><p>ブローカが動いている計算機から <code>$ sudo /etc/init.d/mosquitto restart</code>　で設定を反映</p></li>
<li><p>QoS１、clear_sessionをfalseでブローカにサブスクライブ要求します。</p></li>
<li><p>適当に中断</p></li>
<li><p>適当に再開<br/>
今回は寝る前に止めて朝起きて再接続してみました。<br/>
あとでデータを確認できるよう<code>reconnect.txt</code>というファイルに保存。データの第一フィールドは送信時のタイムスタンプになっています。</p></li>
</ul>


<p>で、送られたデータを確認してみると。。。。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat reconnect.txt <span class="p">|</span> awk -F , <span class="s1">&#39;{ command = &quot;date -d @&quot; $1 ; printf NR&quot;   &quot; ; system(command) }&#39;</span>
</span><span class='line'><span class="m">1</span>   Sat Dec  <span class="m">6</span> 21:33:01 JST 2014
</span><span class='line'><span class="m">2</span>   Sat Dec  <span class="m">6</span> 21:34:02 JST 2014
</span><span class='line'><span class="m">3</span>   Sat Dec  <span class="m">6</span> 21:35:01 JST 2014
</span><span class='line'>  <span class="o">(</span>...snip..<span class="o">)</span>
</span><span class='line'><span class="m">27</span>   Sat Dec  <span class="m">6</span> 21:59:01 JST 2014
</span><span class='line'><span class="m">28</span>   Sat Dec  <span class="m">6</span> 22:00:01 JST 2014
</span><span class='line'><span class="m">29</span>   Sat Dec  <span class="m">6</span> 22:01:01 JST 2014
</span><span class='line'><span class="m">30</span>   Sat Dec  <span class="m">6</span> 22:02:02 JST <span class="m">2014</span> &lt;指定した数だけ古いデータがあって
</span><span class='line'><span class="m">31</span>   Sun Dec  <span class="m">7</span> 09:57:01 JST <span class="m">2014</span> &lt;そのあと最新の配信データが届く
</span><span class='line'><span class="m">32</span>   Sun Dec  <span class="m">7</span> 09:58:02 JST 2014
</span></code></pre></td></tr></table></div></figure>


<p>ということで、停止してすぐのデータが指定数だけ保存されている、という結論です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mosquitto.conf 再び]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/06/again/"/>
    <updated>2014-12-06T19:58:41+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/06/again</id>
    <content type="html"><![CDATA[<p>昨日の、通信が途絶えている時にブローカがためておいてくれる件、<code>mosquitto.conf</code>にはこんなオプションがありました。</p>

<ul>
<li><strong>max_queued_messages</strong></li>
</ul>


<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># The maximum number of QoS 1 and 2 messages to hold in a queue </span>
</span><span class='line'><span class="c"># above those that are currently in-flight.  Defaults to 100. Set </span>
</span><span class='line'><span class="c"># to 0 for no maximum (not recommended).</span>
</span><span class='line'><span class="c"># See also queue_qos0_messages.</span>
</span><span class='line'><span class="c">#max_queued_messages 100</span>
</span></code></pre></td></tr></table></div></figure>


<p>データ送信のキューに長さの最大を指定します。これ以上になったらどうなるのかなあ？古いやつから捨てられるのかしら？</p>

<p>さらに max_inflight_messagesというのもあって、こちらは通信中(?)の最大メッセージ数を規定します。</p>

<p>client IDの件に関連するオプションでこんなものもありました。</p>

<ul>
<li><strong> allow_zero_length_clientid </strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This option controls whether a client is allowed to connect with a zero</span>
</span><span class='line'><span class="c"># length client id or not. This option only affects clients using MQTT v3.1.1</span>
</span><span class='line'><span class="c"># and later. If set to false, clients connecting with a zero length client id</span>
</span><span class='line'><span class="c"># are disconnected. If set to true, clients will be allocated a client id by</span>
</span><span class='line'><span class="c"># the broker. This means it is only useful for clients with clean session set</span>
</span><span class='line'><span class="c"># to true.</span>
</span><span class='line'><span class="c">#allow_zero_length_clientid true</span>
</span></code></pre></td></tr></table></div></figure>


<p>client IDなしで接続できるかどうか、を設定するオプションかと思われます。ここに書いてあるようにIDを設定してしまうと、サブスクライブ接続を切った時に、それがテンポラリーなのかパーマネントなのかブローカは知る由がありません。そのため、同じIDで再接続されると切断されていた期間のデータが送られてきます。それは不要、という時もありますよね。。。。</p>

<p>今のところの対処は、一度 QoS0で再接続してから切る、というのをやっています。こうすると次に接続した時は接続後の情報から入手できます。ほんとはもっといい手があるのかとも思いますが。</p>

<p>ココらへんは、データアクイジションの側であれば、あとから不要な部分を切り取るとか、いかようにでも処理できるかと思います。コマンド系の接続では重要なポイントになりそうなので、考慮の必要がありそうですね。タイムスタンプを確認するとか。</p>

<p>などと話していたら、こんなオプションがありました。</p>

<ul>
<li><strong>persistent_client_expiration</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This option allows persistent clients (those with clean session set to false)</span>
</span><span class='line'><span class="c"># to be removed if they do not reconnect within a certain time frame.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This is a non-standard option in MQTT V3.1 but allowed in MQTT v3.1.1.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Badly designed clients may set clean session to false whilst using a randomly</span>
</span><span class='line'><span class="c"># generated client id. This leads to persistent clients that will never</span>
</span><span class='line'><span class="c"># reconnect. This option allows these clients to be removed.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># The expiration period should be an integer followed by one of d w m y for</span>
</span><span class='line'><span class="c"># day, week, month and year respectively. For example</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># persistent_client_expiration 2m</span>
</span><span class='line'><span class="c"># persistent_client_expiration 14d</span>
</span><span class='line'><span class="c"># persistent_client_expiration 1y</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># The default if not set is to never expire persistent clients.</span>
</span><span class='line'><span class="c">#persistent_client_expiration</span>
</span></code></pre></td></tr></table></div></figure>


<p>persistentは「しつこい」という意味らしいですが、長い接続は強制的に解除するということのようです。
「ランダムのidを使っていながらclean session（切断時の送信データを破棄してもらうモード）をfalseで接続してくるたちの悪いクライアント」とありますね。そういう接続はしないように設計します。はい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[disable-clean-sessionオプション]]></title>
    <link href="http://mm011106.github.io/blog/2014/12/05/mosquitto-sub-c-option/"/>
    <updated>2014-12-05T21:14:40+09:00</updated>
    <id>http://mm011106.github.io/blog/2014/12/05/mosquitto-sub-c-option</id>
    <content type="html"><![CDATA[<p>一昨日から気になっていた<a href="http://mosquitto.org/man/mosquitto_sub-1.html"><code>mosquitto_sub --disable-clean-session</code></a>オプションですが、試してみました。</p>

<p>ブローカに向かって<code>--desiable-clean-session</code>と<code>--id</code>の2つのオプションをつけてサブスクライブを要求します。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mosquitto_sub -h HOSTNAME -t YOUR/TOPIC/NAME --qos <span class="m">1</span> --disable-clean-session --id CONNECTION-ID
</span><span class='line'>
</span><span class='line'>1417781342, 1691, 0, 0, 0
</span><span class='line'>1417781402, 1691, 0, 0, 0
</span><span class='line'>1417781461, 1691, 0, 0, 0
</span><span class='line'>1417781522, 1691, 0, 0, 0　　&lt;&lt;時刻 21:12:02　で中断
</span><span class='line'>^C
</span></code></pre></td></tr></table></div></figure>


<p><code>--id</code>オプションはサブスクライバが同一であることを主張するためのもののようですので、これが一致することで「再接続だから配信していないデータを送らなきゃ」と認識してくれます。<code>--id</code>を指定しないとデフォルトのプロセス番号を元にしたものになるので、プロセスを止めて再度起動した場合「再接続」と認識してもらえません。
また、&ndash;qosが1もしくは2でないとダメみたいです。QoS　0は配信保証がなされないクオリティ指定ですので、当然といえば当然。</p>

<p>データが来たところで、適当に中断します。このトピックではパブリッシャが1分毎に1データを送ってきます。データの最初のフィールドがエポックタイムです。よく見ると60づつ増えていっているのがわかります。</p>

<p>そしてCtrl-Cでプロセスを止めます。</p>

<p>では、ここでしばらく待って。。。。。</p>

<p>わかりやすいように、タイムスタンプを印刷してからサブスクライブを再開します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>date <span class="p">;</span> mosquitto_sub -h __host-name__ -t YOUR/TOPIC/NAME --qos <span class="m">1</span> --disable-clean-session --id  testclient
</span><span class='line'>
</span><span class='line'>Fri Dec  <span class="m">5</span> 21:24:54 JST 2014
</span><span class='line'>1417781581, 1692, 0, 0, 0　　&lt;&lt;　再開したのは21:24:54だけど、21:13:01のデータから配信されている。
</span><span class='line'>1417781642, 1691, 0, 0, 0
</span><span class='line'>1417781701, 1691, 0, 0, 0
</span><span class='line'>1417781761, 1692, 0, 0, 0
</span><span class='line'>1417781822, 1691, 0, 0, 0
</span><span class='line'>1417781881, 1691, 0, 0, 0
</span><span class='line'>1417781942, 1692, 0, 0, 0
</span><span class='line'>1417782002, 1692, 0, 0, 0
</span><span class='line'>1417782061, 1692, 0, 0, 0
</span><span class='line'>1417782121, 1692, 0, 0, 0
</span><span class='line'>1417782182, 1692, 0, 0, 0
</span><span class='line'>1417782241, 1692, 0, 0, 0
</span><span class='line'>1417782302, 1692, 0, 0, 0
</span><span class='line'>1417782361, 1692, 0, 0, 0
</span><span class='line'>   ：
</span><span class='line'>   :
</span></code></pre></td></tr></table></div></figure>


<p>おお、きちんと中断している間のデータも配信されました。</p>

<p><code>--id</code>オプションには次のように書かれています。</p>

<p><strong> -i, - -id </strong></p>

<blockquote><p>The id to use for this client. If not given, defaults to mosquitto_sub_ appended with
the process id of the client. Cannot be used at the same time as the <strong> <em>&ndash;id-prefix</em> </strong> argument.</p></blockquote>

<p>通常、IDは<code>mosquitto_sub_${PID}</code>になるようです。でもpidは起動するたびに変わってしまうので、同じクライアントとは認識されませんね。物理経路のトラブル等で通信が途絶えた場合は大丈夫でしょうけれど。</p>

<p><code>--id-prefix</code>はプリフィックスを固定してしまうオプションなので、<code>--id</code>とは共存できないということですね。</p>

<p>関連するところで<br/>
ブローカの方の設定で<code>clientid_prefixe</code>というのがあるのですが、これを設定（mosquitto.conf内）すると、指定したプリフィックスのついたクライアントしか接続出来ないようにできるようです。</p>

<p><strong>clientid_prefixes</strong> <em>prefix</em></p>

<blockquote><p>If defined, only clients that have a clientid with a prefix that matches clientid_prefixes will be
allowed to connect to the broker. For example, setting <em>&ldquo;secure-&rdquo;</em> here would mean a client
&ldquo;<em>secure-</em>client&rdquo; could connect but another with clientid &ldquo;mqtt&rdquo; couldn&rsquo;t. By default,
all client ids are valid.</p></blockquote>

<p>となるようです。セキュリティの一助になるかしら？</p>
]]></content>
  </entry>
  
</feed>
