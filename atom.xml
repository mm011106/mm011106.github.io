<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MQTT and ...]]></title>
  <link href="http://mm011106.github.io/atom.xml" rel="self"/>
  <link href="http://mm011106.github.io/"/>
  <updated>2015-12-06T12:15:12+09:00</updated>
  <id>http://mm011106.github.io/</id>
  <author>
    <name><![CDATA[Masakazu Miyamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TrelloにPythonでアクセスしてみる]]></title>
    <link href="http://mm011106.github.io/blog/2015/12/06/python-and-trello-api/"/>
    <updated>2015-12-06T10:08:06+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/12/06/python-and-trello-api</id>
    <content type="html"><![CDATA[<p>IoTとは全然関係ないですけど、TrelloというSaaSを業務で使い始めて、他のツールとのインターフェイスが必要になり始めました。Trelloはカード型のToDo管理のシステムですが、うちではワークフローのステート管理につかっています。ですので、Trelloで管理しているワークフロー終了後に次の別のワークフローに移すことやチェックのためにデータをダウンロードする必要が出てきました。</p>

<p>TrelloはJSON形式でデータを一括ダウンロードできるのと、直接APIを通じてデータにアクセスすることもできます。
今回はPythonでAPIを叩くことに挑戦してみました。</p>

<!-- more -->


<h2>準備</h2>

<p>先人のおかげさまで、TrelloへのアクセスにもPythonのパッケージが用意されています。結果として、ほとんどコードを書かずにアクセするこことができました。<br/>
MacOS10.9にCanopyをインストールした環境での作業記録になります。</p>

<p>パッケージ<code>trello 0.9.1</code>のダウンロードはPythonSoftwareFoudationの<a href="https://pypi.python.org/pypi/trello">ページ</a>から。</p>

<p>さらに必要であればURLリクエスト処理をしてくれる<code>requests</code>をインストールしてください。（私の場合は、新品に近い環境でしたので、インストールが必要でした）</p>

<p>インストールには、ダウンロードしたフォルダに移動して<code>$ python setup.py install</code>です。</p>

<p>さて、実際のコードはどうなるのかと思い、参考のために
<a href="https://pythonhosted.org/trello/index.html">Trello Python API</a>
に行って例をみてみると、たった数行でアクセスできることが解りました。</p>

<p>この例ではパブリックにオープンなボードでの例ですが、今回は公開されていない（パーソナルな）Trelloボードにアクセスすることを試します。<br/>
Personalなボードにアクセスするため、下記の手順でユーザに対応したAPI-keyとログインを省略するためのアクセストークン(以後token)を入手する必要があります。<br/>
私の場合は両者とも手作業で行いましたが、tokenについてはスクリプト(pythonから）で入手できるかもしれません。</p>

<h3>API keyを入手する</h3>

<ul>
<li>Trelloにログインします。</li>
<li>ログインした状態で　<a href="https://trello.com/app-key">https://trello.com/app-key</a>にアクセスすると、’key&#8217;と&#8217;Secret&#8217;という２つの番号をもらえます。</li>
<li>&lsquo;key&rsquo; はスクリプトの中で使用します。&#8217;Secret&#8217;は大事にしまっておきなさい、ということなので、しまっておきます。</li>
</ul>


<h3>tokenを入手する</h3>

<p>pythonを起動して</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from trello import TrelloApi 
</span><span class='line'>trello = TrelloApi('key')  # 先ほどゲットしたAPI-keyを入れます
</span><span class='line'>trello.get_token_url('My App', expires='30days', write_access=True)</span></code></pre></td></tr></table></div></figure>


<p>とすると、urlが表示されますのでそれをブラウザで表示させます。</p>

<p>「このMy Appというアプリケーションにアクセスを許可しますがいいですか？」的な確認が出てきて、okするとtokenが表示されると思います。それを記録しておきます。</p>

<h2>実行</h2>

<p>ここまでくればあとはコードを書くだけです。
今までのところで、アクセスに必要な情報とパッケージはok準備万端なので、例などを参考に下記のコードをステップバイステップで実行してみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from trello import TrelloApi
</span><span class='line'>trello = TrelloApi('key')
</span><span class='line'>trello.set_token('Token')
</span><span class='line'>
</span><span class='line'>token='****'  #記録したtokenとkeyを指定します。
</span><span class='line'>key='***'
</span><span class='line'>
</span><span class='line'>#これでアクセス可能な状態になります。
</span><span class='line'># 例として、ボード上のリスト名とそのidを表示させます。
</span><span class='line'># （APIでは常にidでアクセスする先を指定するので重要）
</span><span class='line'>
</span><span class='line'>idBoard='****'  #ボードidを入れます。
</span><span class='line'>
</span><span class='line'>lists=trello.boards.get_list(idBoard)
</span><span class='line'>for list in lists:
</span><span class='line'>    print list['name'] + "    " + list['id']
</span></code></pre></td></tr></table></div></figure>


<p>たった数行でアクセス可能になり、実際のアクセスも１行でできるというコードに。<strong>すばらしい！</strong></p>

<p>実は、実際のアクセスにはボードやリスト、カードなどのidが必要です。上記の例ではボードidは既知としてコードを書いています。</p>

<p>実際はAPIから引っ張れるかもしれませんが、そこまでたどり着けていません。idは直接Trelloのページからボードに移動し、[menu]-[more]-[print &amp; export]-[export to JSON]でデータを表示させ、そこから読み取っています。</p>

<p>JSONをブラウザでみるためにChromeに<a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc">JSONView</a>を入れています。</p>

<p>すばらしく便利です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ET/IoT 2015　コンファレンスレポート3日目]]></title>
    <link href="http://mm011106.github.io/blog/2015/11/22/iot-et-2015-day3/"/>
    <updated>2015-11-22T15:19:46+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/11/22/iot-et-2015-day3</id>
    <content type="html"><![CDATA[<p>三日目のレポートです。</p>

<!-- more -->


<hr />

<h1>11/20 10:00〜10:45</h1>

<h2><em>状態遷移設計の基本とツールによる効率化</em>　　河野さん　　スパークシステムズ</h2>

<p>状態遷移設計の話。以前書籍を買って勉強したけれど、それを裏打ちする情報を得たくて参加。<br/>
この会社はツールを売っている会社。</p>

<ol>
<li>状態遷移設計とは</li>
<li>設計のためのヒント</li>
<li>ツールの活用</li>
</ol>


<hr />

<ul>
<li><p>状態遷移設計とは<br/>
  ここでは表記方法としてUML/SYSMLを使用</p>

<ul>
<li>「状態」に着目した「振る舞い」の設計</li>
<li>「振る舞い」の対語として「構造」</li>
<li>システム全体を見通すための状態遷移設計とソースコードを起こすためのものがある</li>
</ul>


<p>  前者の「システム全体を見通すためのもの」にフォーカスする</p></li>
<li><p>状態とは何か<br/>
  区分可能な状況に名前をつけて定義したもの<br/>
  状態が違えば同じ入力でもレスポンスが異なる可能性がある。</p></li>
<li><p>遷移とは<br/>
  状態が変化すること</p>

<ul>
<li>イベントによるもの</li>
<li>条件によるもの</li>
</ul>


<p>  遷移の前後で処理がある可能性を考慮</p></li>
<li><p>表記方法<br/>
  <a href="http://www.sparxsystems.jp/products/EA/tech/StateMachine.htm">表記例など</a><br/>
  イベントドリブンな処理が多い場合、それを記述しやすい<br/>
  イベント、状態を中心に全体を見渡すと見え易い、考えやすい。<br/>
  並列処理を記述しやすい（複数のステートマシンを定義する）</p></li>
<li><p>設計の流れ</p>

<ul>
<li>状態の抽出<br/>
モジュール全体、外部、内部</li>
<li>状態間の遷移の抽出</li>
<li>操作の流れに沿った遷移の検討</li>
<li>イベント抽出から状態（どうあるべきか）を考える</li>
</ul>
</li>
<li><p>状態抽出のヒント<br/>
  イベント処理の場合、処理中がステートの場合が多い<br/>
  具体的な状況からステートを抽出する</p>

<ol>
<li> すべての出力パターンを考える</li>
<li> すべてのパターン同士をつなぐイベントを記入</li>
<li> 共通のものを見出す</li>
<li> 状態の共通性、親子関係を見出す</li>
</ol>


<p>  矛盾なく、無駄なく</p></li>
<li><p>注意点
  手順にならないように<br/>
  考えるのは「状態」であって「手順」ではない。<br/>
  =>　<strong>製品から見た時の動き</strong>　を考える<br/>
  これは、ユーザから見た時の動き（ユースケース）とは異なる。</p></li>
<li><p>より良い状態遷移設計のためのヒント</p>

<ol>
<li> 状態をまとめる<br/>
階層的な構造を持ったステートを作ると見やすくなる可能性</li>
<li> 色や線の太さで区別してみる（異常と正常、通常と緊急など）　見通しが良くなる</li>
<li> 利用する要素を最小限にして直感的にわかりやすく（図を書くのは見通しを良くするため）</li>
</ol>
</li>
</ul>


<h3>感想：</h3>

<p>わかりやすい話だったし、具体的な図の書き方が理解できたような気がする。<br/>
ツール自身は比較的安価だったので、お絵かきツール的なレベルでとりあえず使ってみるのもいいかもしれない。</p>

<p>まずはやって見るところから始まるし。</p>

<hr />

<h1>2015/11/20 13:00〜13:45</h1>

<h2><em>IoT通信技術が生む、新たな価値・サービスとは？</em>　　和泉さん　株式会社日新システム</h2>

<p>日進システムさんでやられているIoTデバイス（ハブ）を中心とした解説。</p>

<p>ざっくりまとめると</p>

<ul>
<li>IoTは現在幻滅期に入っている（ガードナー　<a href="https://www.gartner.co.jp/press/html/pr20150827-01.html">ハイプサイクル　2015年版</a>）。</li>
<li>デバイス側は未だ標準化されておらず、ビジネスが立ち上がるまで数年かかるだろう。</li>
<li>Industry 4.0 などはIoTを生産基盤としてとらえているが、まだ夢の話。現状できることからはじめるべき</li>
<li>実例として920MHZ帯(Wi-SUN)の活用例</li>
<li><a href="https://unit.aist.go.jp/cfsr/2009/PDRevakit/">PDR</a>、音波ビーコンによる室内の位置検出</li>
<li>Wi-SUNのネットワークを3Gと相補的に使うことで、長期バッテリ動作のシステムが構築できる</li>
</ul>


<p>と言った感じ。</p>

<h3>感想：</h3>

<p>ということで、Wi-SUNが使えそうかなあと思い調べて見ることにする。</p>

<hr />

<h1>2015/11/20 14:00〜14:45</h1>

<h2><em>産業向けIoTの実現に必須のセンサ計測とエッジコンピューティング </em>　　岡田さん　日本ナショナルインスツルメンツ</h2>

<p>NIでのIoTの取り組みについて。<br/>
実世界はアナログで動いており、それをそのままサンプリングした場合データが膨大になる。なので、エッジデバイスできちんと処理をしてあげましょう。という話。</p>

<p>キーワード：</p>

<ul>
<li>構造化データ（処理データ）　＜ー＞　非構造化データ（生データ）</li>
<li>「ビッグ『アナログ』データ」TM</li>
<li>マルチモーダルなセンシングシステムでは、相互のデータの同期が重要ー＞NIでのソリューションで解決可能</li>
</ul>


<p>全体的に既知の内容でしたので、ばっさり省略。</p>

<h3>感想：</h3>

<p>NIは比較的大きな規模のIoTデバイスを想定している。特に動画・画像系の処理に注力している感じ。AlteraなどがSoCで実現していることを、計測ボード（ユニット）で実現し、TATを短くすることで付加価値をつけるというスタンス。<br/>
（しかしながら、LabViewが有効なツールだとは思えない）<br/>
大型のデバイスを持ち込むことで高度な処理を比較的短時間で具現化できること、変更が容易であるため観測対象が変化した場合も同じ構成のハードウエアで継続的に処理できる可能性をアピール。</p>

<hr />

<h1>2015/11/20 15:00〜16:30</h1>

<h2><em>どう使う？IoT時代のオープンソース</em>　パネルディスカッション</h2>

<p>モデレーター：進藤 智則 NikkeiBP</p>

<p>パネリスト：</p>

<ul>
<li>姉崎 章博　NEC</li>
<li>太田 寛　　日本マイクロソフト</li>
<li><p>鈴村 延保　アイシン・コムクルーズ</p>

<p>  パネリストについて詳しくは<a href="http://www.jasa.or.jp/expo/conf/confpage-p02.html">こちら</a></p></li>
</ul>


<p>太田氏：</p>

<ul>
<li>プロトコルなどが高度化し速い速度で入れ替わっている時代に自前でコーディングするのは不可能に近い。そのためOSSの利用は必須といってもいい。</li>
</ul>


<p>（他に注目すべき発言なし）</p>

<p>鈴村氏：</p>

<ul>
<li>自動車の業界ではOSSを利用することはかなりハードルが高い（ライセンス）</li>
<li>ただ、OSSのプラットフォームや考え方は社内の開発ワークフローに導入すべき
  レビューの管理、工程の可視化、ドキュメンテーションなどなど。。</li>
<li>特にGitHubの環境は開発に最適と思われるのでどんどん活用するべき</li>
</ul>


<p>姉崎氏</p>

<ul>
<li>OSSのライセンスについて間違った考え方をしている人が多い

<ul>
<li>ライセンスは「契約」ではなく「許諾の条件」である。</li>
</ul>
</li>
<li><p>著作権により著作物の複製・2次利用は<del>制限</del>著作者の専有の権利とされているが、
BSD・GPLなどのライセンス条項は「こういう状態で配布すれば
<del>著作権で主張される権利を一部緩和</del>著作者が専有する権利の行使を許諾しますよ」ということ。</p></li>
<li>よって、ライセンス違反は著作権の侵害となる。</li>
</ul>


<p><em>IPAのOSSライセンスについてのレポートはこの点で嘘が書かれている</em></p>

<p><strong>2015/11/25:講演者の姉崎さまに当ページの記載についてご指摘いただきましたので修正しました。ありがとうございます。姉崎さま。</strong></p>

<h3>感想</h3>

<p>マイクロソフトの話は大したことは無く、いつも大口を叩く割にアタリマエのことしか言ってない。</p>

<p>一方、鈴村氏はミッションクリティカルな分野でOSSの活用を考えており、OSSそのものよりそれによって導きだされた開発環境や手法が有効であるとの発言で、それには重みを感じた。</p>

<p>姉崎氏のライセンスの話は、OSSライセンスの概観とともに考え方についても語られており、大変参考になった。<br/>
<a href="http://www.atmarkit.co.jp/flinux/index/indexfiles/osslcindex.html">@ITの記事</a>をリンクしておきます。</p>

<h3>感想</h3>

<p>OSSのライセンスは正直良くわからないことが多かったが、今回のtalkを聞いて概要がつかめたような感じがする。今後活用することもあると思うので、勉強したい。<br/>
また、GitHubの活用についても、「使い方」ではなく「ワークフローのあり方」とGitHub上でそのあるべき姿をどのように実現するのか・できるのか、という点から勉強しなおしてみたいと思った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ET/IoT 2015　コンファレンスレポート 2日目]]></title>
    <link href="http://mm011106.github.io/blog/2015/11/21/iot-et-2015-day2/"/>
    <updated>2015-11-21T11:12:50+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/11/21/iot-et-2015-day2</id>
    <content type="html"><![CDATA[<p>二日目のレポートです。雨模様でした。</p>

<!-- more -->


<hr />

<h1>11/19 10:00〜11:30</h1>

<h2>TSI4  <em>つながるIoTシステムのセキュリティ確保に向けて</em>　　重要生活機器連携セキュリティ協議会 伊藤 公祐さん</h2>

<p>セキュリティのお話で、なかなかまとまった話をweb上で見つけられないのでいい機会でした。</p>

<p><strong>内容：</strong></p>

<ol>
<li>クラッカーの視点から　（事例紹介）</li>
<li>IoT標準か動向</li>
<li>セキュリティ対策のポイント　->　開発プロセスの検討</li>
</ol>


<hr />

<ol>
<li><p>事例紹介</p>

<ul>
<li><p>Jeepのcase</p>

<ul>
<li>wifiがインターネットにつながっていて、外から入れる。</li>
<li>VPNの脆弱性（電話会社のサービス）</li>
</ul>


<p>  クラッカーとしては、内部のファームウエアを書き換える際に、「動くファーム」を作ることが大変だった。経路確保や書き換えそのものはおおきな作業ではない。</p></li>
<li><p>プラントのセンサネットからメインのネットへの侵入
通常（インターネットからイントラへ）と逆向きの侵入。<br/>
センサネットの脆弱性を狙った。</p></li>
<li><p>ライフルの照準機へのクラッキング
対象物の危険性とリスクを考慮した「重要度」の位置づけ</p></li>
<li><p><strong>教訓：</strong><br/>
設計でセキュリティを作り込む。製品を取り巻く環境まで含めて「製品の一部」として考えてセキュリティの確保をいかにするか。<br/>
デバグのためのハードウエアのポート（GPIO）でさえも、バックドアになる可能性。</p></li>
</ul>


<p> ハードウエアはリバースエンジニアリングされる前提で設計する。</p>

<p> クラッキングの最短ルートは「ファームウエアの書き換え」</p>

<ul>
<li>クラッカーの視点

<ul>
<li>ターゲット：　高価値なものの自由を奪いたい</li>
<li>そのシステムがどう動いているのか理解するため分解、解析をする</li>
<li>コントロールを奪う糸口を探す</li>
<li>できるだけ汎用のインターフェイスを使ってローコストに作業する</li>
</ul>
</li>
</ul>


<p> インターネットにつながっている機器の口を見つけるサイト：
 <a href="https://www.shodan.io/">SHODAN</a></p></li>
<li><p>標準化</p>

<ul>
<li><a href="http://www.onem2m.org/">oneM2M</a> 接続レベルの標準化</li>
<li>ITU-T JCA-IoT  IoTの標準化を見守るような立場</li>
<li>SAE 自動車の中で使われる標準化のなかでIoTの検討</li>
<li>ETSI 自動車向け標準化組織</li>
<li><a href="https://www.car-2-car.org/index.php?id=22">C2C</a> 自動車同士の接続　TAL(Trust Assurance Level)というのを定義していて、「お互いどれだけ信頼できるのか」ということを知らせ合い、情報の優先度選択ができるようになっている</li>
</ul>


<p> TALのような考え方は車だけでなくIoT全般に必要となる。</p>

<p> セキュリティとセーフティの両立：同じアナロジーで考えてみる</p>

<ul>
<li>IEC61508-1　プラント・工場の安全性</li>
<li>EN50126-5(draft)  鉄道の安全性</li>
</ul>


<p> 日本の状況</p>

<ul>
<li>NISC 2015　セキュリティ方針</li>
<li>IPA ガイドライン</li>
</ul>


<p> セーフティオリエンテッドデザインとともにセキュリティオリエンテッドな考え方も入れるべき。ISO27001, IEC61508<br/>
 ただ、IoTにはヘビーな面も。。。。</p>

<p> セキュリティコストと製品の価格のバランスが必要（でも、最低限は）</p></li>
<li><p>IoTセキュリティ対策</p>

<p> 脆弱性はどこにあるか<br/>
 <a href="http://jvndb.jvn.jp/">JVN iPedia</a>に一般的なクラッキングターゲットとなる<a href="https://www.ipa.go.jp/security/vuln/CWE.html">脆弱性</a>が書かれている。ここから検討していく</p>

<ul>
<li><p>設計プロセスでの対応</p>

<ul>
<li>セキュリティ要件（どの程度）</li>
<li>セキュリティのアーキテクチャ（どうやって）</li>
<li>コーディングの工夫（リバースされにくいコーディング）</li>
<li>テスト（テスト、ファジング）</li>
</ul>
</li>
<li><p>従来行程から加えるべきもの</p>

<ul>
<li>セキュリティ要件、定義</li>
<li>セキュリティ設計</li>
<li>verification</li>
<li>validation</li>
</ul>
</li>
</ul>


<p> 具体的な検討方法　->　<a href="https://www.ipa.go.jp/security/vuln/CVSS.html">CVSS</a></p>

<ul>
<li>含まれる欠陥、脆弱性の定義</li>
<li>あり得る可能性をリストアップ（脅威分析）<br/>
フォルトツリー解析と同様な手法　脆弱性と可能性の積で定量的な「脅威」をはかる</li>
</ul>


<p> IoTに特有なものがあり脆弱なポイントは多い</p>

<ul>
<li>物理的なものへの影響度がある</li>
<li>自動的に動作するものについての深刻度・重要度評価</li>
<li>「きちんと動作する」というのはどういうことか。正常と異常の定義</li>
<li>複雑さに対する考慮（多数の機器がつながっている場合）</li>
</ul>


<p> 最適な対策を最適な部分にデプロイすることが大切。むやみにやっても危険は減らない。<br/>
 何が脅威でどうやってリジェクトするのか。</p>

<ul>
<li>構成要素がすべて自分の製品の一部と考えること。他人任せにしない</li>
<li>ファームウエアアップデート手法の最適化</li>
<li>リバースしにくいハードウエア</li>
<li>広い視野で危機を検討</li>
<li>他人からみてもらう</li>
</ul>
</li>
</ol>


<h3>感想：</h3>

<p>セキュリティというとネットワークの話で、「SSLがどうした」とか言うことかと思ったらもっと全体的な話をしてくれたので、面白かった。<br/>
特にジープのインシデントはいかに最近のクラッキングが高度になっているかということがよくわかった（リバースエンジニアリングでファームウエアを作るってすごい）。<br/>
またセキュリティを安全性と同様なスキームで考えるとわかりやすい、という点は「なるほど」という感じ。具体的な脅威についての考察はひつようだけれど全体を見渡す大切さを教えてもらった。</p>

<hr />

<h1>2015/11/19 12:00〜13:00</h1>

<h2><em>Big Dataのボトルネック</em>　　矢野さん　日立製作所技師長</h2>

<p>話はAIの宣伝で、タイトルとは全く関係ない感じでしたが、これもまとまった話を聞く機会がないので面白く聞かせていただきました。</p>

<p>パラダイムのシフト</p>

<ul>
<li>旧：ソフトに従ってコンピュータが処理する</li>
<li>今：ビッグデータをもとにAIが処理する</li>
</ul>


<p>AIとは（定義）</p>

<ul>
<li>目的、入出力は人間が決める（どんなデータを入れて何をして何を最適化するのか、の指示）</li>
<li>問題に対するロジックを与えない</li>
<li>既存システムに追加することができる（システムを変更しない）</li>
</ul>


<p>ブランコを漕ぐロボットの例->５分ぐらいで最適な漕ぎ方を学習<br/>
=>企業戦略に応用できないか</p>

<p>人間の行動も含めてシステムとして入力して、AIが最適化する（工場の例）</p>

<p>アナロジーとしては「ソフトを作るソフト」　</p>

<h3>感想：</h3>

<p>AIの宣伝だったけど、日立がやっているあたりちょっと怖い感じもする。<br/>
本当に企業戦略立案に入れたらその企業は間違いなく「ブラック」になるとおもう。試行錯誤の中では到底人間には受け入れられない仕事が出てくるはず。ま、そこら辺も含めて評価関数に入れてしまえばいいのだけれどね。<br/>
あと、気になったのが、人間の作ったシステム、特に金融系やソーシャルなものに対して応用すると、何かのきっかけで系が相変化してしまって応答特性が全くかわってしまった場合、収束が難しくなるような気がする。試行錯誤のTATが十分短ければいいけれど、人間系のシステムはたいてい時定数が長いので答えを収束させている間に系が変化するというのはあり得る話。
結局「十分長い時間でみれば”知能”だけど、人間的時定数からすると”試行錯誤”マシン」というところか。人間の「知恵」というのは、「即決」できるところだと思うけどね。</p>

<hr />

<h1>2015/11/19 14:00〜14:45</h1>

<h2><em>IoTを現実のものにするプログラマブル デバイス技術動向</em> 　吉澤さん　cypress semiconductor</h2>

<p>デバイス動向の話。</p>

<p>デバイスの数量的成長は落ちているが、新しいものはどんどん出てきている。特にリーンスタートのためのプログラムブルデバイスとARMベースのプロセッサ。</p>

<p>cypressでのサポート
- spansionとの合併によりFlashメモリ、元富士通のMPU,アナログ系のIPの取り込み
- デジタルではプログラマブルでバイスとプロセッサの融合が進んでいるが、cypressではマイクロプロセッサとコンフィギュアラブルなアナログ回路を融合している</p>

<p>PSocシリーズの紹介</p>

<ul>
<li><p>新しく出るもの</p>

<ul>
<li>1pAレベルのノイズの電流アンプ（トランスコンダクタンスアンプ）が入ったデバイス。</li>
<li>PSoC 7:工業用ARM-M7内蔵</li>
<li>PSoC 6:コンシューマー用ARM-M4,M0+ 内蔵</li>
<li>汎用インターフェイス内蔵：USB,USART,Ethernet,CANなど</li>
<li>アナログインターフェイス回路</li>
</ul>
</li>
<li><p>新しく出たもの</p>

<ul>
<li>PsoC4 BLE: Lowpower版　メモリを256kBに拡張</li>
</ul>
</li>
</ul>


<h3>感想：</h3>

<p>どうもCypressのデバイスは型番が整理されていない印象があって、わかりづらい。<br/>
今回もこのプレゼンの後にwebでしらべてみたけれど、型番とシリーズの関連が読みづらい（なれればわかるのかもしれないけど）。
ちょっと面白そうだけど、そこら辺にいまいち感があるものは、ツールや設定方法もいまいち感がある場合が多いので二の足を踏んでいる感じ。<br/>
（昔評価キットを買いましたが、使ってません）</p>

<hr />

<h1>2015/11/19 15:00〜15:45</h1>

<h2><em>ARM 搭載 SoC FPGA、最新情報と実装例</em>　　小山 さん、吉田さん　Altera</h2>

<p>アルテラのFPGAの技術動向</p>

<p>微細プロセスへの対応</p>

<ul>
<li>現状最先端は10nmプロセス（インテルのファブで製作）</li>
<li>製品としては14nm（FPGA）</li>
<li>一般的なASSP(ASIC)では65nmなのでだいぶアドバンテージがある</li>
</ul>


<p>次世代FPGA(Altera Common Architecture)</p>

<ul>
<li><strong>Cedar</strong> : Cyclone の次世代版　14nmで64bitコアを２コア</li>
<li><strong>Oak</strong> : Arriaの次世代版 14nmでA53を４コア</li>
<li><strong>Sequoia</strong> : Stratixの次世代版 10nm CPU未定</li>
</ul>


<p>事例：</p>

<ul>
<li>自動運転 Cyclone V</li>
<li>PLC（工業用シーケンサ）</li>
<li>3Dスキャナ</li>
</ul>


<p>ツール：</p>

<ul>
<li>Quartus Prime　（IIの次世代版）= SpectraQエンジンを搭載</li>
<li>OpenCL プロセッサ＋周辺回路の設計時のソリューション

<ul>
<li>ロジックのみときはHLS</li>
</ul>
</li>
</ul>


<p>OpenCL</p>

<ul>
<li>(ここら辺間違いを書くといけないので、<a href="https://www.altera.co.jp/products/design-software/embedded-software-developers/opencl/overview.html">こちら参照</a>）</li>
</ul>


<p>私の受け取ったところを書くと、</p>

<ul>
<li>OpenCLで並列処理システムとして、ARMプロセッサとロジック回路の構造を記述しPC上でシミュレーション、デバッグをしてからFPGAにでプロイする。</li>
<li>HDLでコードをかかなくとも（真偽のほどは？）OpenCLの記述で回路も構成できる。</li>
<li>回路だけ書きたいなら&#8221;HLS&#8221;　（VHDLとかの新しいバージョン？調べてみたらsystemCとかに近い立ち位置なのかしら？）</li>
</ul>


<p>説明の中でも、「FPGAだけがターゲットであればC/C++で記述してデバグしたものをHLSに落としてさらにHDLに」というようなことを言っていたような気がする。</p>

<p>画像処理の例：</p>

<p>「視的感覚から状況を判断して動作するオブジェクト」を作ることをターゲットとした。<br/>
従来、機能フローに対して最適なデバイス（FPGAやCPU）を使っていたが、SoCではすべてが1chipに入っている。  <br/>
前処理に近いところをFPGA, 後処理をプロセッサ</p>

<p>アプリケーション：</p>

<ul>
<li>自動運転支援システム</li>
<li>街灯のインテリジェント化（カメラ、センサ）</li>
<li>deep learning</li>
</ul>


<p>OpenCLでの<a href="https://www.altera.co.jp/support/support-resources/design-examples/design-software/opencl/opencl.html">デザイン例</a>をダウンロード可能。</p>

<h3>感想：</h3>

<p>Intelと一緒になってどうなるかと思っていましたが、最先端プロセスを手に入れて一歩先をいく感じでしょうか。10nmはすんごい速いんだろうなあ。<br/>
Intelとしても、ファシリティの減価償却をシェアできるというのはちょっと楽になるですね。<br/>
気になるのは最先端プロセスの値段です。１個10万円とかになっちゃう感じですかね。</p>

<hr />

<h1>2015/11/19 16:00〜16:45</h1>

<h2><em>簡単に始められるアルテラ MAX 10 FPGA開発</em>　　福原  さん　Altera</h2>

<p>Max10は１０世代目製品のうちの一つ</p>

<ul>
<li>MAX10　55nm　Flashメモリのプロセスを利用（不揮発）</li>
<li>Arria10　20nm　TSMCのプロセス</li>
<li>Stratix10 14nm　Intelのプロセス</li>
</ul>


<p>MAX10の特徴として</p>

<ul>
<li>コンフィグメモリ２つ（切り替えて使える）　10ms程度でコンフィグできる</li>
<li>DSPブロック、RAM、DDRコントローラ、オンチップオシレータ、電源内蔵</li>
<li>NIOSII実装可能</li>
</ul>


<p>Enpirionという電源チップも用意　電源シーケンスを自動で管理</p>

<p>NIOSIIは遅い動作でよければ600〜700LE、速いものでも1000LE〜1500LE程度で実装できる</p>

<p>開発ソフト</p>

<ul>
<li>Quartus Primeを使う。</li>
<li>Qsys : IPの接続をウイザード形式でやってくれる（実際に配線する必要なし）</li>
<li>最初にプロジェクトを作るときは、テンプレートから作成することをおすすめ　->　Desgin Store</li>
<li>NiOSIIのコンパイラはEclips環境</li>
</ul>


<p>キット</p>

<ul>
<li>10M08版(8000LE)　で　$50ぐらい</li>
</ul>


<p>トラ技３月ごろキット本を出版予定</p>

<h3>感想：</h3>

<p>MAX10も使ってみたいと思います。でも利用するアプリケーションがない。<br/>
現在の開発環境をアップデートする必要あり。また設定し直すのが面倒くさい。。。。<br/>
キット購入しましょう。（以前マクニカのIoT用のキットを買ったけれど、使い方がいまいちわからず放置中）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ET/IoT 2015　コンファレンスレポート]]></title>
    <link href="http://mm011106.github.io/blog/2015/11/18/iot-et-2015/"/>
    <updated>2015-11-18T20:42:17+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/11/18/iot-et-2015</id>
    <content type="html"><![CDATA[<p>今年もEmbedded Technologyに行って来ましたので、レポートを残しておきます。 展示会はあまり面白くないので、コンファレンスのレポートです。</p>

<p>今年から展示会のタイトルに IoTの冠が付いて、IoTを明示的に意識した展示会になっています。コンファレンスの方はそういう雰囲気ですが、展示会の方はそんなに区別がきっかり付いている感じではありませんでした。</p>

<!-- more -->


<hr />

<h1>2015/11/18 10:00〜13:00</h1>

<h2><em>C-1 : Ruby による組み込みソフト開発</em>　　田中 和明氏　九州工業大学　</h2>

<p>Rubyと「組み込み」という言葉がちょっと距離がある感じがして面白そうだったので聞いて見ました。</p>

<ul>
<li><p>内容</p>

<p>  もともとのRubyの実行環境はかなりリッチである必要があるが、それをどこまでシェイプできるか、組み込みに使えるかどうかというポイントで小型化した処理系。</p>

<p>  Ruby処理系とは別物としてのmrubyを作った。（経産省のプロジェクト）</p>

<p>  現状の組み込み開発は、ソフトであるがゆえ自由度があり、その自由度と引き換えに開発コストが上昇している。そこで、開発効率の高いRuby環境を組み込みに持ってくることで生産性の向上を図ろうということ。</p>

<p>  mrubyでは、中間コードまでをコンパイルして、ターゲットに持って行き、ターゲット上には専用のRubyVMを実装しておいて、そこで中間コードを実行するというモデルになる。 ポイントとしては、Rubyの動的動作を小さな環境でどのように実行するか、ということだった。オブジェクトの再定義など。（Rubyは全く経験無いのでよくわかりませんが。。。）</p>

<p>  VMは16bitCPUでも実装できる。実際にPICにもポーティングしているとのこと。 C99コンパイラがあればVMをコンパイルできる。</p>

<p>  利点として、開発用PCのリッチな環境で徹底的にデバッグができること。実際にはターゲットを仮想化した環境を作る必要があるが、IO関係の単純なドライバ（入出力をファイルに落とすとか、プリントするとか）を作るだけ。</p>

<p>  欠点としては、リソースが必要なこと。1MbyteRAM程度は必要。</p></li>
</ul>


<h2><em>mrubyの使われ方</em> SCSK九州　石井さん</h2>

<p>どのようなシーンで使われているかという話で</p>

<ul>
<li>mod mruby Apach用モジュール</li>
<li>ios用</li>
<li>ゲーム(PC)での利用</li>
<li>組み込み用</li>
</ul>


<p>組み込みボードとして</p>

<ul>
<li>wakayama.rb ボード　（ルネサスRXプロセッサ）</li>
<li>enzi ボード （ARM）</li>
</ul>


<p>（正直、ちょっと選択肢が狭い。自分でポーティングするなら何でもいいのだろうけれど、そこまで出来るスキルがあるならC++でコーディングしてもいいかと思う。）</p>

<p>RAMは1MB程度必要なので、mbedの環境と比較するとちょっと大きいかなと思う。</p>

<h2><em>mruby組込みシステム開発の勘所</em> 　SCSK九州　三牧さん</h2>

<p>MINDSTORMにmruby環境を実装。<br/>
第1世代目では、ハードウエア環境が64KBRAMだったため、VMを実装できたがフリーエリアが7KBでロボットのアーキテクチャを記述するには不十分で諦め。</p>

<p>第2世代では64MBにRAMが大きくなったので、余裕で実装。</p>

<p>実際の利用時にはmrubyだけではだめなので、Cでラップする必要あり。 OSがあると更にいい。</p>

<p><em>（ここから先、知識不足でついていけず。。。。大幅カット）</em></p>

<p>わかったことは、</p>

<ul>
<li>結局、OSがあったほうがいいし、mrubuy単体ではだめ。</li>
<li>レイヤ構造を取らざるを得ないし、ちょっと面倒</li>
<li>ただ、一度そういう環境を作ってしまえばあとはラクチンという感じか？</li>
<li>そこまでするモチベーションがない。</li>
<li>mbedの開発環境などに比べるとリソースリッチ環境が必要</li>
</ul>


<h2><em>実装事例</em> 　　IIJ 斎藤さん</h2>

<p>ルータのユーザインターフェイスの実装をmrubyでやっている、という話。</p>

<p>webエンジニアが多い環境では、rubyを組み込みに使えるということは大きな利点で、同じ技術者が組み込みの一部を担える。</p>

<p>コンフィグファイルの中にスクリプトを入れられるような構造とすることで、多用なことができるようになる。</p>

<p>UIのような文字の処理が多いところは得意。</p>

<h2><em>enziによるmruby実行環境</em>　　ManyColors　中野さん</h2>

<p>JSONパース用のクラスライブラリもあり。（魅力的）</p>

<p>ほとんどがデモンストレーションだったけれど、ボード上で直接インタプリタが動くというのはちょっと変な感じ。</p>

<h3>セッションの感想：</h3>

<p>mrubyがいかに生産性を上げようとも、利用の障壁がC/C++並に下がらないと普及は難しそう。そもそも、おおきなファンクションを持ったライブラリは駆動環境も大きくなるはずなので、その辺のバランスあるいはアプリケーションとのバランスが必要な気がする。（素人ながら）<br/>
ミッションクリティカルなソフトウエアパスではなく、ユーザインターフェイスとか緩い外部とのコネクションとかそういったところでは使えそう。（結局Cが要るのだから、こういったバランスはとりやすいかと）</p>

<hr />

<h1>2015/11/18  14:30-15:10</h1>

<h2><em>IoTビジネス最前線</em>　　 ユビキタス　佐野さん</h2>

<p>IoTのビジネスモデルというか、何を目指しているのか、的な話。<br/>
キーワードとしては、<strong>CPS(Cyber Physical System)</strong></p>

<p>M2Mとの違いとして
- オープン化
- データのフィードバック アーキテクチャがオープンになって接続性が保たれるようになってきている。（昔の電話みたいな感じか？）</p>

<h3>ビジネス環境の変化</h3>

<ul>
<li>1980年代　量産の時代

<ul>
<li>販売ネットワークの整備によるマスプロダクション</li>
<li>生産技術の拡大</li>
</ul>
</li>
<li>2000年代　ネットワークの時代

<ul>
<li>製品がネットワークにつながる付加価値</li>
<li>ユーザに製品が渡ってから付加価値が上がる仕組み</li>
<li>ネットワークコストの低減による環境の下支え</li>
<li>ネットワーク技術の向上
->　　デザイン性、サービス、楽しさを軸とした製品の評価</li>
</ul>
</li>
<li>これから

<ul>
<li><p>組み合わせによる付加価値の増大<br/>
=>「現実」と「仮想」の組み合わせ<br/>
=>「デバイス相互」の組み合わせ</p></li>
<li><p>大手企業の「自前主義」の終焉<br/>
いろんなモノが組み合わさってより良いものができる、付加価値の高いものができる<br/>
->　新しいバリューチェーン</p></li>
</ul>


<p>  一つの物の見方だけでは良いものはできない。多様な視点から見た最適な製品を集めて新しいバリューを創りだす。</p></li>
</ul>


<h3>価値観の変化</h3>

<ul>
<li>所有　から　共有</li>
<li>マーケットシェア　から　マインドシェア</li>
<li>買わせる　から　好きになる、使ってもらう時間を長くする</li>
<li>利益の最大化　から　利益の透明化</li>
<li>終身雇用　から　クラウドソーシング</li>
<li>画一　から　部分的カスタマイズ</li>
</ul>


<p><strong>CPS</strong> :</p>

<p>2006年頃から提唱され始めた現実社会と計算機の中のシステムの統合<br/>
現実社会の現象をセンシングし、処理し、最適なフィードバックを掛けることでいろんなことを最適化しようとすること。<br/>
最適化のためには共有スタイルのビジネスモデルへの対応が必要</p>

<p>大企業はすでにこういったモデルではついてこれない可能性があり、そういう企業はプロデューサ的な立場でビジネスをするべき　</p>

<h3>要素技術</h3>

<ul>
<li>デバイス・センサ</li>
<li>位置情報：どこにいても、正確に、リアルタイムで</li>
<li>UXデザイン：使いやすさ、直感に訴える</li>
<li>SNS：人間自身の行動、発言がセンサ</li>
</ul>


<p>これら技術は充分安価になっていて参入障壁は低下している（一部の大企業のものではなくなった）</p>

<h3>ビジネスモデルのイノベーション</h3>

<p>実例：</p>

<ul>
<li><p>農業用トラクタのIT化<br/>
  自動運転は当たり前で、その生産性の増加率の議論へ。<br/>
  トラクタの運転パターンを作物に対し最適化、そのパターンを「ソフト」として販売へ。</p></li>
<li><p>公共インフラ工事の最適化<br/>
  機材の自動的なデプロイ<br/>
  危ないところなど、工事の必要になりそうなところをセンシング</p></li>
</ul>


<h3>オープンイノベーション</h3>

<p>「あるもの」をいかにうまく組み合わせて、「必要なもの」を「必要な人」に届けられるか。<br/>
（プラットフォーム展開：コアビジネスを利用した周辺ビジネスをパッケージングすること）</p>

<h2>セッションの感想：</h2>

<p>全体的な印象として、UNIX的価値観というか、そういうものを感じた。適材適所で小さな仕事をこなすものを大量に投入して効率を上げる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IBM IoT foundationを試してみた]]></title>
    <link href="http://mm011106.github.io/blog/2015/03/29/ibm-iot-foundation/"/>
    <updated>2015-03-29T09:42:17+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/03/29/ibm-iot-foundation</id>
    <content type="html"><![CDATA[<p>デバイスの方で手一杯で、MQTTブローカをVPSで立ち上げるとか、データのビジュアライズとか解析とかまで手が出ないので、SaaSというかIaaSをためしに使って見ることにしました。</p>

<!-- more -->


<p>最近では、wolfram もIoT向けのサービスを提供しているぐらい、いろんな会社でやっていますが、私はMQTTを使っていることもあり、本家IBMの&#8221;IBM Internet of Things foundation&#8221;を試し始めました。<br/>
イマイチわかってはいないのですが、IBM Bluemixというサービスがあって、その拡張としてMQTTを扱えるようにした、というような感じだと認識しています。</p>

<h2>まずはアカウントを作る</h2>

<p>で、早速<a href="https://internetofthings.ibmcloud.com/">IBM IoT foundation</a>のページに行って登録しました。
ページの上の方にSignUp、下の方に Try Quick startのボタンがあったので、QuickStartの方から登録しました。支払い条件とかを聞かれませんでしたので、完全にお試しのようです。
ページの上の方にあるSignUpではコースを選んだりするところがあり、こちらは「購入」という感じです。ただ、デバイスが20台以下、月間のデータ転送量が100MB以下、月間の使用ストレージが1GB以下だと無料のようです。</p>

<p>まずは、アカウントを作ります。
多分<a href="https://apps.admin.ibmcloud.com/manage/trial/iot.html">ここから</a>入れば大丈夫だと思います。。。。大手のIT企業のwebページはどうも複雑で、昨日やったことをトレースしようと思ってもうまく行きませんでした。</p>

<p>登録すると、confirmation e-mailが届きますので指定されたURLをクリックして完了です。
このとき表示されるwebページが「ダッシュボード」となります。左上に”Organization: xxxxx (Trial)&ldquo;のように表示されていると思います。この6文字のコードがデバイスを接続するホスト名につくIDの&#8221;organaization Code&#8221;となりますので、メモしておいてください。</p>

<h2>デバイスを登録</h2>

<p>次にやることは、デバイスの登録です。
このページの左側コラムにあるように、「ページのdeviceタブを押して」「Add Deviceを選択」します。<br/>
そうすると、新しいページに移動します。ページ中央に&#8221;Device Type&#8221;を入力する欄、その下に&#8221;Device ID&#8221;を入力する欄があります。これはデバイスを識別するためのもので、自分で勝手に決めていいようです。私はDevice Type に製品の型式、Device IDに、指示のようにMACアドレス（コロン抜きで）を入れました。</p>

<p>入力を終えると、次のページでデバイスをクラウドに接続するための大事な情報が表示されるので、メモしておきます。</p>

<figure class='code'><figcaption><span>DEVICE IDs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">org</span><span class="o">=</span>asdfjk
</span><span class='line'><span class="nb">type</span><span class="o">=</span>AD
</span><span class='line'><span class="nv">id</span><span class="o">=</span>abcd12345654
</span><span class='line'>auth-method<span class="o">=</span>token
</span><span class='line'>auth-token<span class="o">=(</span>@dS<span class="p">&amp;</span>34+#2upCxP1
</span></code></pre></td></tr></table></div></figure>


<p>のような感じです。</p>

<h2>MQTTで接続</h2>

<p>さあ、これで接続だあ！とmosquitto_pubでデータをパブリッシュしてみます。</p>

<p>ひとまず、ホームとなる「ダッシュボード」に戻ります。URLは<code>https://internetofthings.ibmcloud.com/dashboard/#/organizations/${org}/home</code>のようになるはずです。迷ったらここに戻りましょう（私は何度と無く迷子になりました）。
${org}には先の「大切な情報」の中のorgを入れます。</p>

<p>Deviceタブをクリックして、先ほど登録したデバイスが出てくるのを確認します。</p>

<p>次に、ページの一番上、グレーのバンドのところに&#8221;QuickStart&#8221;というところがあるので、それを押してみます。すると、新しいページに移動して、左側にMACアドレスを入力する欄が出てきます。なんだかわからないまま、うながされるまま登録したデバイスのMACを入れてみます。</p>

<p>すると、「メッセージを待ってます」みたいなセリフが出て「Device IDは登録されていますが、データが来ていません。有効なデータが来ればビジュアライズしますよ」というメッセージが見えます。</p>

<p>ならば、web上でビジュアライズしてもらおうじゃあないか、ということでMQTTでパブリッシュしてみます。</p>

<p>とはいうものの、何をどうしていいやら。。。。。webを捜し回ること1時間ほど。<a href="https://docs.internetofthings.ibmcloud.com/messaging/devices.html">Documentation</a>
を発見。結局これが一番わかり易い感じです。</p>

<p>これによれば、MQTTのパラメタを以下のように指定すればつながるようです。
shellスクリプト風の表記をして見ました。</p>

<ul>
<li>client_id : d:${org_id}:${device_type}:${device_id}</li>
<li>username : &ldquo;use-token-auth&rdquo;</li>
<li>password : ${auth-token}</li>
</ul>


<p>必要な情報はすべてデバイスを登録した時点で「重要な情報」として出てきたものです。</p>

<p>同時にトピックツリーも重要ですが、デフォルトでこのような構成になっているようです。</p>

<ul>
<li>iot-2/evt/${event_id}/fmt/${format_string}</li>
</ul>


<p>event_id,format_stringは任意に（適当に）決めていいようです。ただ、クラウドで処理する分には決まりがあるようです。（ここらへん未だに解明できていない。。。）</p>

<p>具体的にmosquitto_pubのコマンドパラメータに展開すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mosquitto_pub -i d:asdfjk:AD -h asdfjk.messaging.internetofthings.ibmcloud.com <span class="se">\</span>
</span><span class='line'>-u use-token-auth -P <span class="s2">&quot;(@dS&amp;34+#2upCxP1&quot;</span> <span class="se">\</span>
</span><span class='line'>-t iot-2/evt/hogehoge/fmt/json -m <span class="s2">&quot;hello IBM&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のような感じになるはずです。</p>

<p>で、早速、適当なデータをPublishしてみるも<a href="https://quickstart.internetofthings.ibmcloud.com/#/device//sensor/">web上</a>には何も現れません。</p>

<p>また、ダッシュボード上のデバイス一覧を見ると、データが受信されていることはわかったので、一応つながっているのだな。ということはわかりました。<br/>
webでのデータ表示方法の解明まで時間がかかりそうだったので、データが来ていることが確認できた所でやめておきます。</p>

<h2>ダメなら、ブローカとして使えるか？</h2>

<p>デバイスが送ったデータをクラウド上で表示するのが定番でしょうけれど、どうもうまく行かなかったので、クラウドをふつうのブローカと同じように使えないかとやって見ました。 <br/>
結論から言うと、ストレートフォワードなブローカから比べると面倒くさいけど、できました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># デバイス側</span>
</span><span class='line'>mosquitto_pub -i d:<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>:<span class="k">${</span><span class="nv">TYPE</span><span class="k">}</span>:<span class="k">${</span><span class="nv">ID</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'> -h AAAAAA.messaging.internetofthings.ibmcloud.com <span class="se">\</span>
</span><span class='line'> -u use-token-auth -P <span class="s2">&quot;${auth-token}&quot;</span> <span class="se">\</span>
</span><span class='line'> -t iot-2/evt/hogehoge/fmt/text -m <span class="s2">&quot;hello IBM&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># サブスクライブ</span>
</span><span class='line'>mosquitto_sub -i a:<span class="k">${</span><span class="nv">ORG</span><span class="k">}</span>:<span class="k">${</span><span class="nv">TYPE</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'> -h AAAAA.messaging.internetofthings.ibmcloud.com <span class="se">\</span>
</span><span class='line'> -u <span class="s2">&quot;${API-KEY}&quot;</span> -P <span class="s2">&quot;${API-AUTH-Token}&quot;</span> <span class="se">\</span>
</span><span class='line'> -t iot-2/type/<span class="k">${</span><span class="nv">TYPE</span><span class="k">}</span>/id/<span class="k">${</span><span class="nv">ID</span><span class="k">}</span>/evt/hogehoge/fmt/text
</span></code></pre></td></tr></table></div></figure>


<p>サブスクライブするためにはAPI-KEYというものが必要になります。これを発行するためにダッシュボードに戻ります。</p>

<p>ダッシュボードのページに&#8221;API KEYS&#8221;というタブがあるので、それをクリックします。さらに&#8221;New API Key&#8221;というハイライトがあると思うので、それをクリックします。</p>

<p>ポップアップが現れて、Key, Auth Tokenが表示されますので、メモしておきます。サブスクライブするときにこのキーを指定する必要があります。</p>

<h2>まとめ</h2>

<p>最初に&#8221;Organaization&#8221;を作ります。IoT foundationに登録すれば自動的に自分のOrganaizationコードが発行されます。</p>

<p>次に、デバイスを登録します。登録すると接続のためのTYPE,ID,Tokenが発行されます。</p>

<p>さらに、アプリケーション（デバイスのデータを受信・利用する側）のIDを登録します。登録すると key, Auth-tokenが発行されます。</p>

<p>デバイス側のトピックツリーとアプリケーション側のトピックツリーはちょっと違っています。デバイス側のツリーはアプリケーション側のツリーのサブセットという感じです。アプリケーションは多くのデバイスからのデータを取り込む必要があるためそうなっているのかと。</p>

<p>デバイス、アプリケーションkeyは「ダッシュボード」&#8221;<a href="https://internetofthings.ibmcloud.com/dashboard/#/organizations/$">https://internetofthings.ibmcloud.com/dashboard/#/organizations/$</a>{org}/home&#8221;からいつでも確認できます。
デバイスからのパブリッシュのタイムスタンプも確認できるので、動作状況を軽くチェックするにはいいかもしれません。</p>

<p>とりあえず、IBM IoT foundationをMQTTブローカとして使えることがわかりました。目的であるwebアプリケーションを作るところまではまだまだですが、ドキュメントをよく読めばある程度わかるかな、という感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gmailでメールを送る]]></title>
    <link href="http://mm011106.github.io/blog/2015/03/08/send-email-via-gmail/"/>
    <updated>2015-03-08T10:53:20+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/03/08/send-email-via-gmail</id>
    <content type="html"><![CDATA[<p>gmailでメールを送るスクリプトを作り直しました。<br/>
プロトタイプの時に作ったスクリプトがあったのですが、googleのセキュリティアップデート(?)でSSL接続以外では基本的に接続できないようになったため、以前のシンプルな認証手順のスクリプトは動作しなくなりました。</p>

<!-- more -->


<p>実際には、gmailアカウントからセキュリティの設定をしなおすと一応接続はしてくれるようになります。しかし、送付先がgmail内に制限されているようです。</p>

<h2>再び検索</h2>

<p>全く持ってどうすればいいのかわからなかったので、またしても検索しました。</p>

<p>結果、<a href="http://qiita.com/ssh0/items/7baa0cd094d9fb7561e1">こちらのページ</a>を見つけましたので、これを基に自分の作業用のメール送信スクリプトを作ることにします。ありがとうございます。<br/>
おかげさまで6時間ぐらいで完成させることが出来ました。</p>

<h2>目的・目標</h2>

<p>このスクリプトの目的は、基本的なメール送信の手順を確認することが第一の目的です。 <br/>
デバイスのデータをまとめているサーバ側からユーザへの通知方法の1つとして、メールは必須と考えられるので基本的なところを勉強しておこうということです。
また今回作ったスクリプトは、データをまとめたグラフをユーザへプッシュすることを目的としています。</p>

<p>スクリプトの目標は以下のとおりです。</p>

<ul>
<li>送信者リスト(recipients list)から送信先を読み込んで、それをメールの送信先として設定する。</li>
<li>添付ファイル(PDF)を付けられるようにする。`</li>
<li>送信者リストのファイル名からIDを抽出して、それをメールのタイトルに入れる

<ul>
<li>具体的には、送信者リストのファイル名の中の数値(整数)をとりだします</li>
</ul>
</li>
</ul>


<h2>結果</h2>

<p>ソースコードはgithubの方に載せておきます。（相変わらず使い方がよくわからない。。。） <br/>
<a href="https://github.com/mm011106/sendgmail.py/blob/master/sendgmail.py">sendgmail.py</a></p>

<p>動作の検証を何回かやって、エラーハンドリング用のコードを少し入れて通常に使うにはokぐらいになりました。</p>

<h2>ポイント</h2>

<p>今回の作業でポイントとなったところをいくつか記録しておきます。</p>

<h3>ヘッダの中の宛先とメール送信コマンドの引数としての宛先</h3>

<p>普段メールを書いているときにはほとんど意識しない宛先の取り扱いですが、意識していないからこそひっかかったという感じでしょうか。</p>

<p>送信先を読み込んで、その宛先を <code>msg['To'] = to_addr</code>というように設定してあげます。<code>to_addr</code>は文字列で複数のメールアドレスがコンマで区切られて入っています。<br/>
最初はてっきりこの設定で実際のメール送信の宛先になるものだ、と思い込んでいました。<br/>
しかしながら、複数の宛先が指定されていても、送られてくるのは最初の宛先だけ、という状況でした。
アドレス指定が文字列じゃいけなくて、リストなのかなあ、などと思いつつ色々調べていて、はたと気がつきました。「もしかしたら送信用のアドレス指定とメールヘッダ用の宛先指定は違うのじゃないか？」と。スクリプトを眺めると0.1秒でそれが正しいことがわかりました。</p>

<p>結局、<code>msg['To'] = to_addr</code>はヘッダ用で、実際の送信にこの内容は関与しない、という事です。さらに送信用の実際のアドレス指定は<code>send_via_gmail(from_addr, to_addr, passwd, msg)</code>の<code>to_addr</code>であって、これは複数の宛先の場合「リスト」で有る必要があります。
具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ヘッダ用アドレス指定：<span class="s1">&#39;aaa@gmial.com, bbb@yahoo.com&#39;</span>
</span><span class='line'>メール送信用アドレス指定：<span class="o">[</span><span class="s1">&#39;aaa@gmail.com&#39;</span>, <span class="s1">&#39;bbb@yahoo.com&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>これら2つの変数を混同して使っていたため、<code>send_vi_gmail</code>に送られる引数のアドレスは「複数のアドレスを記載した文字列」となっていました。これが、<code>send_via_gmail</code>に渡されてリストとして扱われたため、「要素数１」で（頭に書かれている）1ヶ所だけにメールが送られていたようです。</p>

<h3>パーサが使える！</h3>

<p>pythonでこんなに簡単に引数をパースできるとは！参考にしたページを書いていただいた人に感謝します。ありがとうございます。</p>

<p>早速使わせて頂きました。</p>

<h3>「内包表現」？</h3>

<p>なんだかよくわからないけど、表現としてはすっきりするので使って見ました。<br/>
具体的には、recipient listから読み込んだ内容をリストにして、そのリスト内から不要なもの（空、#で始まるコメントの要素）を取り除くために使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 　正規表現定義（コメント行と空行） </span>
</span><span class='line'><span class="n">re_comment</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&quot;^\s*#&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">re_null_line</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&quot;^\s*$&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#  内包表現を使って正規表現に”マッチしない”要素を取り出す</span>
</span><span class='line'><span class="c">#　　address_listには、コメントや空行も含めファイルから読み込んだ宛先が入っている</span>
</span><span class='line'><span class="n">address_list</span><span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">address_list</span> <span class="k">if</span> <span class="n">re_comment</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="bp">None</span> <span class="p">]</span>
</span><span class='line'><span class="n">address_list</span><span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">address_list</span> <span class="k">if</span> <span class="n">re_null_line</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="bp">None</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>添付ファイルの用意</h3>

<p>添付ファイルはMIMEエンコードする必要があるので、なんだかちょっと面倒です。<br/>
説明できないですが、webの情報をかき集めてこのようなコードにしています。</p>

<p>多分こんなかんじかと。。。</p>

<ul>
<li>MIMEBaseで添付ファイルのオブジェクトをPDFとして作る。</li>
<li>添付ファイルの実体をファイルから読み込んでオブジェクトに入れる。</li>
<li>base64でエンコード</li>
<li>ヘッダをつける</li>
</ul>


<p>ここには書かれていませんが、このあとメッセージにattachします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#   prepare PDF file as a attachment</span>
</span><span class='line'>    <span class="n">attach_file_name</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">attach_file</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">attach_file_name</span> <span class="o">!=</span> <span class="bp">None</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">attach_file_name</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>            <span class="n">attachment</span> <span class="o">=</span> <span class="n">MIMEBase</span><span class="p">(</span><span class="s">&quot;application&quot;</span><span class="p">,</span><span class="s">&quot;pdf&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">attach_file</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>                <span class="n">attachment</span><span class="o">.</span><span class="n">set_payload</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Encoders</span><span class="o">.</span><span class="n">encode_base64</span><span class="p">(</span><span class="n">attachment</span><span class="p">)</span>
</span><span class='line'>            <span class="n">base_file_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">attach_file_name</span><span class="p">)</span>
</span><span class='line'>            <span class="n">attachment</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">&quot;Content-Disposition&quot;</span><span class="p">,</span> <span class="s">&quot;attachment&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">base_file_name</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="p">(</span><span class="s">&#39;No attachment file is found.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>       <span class="k">print</span> <span class="p">(</span><span class="s">&#39;No attachment file is specified.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>展望</h2>

<p>動作は問題ありませんが、メールアカウントのパスワードが生で入っているのがちょっと気になりますね。  スクリプト自体をrootしか見れないようにすれば少しは良いかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autosshが起動スクリプトでうまく動かない訳]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/28/autossh-failure-to-connect/"/>
    <updated>2015-02-28T14:10:43+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/28/autossh-failure-to-connect</id>
    <content type="html"><![CDATA[<p>エラーする原因をつかみました。
初めてのホストに接続するとき良く目にする以下のメッセージ。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The authenticity of host 'mybroker.ABC_corp.jp (xxx.xxx.xxx.xxx)' can't be established.
</span><span class='line'>ECDSA key fingerprint is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? </span></code></pre></td></tr></table></div></figure>


<p>というのが、曲者でした。<br/>
接続しようとしているユーザの~/.ssh/known_hostsに接続先の「ホストキー」がないと「本当に接続していいのか？」と聞かれます。<br/>
これは、ssh で接続するときに、先方のホストが本当に正しい（自分の知っている）物かどうかを確認するために、自分が持っている接続先の鍵と送られてきた鍵が等しいかどうかを確認しますが、その結果「違う」と判断された場合出るようです。なので通常、そのホストに初めて接続する場合に出てきます。</p>

<p>インタラクティブにやっているときはyesでいいのですが、スクリプトで実行されているときにこのような質問が来るとスクリプトが止まってしまいます。
本来的には、きちんとKnown_hostsに接続先を登録するべきだと思いますが、どうも「ちゃんとやってるのに聞かれる」という場合があるように見て取れます。私の設定が悪いんでしょうけれど。。。</p>

<p>ちなみに、ホストキーは/etc/ssh/ssh_host_ecdsa_key.pubです。</p>

<p>今回は、このメッセージが出ないように設定することで回避します。</p>

<p>基本的には、known_hostsに接続しようとするホストの鍵があれば良いので、一度手動で接続するというのも一つの手です。ただ、自分の場合、hostkeyがあるはずなのにうまく行かない、という事があります。</p>

<p>具体的には、StrictHostKeyChecking をno に設定します。ですが、/etc/ssh/ssh_config で設定変更してしまうと全ユーザが影響を受けてしまうので、ローカルの設定を変更します。</p>

<p>~/.ssh/configを開いて、最初の方に <code>StrictHostKeyChecking no</code>　を追加します。</p>

<p>これでok。</p>

<p>configを使ったautosshもこれで安定したような気がします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mdファイルのプレビュー]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/28/preview-md/"/>
    <updated>2015-02-28T13:23:14+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/28/preview-md</id>
    <content type="html"><![CDATA[<p>FireFoxとかChromeでmarkdownのプレビューが出来るようなので、設定してみました。 <br/>
おかげでだいぶ文章書きがはかどるようになりました。</p>

<!-- more -->


<p>FireFoxで使ったアドオンは、<a href="https://addons.mozilla.org/ja/firefox/addon/markdown-viewer/">markdown-viewe</a>というものです。特に設定など必要なく簡単に使えます。</p>

<p>Chromeで使ったのは<a href="https://github.com/volca/markdown-preview">Markdown Preview Plus</a>です。</p>

<p>こちらはちょっと設定が必要で、chrome側がプラグインに与えるファイルの読み書きをして良いかどうかのパーミッションがあって、それがデフォルトでは「禁止」になっています。これを「許可」にしてあげます。</p>

<p>chromeの設定ー拡張機能を開くと拡張機能の一覧が出てきます。当該拡張機能のところ、名前の下あたりに出てくる、「ファイルのURLへのアクセスを許可する」というのをチェックします。</p>

<p>これでOK。</p>

<p>chromeの拡張機能のほうが綺麗に（それっぽく）表示してくれる感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[起動スクリプトで環境変数を読み込む]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/25/read-env-in-init-dot-d/"/>
    <updated>2015-02-25T21:03:27+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/25/read-env-in-init-dot-d</id>
    <content type="html"><![CDATA[<p>環境変数でデバイスのパラメタを指定することを考えてみました。<br/>
システムワイドの環境変数設定は<code>/etc/environment</code>に入れるようですが、実際にこれを使いたいと思うのは起動時、という場合が多いのでちょっと困りものです。</p>

<!-- more -->


<p>というのも、起動時の環境変数はユーザ環境での環境変数とは違う設定になっているからです。
試してみましたが、やはり/etc/environmentでの設定は起動時には有効になっていません。なので、必要なスクリプトでこれを読み込むことを考えてみました。</p>

<p>最初、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat /etc/environment <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> -r env<span class="p">;</span> <span class="k">do</span> <span class="nb">export</span> <span class="s2">&quot;$env&quot;</span><span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>とやってみたのですが、全くだめ。</p>

<blockquote><p><strong>2014/2/26</strong> 追記<br/>
これはパイプじゃダメで、リダイレクトがいいみたいです。
<code>while read -r env; do export "$env"; done &lt; /etc/environment</code><br/>
とするとうまく行きました。</p></blockquote>

<p>環境変数がプロセスの中だけで有効なのかなと思い、ループの中で環境変数を表示してみてもだめ。<br/>
その後、いろいろ検索してみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for</span> line in <span class="k">$(</span> cat /etc/environment <span class="k">)</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="nb">export</span> <span class="nv">$line</span>
</span><span class='line'>  <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>というスクリプトを見つけました。</p>

<p>こちらを試してみました。このシェルスクリプト内のループの後で環境変数を表示させてみるとうまく設定できています。<br/>
ただ、このシェルスクリプトをコマンドラインから実行して、帰ってくると設定した環境変数は無くなっています。</p>

<p>スクリプト内では環境変数を維持できそうなので、早速init.dの起動スクリプトで試してみました。</p>

<p>結果は、良好！。無事、設定された環境変数を読み出すことが出来ました。</p>

<p>さらにもう一つ、大事なことを勉強しました。環境変数の設定は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">VAR</span><span class="o">=</span>hogehoge
</span><span class='line'><span class="c"># これが正しい</span>
</span><span class='line'><span class="nv">VAR</span><span class="o">=</span><span class="s2">&quot;hogehoge&quot;</span>
</span><span class='line'><span class="c"># とすると、&quot;&quot;も変数に入ってしまう</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果、init.dの起動スクリプトでは、必要最低限のPATH指定もやってあげてから、/etc/environmentの内容を読み込むようにしました。<br/>
環境変数の読み出し時に、空行とコメントを取り外すためのgrepコマンドを入れています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  Read environment </span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">for</span> line in <span class="k">$(</span> cat /etc/environment <span class="p">|</span> grep -v <span class="s1">&#39;^\s*#&#39;</span> <span class="p">|</span> grep -v <span class="s1">&#39;^\s*$&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="nb">export</span> <span class="nv">$line</span>
</span><span class='line'>  <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>また一歩進みました。<br/>
これで、init.d用のスクリプトの中でも不自由することが少なくなるように思います。</p>

<p>それにしても、本題と関係ないところで結構時間をとってるなあ。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[init.dスクリプトを書いてみる]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/23/init-dot-d-script/"/>
    <updated>2015-02-23T21:20:50+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/23/init-dot-d-script</id>
    <content type="html"><![CDATA[<p>以前ハードウエアのスイッチでRaspberry Piをシャットダウンする時に、GPIOを監視するデーモンをシステム起動時に動かすことを試しました。
今回、MQTTのデータ経路を暗号化するためのポートフォワードを起動時にオープンすることを試します。</p>

<!-- more -->


<p>当初の設計では、MQTTでのパブリッシュの時にSSHのポートフォワードを実行するようにしていましたが、外部から操作を可能に出来るようなファンクションも入れておこうということになり、コマンド用のトピックを定義、そこへのメッセージを監視する常駐プロセスを起動する運びとなりました。</p>

<p>そのためデバイスとしては、常にブローカと暗号化経路を維持するのがリーズナブルという判断で、システム起動時に暗号化経路を作るスクリプトをinit.dで作成します。</p>

<h2>init.d用スクリプトを見てみる</h2>

<p>いろいろとwebを検索しましたが、なかなか「これだ」という回答を得られないままでしたが、<a href="https://gist.github.com/atr000/643783">ここで</a>わかりやすいスクリプトを見つけたので、これを元に動作を検証していきます。<br/>
このスクリプトはautosshを起動時に動かすためのinit.d用スクリプトです。
autosshはsshの動作を監視して、止まったら起動させる仕事をします。そのため、設定それ自身はsshのものと同じ（というかsshにそのまま渡す）になります。<br/>
このスクリプトでは、コマンドオプションで全ての指定をしていますが、
今回の様なポートフォワードではパラメタが多くなり、間違えやすくなるのでconfigファイルを作って指定してあげます。<br/>
また、ポートフォワード用のユーザを作ってそのユーザでsshを起動します。</p>

<p>まず、INIT INFO部分について記述がなかったので足しておきます。
INIT INFOが無いと登録したときにいろいろと文句を言われますし、そもそもきちんとしたランレベルで実行されないので、やっておいた方が良いかなと。</p>

<p>完成したスクリプトを最後の方に書いておきます。この内容を順番みていきます。</p>

<p>まずはコメントに見えますが、重要なINIT INFO。</p>

<ul>
<li>Provides:

<ul>
<li>このスクリプトが提供する「ファシリティ名」を定義します。このスクリプトを必要とするその他のスクリプトに、このスクリプトの状態を判断できるように名前を付けておきます。<br/>
他のinitdスクリプトでこのスクリプトの必要性をこの名前（ファシリティ名）で指定しておけば、お互いの必要性を考慮して正しい順序でデーモンが起動するようになります。とのことです。</li>
</ul>
</li>
<li>Required-Start:, Required-Stop:

<ul>
<li>このスクリプトの起動・停止に必要な「ファシリティ」を記載します。<br/>
この例では、「メタファシリティ」という物が使われていて、具体的なスクリプトの名前じゃ無く「こういう状態」というような指示です。この定義については<a href="https://wiki.debian.org/LSBInitScripts">debianのwiki</a>をご覧頂いた方が良いかと思います。</li>
</ul>
</li>
<li>Default-Start:, Default-Stop:

<ul>
<li>このスクリプトを起動する／停止するランレベルの条件を設定します。通常、OSが動作状態の時は2のようです。</li>
</ul>
</li>
</ul>


<p>次に定義されている変数です。</p>

<ul>
<li>TUNNEL変数

<ul>
<li>ssh用のconfigの中で設定されているポートフォワード設定のhost名を指定します。実際の接続はポートフォワード用のユーザで実行されるので、 configファイルはポートフォワード用のユーザの中におきます。具体的には<code>~/.ssh/config</code>になります。<br/>
さらに、この設定ファイルの中で「パスワード無し接続」をするために鍵を指定する必要がありますが、この鍵も同じ場所に入れるようにします。<br/>
鍵へのパスはフルパスで指定した方が無難かと思ったので、そうしてあります。</li>
</ul>
</li>
<li>USER変数

<ul>
<li>ポートフォワード用のユーザ名を指定します。start-stop-daemonでユーザを指定してコマンドを起動するのに必要となります。</li>
</ul>
</li>
<li>DAEMON変数

<ul>
<li>起動するautosshを指定します。コメントにもありますように、リンクとかじゃなく実態を指定する必要があるようです。ここを変更すれば他のコマンド・スクリプトも起動できると思いますが、PIDが出来るとか出来ないとかコマンドによって違うようなので、そこら辺は試しながらstart-stop-daemonのオプションを調整する必要があるようです。</li>
</ul>
</li>
<li>PIFLILE変数

<ul>
<li>pidを保存するファイルを指定します。stopするときpidが必要ですのでpidファイルには正しい値が入っている必要があります。ファイル名そのものは<code>basename $0</code>(このスクリプト自身のパスを含まないファイル名)になります。スクリプト名に拡張子が入っていると、拡張子を含んだ形のpidファイル名になってしまいます。（例えばhogehoge.sh.pid）</li>
</ul>
</li>
<li>SCRIPTNAME変数

<ul>
<li>usageを表示するときに使います。daemonの起動に直接関係ありません。</li>
</ul>
</li>
<li>DESC変数

<ul>
<li>起動スクリプト実行時に何が起動されているのか、を表示しますが、そのときのメッセージです。短めが（4wordぐらい）が良いかもしれません。daemonの起動に直接関係ありません。</li>
</ul>
</li>
<li>ASOPT変数

<ul>
<li>起動するコマンドにオプションを与えるための変数です。今回の例では<code>-M 0 -N host名指定</code>だけです。</li>
</ul>
</li>
</ul>


<p>これらの変数を適宜設定すればokかと思います。</p>

<h2>ポイントは。。。</h2>

<p>実は、autosshの起動の前にssh単体での起動を試しました。そのときの問題はpidの取得で、起動したsshのpidを上手く取得できませんでした。色々調べてみると、実行をバックグラウンドに移行するときの指定にコツが必要でした。</p>

<ul>
<li>ssh にもバックグラウンドに移行するオプション(-f)があるが、それを使うと上手くpidを取得できない</li>
<li>そのため、start-stop-daemonコマンドの「起動したプロセスをバックグラウンドに移行する」オプションである<code>--background</code>指定する</li>
<li>さらに、このオプションを指定した場合 <code>--make-pidfile</code>を付ける。</li>
</ul>


<p>これらをきちんとやると、PIDファイルが出来て上手く行きました。ですので、これをそのままautosshに適用しました。</p>

<p>結果的に、コマンドラインは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>start-stop-daemon --start --quiet --background \
</span><span class='line'>--chuid $USER --user $USER --pidfile $PIDFILE  \
</span><span class='line'>--make-pidfile --exec $DAEMON -- $ASOPT</span></code></pre></td></tr></table></div></figure>


<p>となりました。他のコマンド／スクリプトのデーモン化では<code>--make-pidfile</code> <code>--background</code>は不要かもしれません。</p>

<ul>
<li><code>--chuid</code> はdaemonを起動するときのユーザ名を指定します。</li>
<li><code>--user</code> はプロセスをチェック（起動しているかどうか）の時のユーザ指定のようです。</li>
</ul>


<p>シンプルなスクリプトになりましたので、他の用途にも使っていこうと思います。</p>

<p>これを起動時に動かすためには、</p>

<p><code>
sudo update-rc.d SCRIPTNAME defaults
</code></p>

<p>としましょう。これ以前に周到に動作チェックをしたほうがいいですけど。</p>

<figure class='code'><figcaption><span>mqtt-pf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'><span class="c">### BEGIN INIT INFO</span>
</span><span class='line'><span class="c"># Provides:          mqtt-pf</span>
</span><span class='line'><span class="c"># Required-Start:    $syslog $network sshd</span>
</span><span class='line'><span class="c"># Required-Stop:     $syslog $network</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6</span>
</span><span class='line'><span class="c"># Short-Description: Port forward for MQTT protocol</span>
</span><span class='line'><span class="c">### END INIT INFO</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Author: Andreas Olsson &lt;andreas@arrakis.se&gt;</span>
</span><span class='line'><span class="c"># Version:    @(#)autossh_tunnel.foo  0.1  27-Aug-2008  andreas@arrakis.se</span>
</span><span class='line'><span class="c"># modified : 13-Feb-2015 mqtt.and@gmail.com #     </span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># For each tunnel; make a uniquely named copy of this template.</span>
</span><span class='line'>
</span><span class='line'><span class="c">## SETTINGS</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># specify a host name descibed in /home/${USER}/.ssh/ssh_config</span>
</span><span class='line'><span class="nv">TUNNEL</span><span class="o">=</span><span class="s2">&quot;MY_Broker&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  user name for port forwading</span>
</span><span class='line'><span class="nv">USER</span><span class="o">=</span><span class="s2">&quot;pfuser&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You must use the real autossh binary, not a wrapper.</span>
</span><span class='line'><span class="nv">DAEMON</span><span class="o">=</span>/usr/lib/autossh/autossh
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">## END SETTINGS</span>
</span><span class='line'>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'><span class="c"># NAME is always including the extension of $0</span>
</span><span class='line'><span class="c"># the script should be named without extension for good looking</span>
</span><span class='line'><span class="nv">PIDFILE</span><span class="o">=</span>/var/run/<span class="k">${</span><span class="nv">NAME</span><span class="k">}</span>.pid
</span><span class='line'><span class="nv">SCRIPTNAME</span><span class="o">=</span>/etc/init.d/<span class="k">${</span><span class="nv">NAME</span><span class="k">}</span>
</span><span class='line'><span class="nv">DESC</span><span class="o">=</span><span class="s2">&quot;SSH Tunnel for MQTT protocol&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># exit when test result = false</span>
</span><span class='line'><span class="nb">test</span> -x <span class="nv">$DAEMON</span> <span class="o">||</span> <span class="nb">exit </span>0
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">MQTT_PF_PIDFILE</span><span class="o">=</span><span class="k">${</span><span class="nv">PIDFILE</span><span class="k">}</span>
</span><span class='line'><span class="nv">ASOPT</span><span class="o">=</span><span class="s2">&quot; -M 0 -N &quot;</span><span class="k">${</span><span class="nv">TUNNEL</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Function that starts the daemon/service.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  ssh command is not able to make a pid file with -f (force background) option.</span>
</span><span class='line'><span class="c">#  To obtain pid file properly, put --background, --make-pidfile option on the start-stop-deamon command</span>
</span><span class='line'><span class="c">#    and force forground to ssh command.</span>
</span><span class='line'>
</span><span class='line'>d_start<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  start-stop-daemon --start --quiet --chuid <span class="nv">$USER</span> --user <span class="nv">$USER</span> <span class="se">\</span>
</span><span class='line'>      --background --pidfile <span class="nv">$PIDFILE</span> --make-pidfile <span class="se">\</span>
</span><span class='line'>      --exec <span class="nv">$DAEMON</span> -- <span class="nv">$ASOPT</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -gt <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">echo</span> -n <span class="s2">&quot; not started (or already running)&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      sleep 1
</span><span class='line'>      start-stop-daemon --stop --quiet --pidfile <span class="nv">$PIDFILE</span> <span class="se">\</span>
</span><span class='line'>      --test --exec <span class="nv">$DAEMON</span> &gt; /dev/null <span class="o">||</span> <span class="nb">echo</span> -n <span class="s2">&quot; not started&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Function that stops the daemon/service.</span>
</span><span class='line'>d_stop<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  start-stop-daemon --stop --quiet --pidfile <span class="nv">$PIDFILE</span> <span class="se">\</span>
</span><span class='line'>      --exec <span class="nv">$DAEMON</span> <span class="se">\</span>
</span><span class='line'>      <span class="o">||</span> <span class="nb">echo</span> -n <span class="s2">&quot; not running&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>  start<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> -n <span class="s2">&quot;Starting $DESC: $NAME&quot;</span>
</span><span class='line'>  d_start
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'>  stop<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> -n <span class="s2">&quot;Stopping $DESC: $NAME&quot;</span>
</span><span class='line'>  d_stop
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'>
</span><span class='line'>  restart<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> -n <span class="s2">&quot;Restarting $DESC: $NAME&quot;</span>
</span><span class='line'>  d_stop
</span><span class='line'>  sleep 1
</span><span class='line'>  d_start
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'>  *<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Usage: $SCRIPTNAME {start|stop|restart}&quot;</span> &gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nb">exit </span>3
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autosshでポートフォワード]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/21/autossh-2/"/>
    <updated>2015-02-21T18:16:46+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/21/autossh-2</id>
    <content type="html"><![CDATA[<p>以前、ポーフォワードを<a href="http://mm011106.github.io/blog/2015/01/12/autossh/">autosshで設定する</a>というのをやりましたが、今回はそれをもう少しまとめてみました。<br/>
起動スクリプトの理解を少し深めて、さらにポートフォワード用のユーザを作ってそこで実行するようにして見ました。</p>

<!-- more -->


<h2>何をするのか？</h2>

<p>今回の目標は、エッジデバイス側の暗号化経路を確立するために、システム起動時にサーバ（ここではブローカ）にsshでポートフォワードを設定することです。
さらにセキュリティ向上を目指して、ポートフォワードのプロセスを起動する専用のユーザを設定しています。</p>

<p>手順としては、</p>

<ul>
<li>ユーザを作る</li>
<li>そのユーザ上にsshのconfigファイルを設定</li>
<li>パスフレーズなしの鍵を作る</li>
<li>接続テスト</li>
<li>init.d用スクリプトを作成〜登録</li>
<li>起動テスト</li>
</ul>


<p>となりました。</p>

<p>以下のパラメタを決定しておきます。
()内には、この例での値を書いておきます。</p>

<ul>
<li>サーバ名(mybroker)</li>
<li>サーバのアカウント名(pipipi)</li>
<li>サーパのsshポート(sshport)</li>
<li>サーバのMQTTポート(1883)</li>
<li>パスフレーズなしの鍵 (mqttclient_key)</li>
<li>ローカルのMQTT用ポート(22883)</li>
<li>ポートフォワード用ユーザ(pfuser)</li>
</ul>


<p>ハードウエアはRaspberry Pi、OSはRaspbianを想定しています。</p>

<h2>ポートフォワード用ユーザを作成</h2>

<p>まずは、ポートフォワード用ユーザを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> <span class="nv">$ </span>sudo useradd -m pfuser
</span></code></pre></td></tr></table></div></figure>


<p>このオプションだとユーザのホームディレクトリだけが作成されます。パスワードが設定されていませんので、ログインできない状態（ロック状態）となっています。<br/>
ユーザ設定のデフォルト値は<code>useradd -D</code>で表示できるようですので、確認しておきましょ。</p>

<p>このユーザにはログインできない状態のはずです。一応、外からsshで接続してみます。。。。<br/>
やはりできませんね。ok<br/>
さらに、コマンドからユーザの設定を確認しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> <span class="nv">$ </span>passwd -S pfuser
</span><span class='line'>pfuser L 02/21/2015 <span class="m">0</span> <span class="m">99999</span> <span class="m">7</span> -1
</span></code></pre></td></tr></table></div></figure>


<p>2番目にLとありますが、これがロックされているアカウント、という意味のようです。</p>

<p>次に、作ったユーザのホームディレクトリに以下のものを作ります。</p>

<ul>
<li>パスフレーズなしの鍵</li>
<li>ssh用のconfiファイル作成</li>
</ul>


<h2>パスフレーズなしの鍵を作る</h2>

<p>他のユーザで鍵を作ってコピーしてもいいですが、ユーザ名の変更とかしなきゃいけない(<code>chown usr:grp</code>)ので、素直にポートフォワード用ユーザ(pfuser)に移動して鍵を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo su - pfuser
</span><span class='line'><span class="c"># 今のユーザからpfuser（今作ったポートフォワード用ユーザ）に移動</span>
</span><span class='line'><span class="c"># &#39;-&#39; optionでログインしたのと同じ状態</span>
</span><span class='line'><span class="c">#  （ホームに移動して環境変数も初期化される）になる</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mkdir .ssh
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> .ssh
</span><span class='line'><span class="nv">$ </span>ssh-keygen -f mqttclient_key
</span><span class='line'><span class="c"># パスフレーズを入力するように言われますが、ただenterを押してやることで</span>
</span><span class='line'><span class="c"># パスフレーズなしの鍵ができます</span>
</span></code></pre></td></tr></table></div></figure>


<p>(以後しばらくこのユーザで作業します。)</p>

<p>作った鍵の公開鍵の方を(<code>mqttclient_key.pub</code>)をサーバ側にコピーします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>scp -P sshport ./mqttclient_key.pub pipipi@mybroker:~/.ssh/
</span><span class='line'><span class="nv">$ </span>ssh pipipi@mybroker
</span><span class='line'>mybroker <span class="nv">$ </span><span class="nb">echo</span> -n <span class="s1">&#39;no-pty,permitopen=&quot;localhost:1883&quot;,command=&quot;/bin/false&quot; &#39;</span> &gt;&gt; authorized_keys
</span><span class='line'><span class="c"># これは、パスフレーズなしの鍵でログインした場合の動作を制限するおまじないです。</span>
</span><span class='line'>mybroker <span class="nv">$ </span>cat .ssh/mqttclient_key.pub &gt;&gt; authorized_keys
</span><span class='line'><span class="c"># 鍵を登録します</span>
</span><span class='line'>mybroker <span class="nv">$ </span><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、サーバに鍵を登録しましたので、試しに接続してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ssh -i ~/.ssh/mqttclient_key pipipi@mybroker
</span><span class='line'>PTY allocation request failed on channel 0
</span><span class='line'>Connection to xxx.xxx.xxx.xxx closed.
</span></code></pre></td></tr></table></div></figure>


<p>となれば成功です。これは、先程の鍵の登録の時のおまじないで、コンソールが開かないようにno-ptyでオフにしたこと、またコマンド入力を受け付けないようにシェルを空のシェルプログラムにしたことでコネクションがフェイルしているためです。</p>

<h2>sshの設定ファイルを作る</h2>

<p>次に、sshのポートフォワード設定ファイルをつくります。コマンドラインからすべてのパラメタを入れてもいいのですけれど、結構長くなってしまうのと、psでプロセスを表示した時にパラメタが全部見えてしまうのでなんとなく気持ち悪いのでこうします。</p>

<p>viなどのエディタで以下のような内容のファイルを<code>~/.ssh/config</code>として作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  MQTT portforwarding config</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'>ServerAliveInterval   30
</span><span class='line'>ServerAliveCountMax   3
</span><span class='line'>
</span><span class='line'>StrictHostKeyChecking  no
</span><span class='line'>
</span><span class='line'>Host Broker
</span><span class='line'>  HostName        mybroker
</span><span class='line'>  IdentityFile    /home/pfuser/.ssh/mqttlient_key
</span><span class='line'>  User            pipipi
</span><span class='line'>  LocalForward    <span class="m">22883</span> localhost:1883
</span><span class='line'>  Port            sshport
</span></code></pre></td></tr></table></div></figure>


<p>このようにすることで、sshのマンドオプションに&#8217;Broker&#8217;と指定するだけで接続できるようになります。</p>

<p>最初の2行の設定は、コネクションを確認するための設定で、</p>

<blockquote><p>30秒に1回コネクションがあることを確認するためのパケットを送ります。もしこれが3回繰り返して通らない場合（コネクションがダウンしている場合）、接続を切ります。</p></blockquote>

<p>という設定です。</p>

<p>つまり、これで30秒x3=1分30秒間連続してコネクションが切れていると、sshはダウンします。</p>

<p>StrictHostKeyCheckingはクライアント側のknown_hostsに接続先の登録がないときに「ほんとに接続していいのかよ」と聞いてくるのを抑えます。このメッセージが出てしまうとスクリプトで実行した時にエラーで止まってしまいます。今回の場合は明示的に鍵をサーバにコピーしていますし、騙されたりして違うサーバに接続することはないと思うので、このように指定しました。</p>

<p>Host以降は接続名に対応する設定を記入します。IdentityFileはフルパスのほうが後々トラブルが少ないとおもうので、そうしておきました。</p>

<p>ここまでできたら、このconfigファイルを使って接続を試してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ssh -f -N -F /home/pfuser/.ssh/config Broker
</span></code></pre></td></tr></table></div></figure>


<p>-f は起動後バックグラウンドに移動させるためのオプションです。-N は接続先でコマンドを起動しない設定です。<br/>
エラーせずプロンプトが帰ってくれば成功している可能性大です。psコマンドで確認してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ps ax <span class="p">|</span> grep <span class="s1">&#39;ssh&#39;</span>
</span><span class='line'> <span class="m">3100</span> ?        S      0:00 ssh -f -N -F /home/pfuser/.ssh/config Broker
</span></code></pre></td></tr></table></div></figure>


<p>のように先のコマンドラインが出てくればokです。</p>

<p>exitして元のユーザに戻っておきます。</p>

<h2>init.d用のスクリプトを書く</h2>

<p>これがちょっと曲者なので、検索して<a href="http://files.bogosity.se/autossh_tunnel.foo">動きそうなスクリプト</a>を探してきました。これに適宜必要な部分を書きたして見ました。</p>

<p>ファイル名を<code>mqtt-pf</code>として下記の内容を<code>/etc/init.d/</code>に作成します。</p>

<p>su でやる必要がありますので、念の為。</p>

<p><a href="https://raw.githubusercontent.com/mm011106/mqtt-pf/master/mqtt-pf">mqtt-pf</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'><span class="c">### BEGIN INIT INFO</span>
</span><span class='line'><span class="c"># Provides:          mqtt-pf</span>
</span><span class='line'><span class="c"># Required-Start:    $syslog $network $all </span>
</span><span class='line'><span class="c"># Required-Stop:     $syslog $network</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6</span>
</span><span class='line'><span class="c"># Short-Description: Port forward for MQTT protocol</span>
</span><span class='line'><span class="c">### END INIT INFO</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Author: Andreas Olsson &lt;andreas@arrakis.se&gt;</span>
</span><span class='line'><span class="c"># Version:    @(#)autossh_tunnel.foo  0.1  27-Aug-2008  andreas@arrakis.se</span>
</span><span class='line'><span class="c"># modified :    13-Feb-2015 mqtt.and@gmail.com </span>
</span><span class='line'><span class="c">#            </span>
</span><span class='line'><span class="c">#           </span>
</span><span class='line'><span class="c"># For each tunnel; make a uniquely named copy of this template.</span>
</span><span class='line'>
</span><span class='line'><span class="c">## SETTINGS</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># specify a host name in ~/.ssh/config,</span>
</span><span class='line'><span class="c"># and also the ssh-key for connection must be located in ~/.ssh/</span>
</span><span class='line'><span class="nv">TUNNEL</span><span class="o">=</span><span class="s2">&quot;Broker&quot;</span>
</span><span class='line'><span class="c"># You must use the real autossh binary, not a wrapper.</span>
</span><span class='line'><span class="nv">DAEMON</span><span class="o">=</span>/usr/lib/autossh/autossh
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">## END SETTINGS</span>
</span><span class='line'>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'><span class="c"># NAME is always including the extension of $0</span>
</span><span class='line'><span class="c"># the script should be named without extension for good looking</span>
</span><span class='line'><span class="nv">PIDFILE</span><span class="o">=</span>/var/run/<span class="k">${</span><span class="nv">NAME</span><span class="k">}</span>.pid
</span><span class='line'><span class="nv">SCRIPTNAME</span><span class="o">=</span>/etc/init.d/<span class="k">${</span><span class="nv">NAME</span><span class="k">}</span>
</span><span class='line'><span class="nv">DESC</span><span class="o">=</span><span class="s2">&quot;SSH Tunnel for MQTT protocol&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># exit when test result = false</span>
</span><span class='line'><span class="nb">test</span> -x <span class="nv">$DAEMON</span> <span class="o">||</span> <span class="nb">exit </span>0
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">MQTT_PF_PIDFILE</span><span class="o">=</span><span class="k">${</span><span class="nv">PIDFILE</span><span class="k">}</span>
</span><span class='line'><span class="nv">ASOPT</span><span class="o">=</span><span class="s2">&quot;-M 0 -N -F /home/pfuser/.ssh/config &quot;</span><span class="k">${</span><span class="nv">TUNNEL</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Function that starts the daemon/service.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  ssh command is not able to make a pid file with -f (force background) option.</span>
</span><span class='line'><span class="c">#  To obtain pid file properly, put --background, --make-pidfile option on the start-stop-deamon command,</span>
</span><span class='line'><span class="c">#    --background option is forcing ssh process started without -f option into background.</span>
</span><span class='line'>
</span><span class='line'>d_start<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  start-stop-daemon --start --quiet --chuid pfuser:pfuser --user pfuser --background --pidfile <span class="nv">$PIDFILE</span> <span class="se">\</span>
</span><span class='line'>      --make-pidfile --exec <span class="nv">$DAEMON</span> -- <span class="nv">$ASOPT</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -gt <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">echo</span> -n <span class="s2">&quot; not started (or already running)&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      sleep 1
</span><span class='line'>      start-stop-daemon --stop --quiet --pidfile <span class="nv">$PIDFILE</span> <span class="se">\</span>
</span><span class='line'>      --test --exec <span class="nv">$DAEMON</span> &gt; /dev/null <span class="o">||</span> <span class="nb">echo</span> -n <span class="s2">&quot; not started&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Function that stops the daemon/service.</span>
</span><span class='line'>d_stop<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  start-stop-daemon --stop --quiet --pidfile <span class="nv">$PIDFILE</span> <span class="se">\</span>
</span><span class='line'>      --exec <span class="nv">$DAEMON</span> <span class="se">\</span>
</span><span class='line'>      <span class="o">||</span> <span class="nb">echo</span> -n <span class="s2">&quot; not running&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>  start<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> -n <span class="s2">&quot;Starting $DESC: $NAME&quot;</span>
</span><span class='line'>  d_start
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'>  stop<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> -n <span class="s2">&quot;Stopping $DESC: $NAME&quot;</span>
</span><span class='line'>  d_stop
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'>
</span><span class='line'>  restart<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> -n <span class="s2">&quot;Restarting $DESC: $NAME&quot;</span>
</span><span class='line'>  d_stop
</span><span class='line'>  sleep 1
</span><span class='line'>  d_start
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'>  *<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Usage: $SCRIPTNAME {start|stop|restart}&quot;</span> &gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nb">exit </span>3
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>ファイルができたら、実行できるようにパーミッションを設定します。</p>

<p>このスクリプトではautosshを起動しています。ssh をラップするコマンドで、sshを監視して、止まったら再起動するという事をしてくれます。基本的にsshコマンドが先のテストの時に動けば、問題なくautosshも起動できるはずです。</p>

<p>最初のコメント欄では、このスクリプトの起動の順番を指定しています。</p>

<ul>
<li><code># Provides:          mqtt-pf</code>

<ul>
<li>このスクリプトの名前です</li>
</ul>
</li>
<li><code># Required-Start:    $syslog $network $all</code>

<ul>
<li>このスクリプトを起動するときに必要な環境（バーチャルファシリティ）を指定</li>
</ul>
</li>
</ul>


<p>この指定がまたまた曲者で、うまく指定しないと起動してくれません。今回は色々試行錯誤して$allというファシリティを指定しました。すべての起動するべきスクリプトが実行されたあとに実行されるようになります。</p>

<p>$networkだけだと、dhcpが実行される前に実行されたりしてうまく行きませんでした。</p>

<p>実際にデーモンを起動するコマンド(start-stop-daemon)は以下のような設定になっています。</p>

<ul>
<li>&ndash;chuid pfuser:pfuser

<ul>
<li>ユーザ、グループIDを&#8217;pfuser、pfuser&#8217;で起動する</li>
</ul>
</li>
<li>&ndash;user pfuser

<ul>
<li>プロセスチェックするときのプロセスのユーザ指定(pfuserを指定）</li>
</ul>
</li>
<li>&ndash;background

<ul>
<li>バックグラウンドに移行</li>
</ul>
</li>
<li>&ndash;pidfile $PIDFILE

<ul>
<li>PIDを記録するファイルを指定</li>
</ul>
</li>
<li>&ndash;make-pidfile

<ul>
<li>PID ファイルを作るように指定</li>
</ul>
</li>
<li>&ndash;exec $DAEMON &ndash; $ASOPT

<ul>
<li>デーモンとして起動するコマンドとそれに渡すためのオプション</li>
</ul>
</li>
</ul>


<p>通常は&ndash;make-pidfileと&ndash;backgroundは不要のようですが、一応つけてあります。
コメントにもあるように、一部のコマンドはバックグラウンドに移行できないものがあり、それを強制するための&ndash;background オプションです。さらにこのオプションを指定した時にpidファイルが作られないことがあるそうなので、その対策として明示的にpidファイルをつるくように指定していています。</p>

<p>autosshコマンドに渡しているオプションは以下のとおりです。</p>

<ul>
<li>-M 0

<ul>
<li>接続が確立しているかどうかのチェックをするためのポート番号を指定</li>
<li>0はポートを使った接続チェックをしないで、sshコマンドが停止した時のみ再起動するという指定です。</li>
</ul>
</li>
<li>-N

<ul>
<li>これ以降のオプションはsshにそのまま渡されます。</li>
<li>N　は接続先のコマンドを起動しない指定です。</li>
</ul>
</li>
<li>-F /home/pfuser/.ssh/config

<ul>
<li>設定ファイルの指定です。ユーザを指定しているので不要かもしれません。</li>
</ul>
</li>
</ul>


<p>ここまでできたら、単体でこのスクリプトを動かしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/mqtt-pf start
</span><span class='line'>Starting SSH Tunnel <span class="k">for</span> MQTT protocol: mqtt-pf.
</span></code></pre></td></tr></table></div></figure>


<p>と出てくれば成功です。</p>

<p><code>...not started.</code></p>

<p>となると失敗です。設定を見なおしてください。特にコメントで指定しているファシリティがきちんとしているか、pidができているか。など。<br/>
一応、このスクリプトは動作確認していますので、動くと思いますけど。。。。</p>

<h2>rc.dに登録</h2>

<p>ここまで行けば、だいたい大丈夫だとおもいます。</p>

<p>起動スクリプトの一部として、このポートフォワード設定を登録します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo update-rc.d mqtt-pf defaults
</span><span class='line'><span class="c"># として、登録</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls /etc/rc2.d
</span><span class='line'><span class="c">#　とすると、どの順番で起動することになるかがわかります。</span>
</span><span class='line'><span class="c">#  S04mqtt-pfというファイル名になっていれば大丈夫かとおもいます。</span>
</span></code></pre></td></tr></table></div></figure>


<p>rc2.dのディレクトリにあるスクリプト（へのリンク）はランレベル２の時に起動/停止するデーモンのための起動/停止スクリプトです。</p>

<p>Sで始まるスクリプトが起動用、Kで始まるスクリプトが停止用、番号が順番です。小さい方から順に実行されていきます。$allというファシリティを指定したので主要なスクリプトはすべて実行（起動）されたあとに起動されるようになっていて、大きめの番号が付いているはずです。</p>

<p>ここまでくれば、あとはリブートするだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>起動メッセージに</p>

<p><code>Starting SSH Tunnel for MQTT protocol: mqtt-pf. </code></p>

<p>と出てくれば成功です。多分。
ログインして、psで確認してみてください。</p>

<p>ずっとうまく行ってて、再起動だけうまく行かないという時は、パーミッションや設定ファイルの指定がうまく行っていない場合が多いです。</p>

<p>起動時はすべてrootで実行されますので、ユーザとして実行している状態とはちょっと違っています。そこら辺を気にかけながらデバグすると効率がいいかと思います。</p>

<p>以上！</p>

<p>ここまでたどり着くのに丸３日以上の時間がかかりました。。。。ユーザで実行してうまく起動するけれど、起動スクリプトに登録するとうまく動かない、というところで約２日を消費。あ〜、やっとできた。</p>

<p>ポイントは「rootユーザが実行する」という点と「接続先からなにか聞かれる場合がある」という点です。</p>

<p>おかげで、起動スクリプトは結構詳しくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paho mqttでリモートカメラ]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/08/remote-stillcam/"/>
    <updated>2015-02-08T09:49:46+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/08/remote-stillcam</id>
    <content type="html"><![CDATA[<p>Paho MQTTでリモートでシャッターを切れるカメラを作ってみました。撮った写真もMQTTで送られてきます。</p>

<blockquote><p>2015/2/28 UPDATE!!</p></blockquote>

<!-- more -->


<h2>カメラ側の設定</h2>

<p>まずは、デバイス（カメラ）側のスクリプト</p>

<p>ハードウエアとして、Raspberry Pi B+に専用のカメラモジュールをつけています。</p>

<figure class='code'><figcaption><span>remotecam.py </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">paho.mqtt.client</span> <span class="kn">as</span> <span class="nn">mqtt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when the client receives a CONNACK response from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_connect</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">rc</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Connected with result code &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span>
</span><span class='line'>  <span class="c"># Subscribing in on_connect() means that if we lose the connection and</span>
</span><span class='line'>  <span class="c"># reconnect then subscriptions will be renewed.</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="s">&quot;my/device/stillcam/command&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when a PUBLISH message is received from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">topic</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">payload</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cmd</span> <span class="o">==</span> <span class="s">&quot;shoot&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Say cheeees!&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dummy</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&quot;raspistill -w 1024 -h 768 -t 10 -o /run/shm/temp.jpg&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">dummy</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&quot;mosquitto_pub -h my.broker.jp -t my/device/stillcam -f /run/shm/temp.jpg&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">mqtt</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_connect</span> <span class="o">=</span> <span class="n">on_connect</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_message</span> <span class="o">=</span> <span class="n">on_message</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;my.broker.jp&quot;</span><span class="p">,</span> <span class="mi">1883</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Blocking call that processes network traffic, dispatches callbacks and</span>
</span><span class='line'><span class="c"># handles reconnecting.</span>
</span><span class='line'><span class="c"># Other loop*() functions are available that give a threaded interface and a</span>
</span><span class='line'><span class="c"># manual interface.</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">loop_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>パブリッシュ設定したメッセージが来ると、on_messageがコールされます。<br/>
メッセージが&#8221;shoot&#8221;だったら、osコマンド&#8221;raspistill&#8221;を実行して写真を撮ります。<br/>
さらにそのデータをosコマンド&#8221;mosquitto_pub&#8221;でパブリッシュします。</p>

<p>ちょっと格好悪いですけど、MQTTで写真データを送るのにmosquittoを使っています。<del>ざっくり試した感じですと、paho-mqttではバイナリのペイロードをうまくハンドリングできないようで、多分なんか設定があるのだと思います。探してみます。</del></p>

<h4>2015/2/11追記：</h4>

<h4>上記のバイナリデータのハンドリングの件ですが、うまく行かない理由は私のスキル不足です。多分python内部での変数のデータ扱いをうまく変換してやる必要が有りそうです。  只今勉強中。</h4>

<blockquote><h3>2015/2/28  追記：</h3>

<p>上記、バイナリデータの送信の件ですが、<br/>
実際に出てくるエラーは<br/>
<code>UnicodeDecodeError: 'ascii' codec can't decode</code><br/>
というものでしたので、そのまま検索をかけてみると、デコードがうまく行っていない、旨のエラーのようです。<br/>
であれば、変換をしないように設定すればいいのかなあ、どうするのかなあ、と思いつつソースコードを（わからないなりに）眺めていると、</p></blockquote>

<figure class='code'><figcaption><span>http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.python.git/tree/src/paho/mqtt/client.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>        <span class="k">if</span> isinstance<span class="o">(</span>payload, str<span class="o">)</span>:
</span><span class='line'>            <span class="nv">upayload</span> <span class="o">=</span> payload.encode<span class="o">(</span><span class="s1">&#39;utf-8&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="nv">payloadlen</span> <span class="o">=</span> len<span class="o">(</span>upayload<span class="o">)</span>
</span><span class='line'>        <span class="k">elif</span> isinstance<span class="o">(</span>payload, bytearray<span class="o">)</span>:
</span><span class='line'>            <span class="nv">payloadlen</span> <span class="o">=</span> len<span class="o">(</span>payload<span class="o">)</span>
</span><span class='line'>        <span class="k">elif</span> isinstance<span class="o">(</span>payload, unicode<span class="o">)</span>:
</span><span class='line'>            <span class="nv">upayload</span> <span class="o">=</span> payload.encode<span class="o">(</span><span class="s1">&#39;utf-8&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="nv">payloadlen</span> <span class="o">=</span> len<span class="o">(</span>upayload<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>という記述を見つけ、payloadのタイプによってエンコードを分けていることがわかりました。<code>bytearray</code>なら何もせずにそのままのデータが送られるので<code>bytearray</code>にすればいい。 <br/>
再び検索して、読み込んだファイルをbytearray型で変数に代入する方法を調べ、結果として次のようなソースコードになりました。</p></blockquote>

<figure class='code'><figcaption><span>replace with &#8216;mosquitto_pub &#8230;&#8230;&#8217;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 撮影した写真ファイルは/run/shm/temp.jpg</span>
</span><span class='line'>       with open<span class="o">(</span><span class="s1">&#39;/run/shm/temp.jpg&#39;</span>, <span class="s1">&#39;rb&#39;</span><span class="o">)</span> as <span class="nb">source</span>:
</span><span class='line'>            <span class="nv">payload_pub</span> <span class="o">=</span> bytearray<span class="o">(</span>source.read<span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># bytearray 型にして変数に代入、それをそのままペイロードとしてパブリッシュ</span>
</span><span class='line'>        client.publish<span class="o">(</span>topic_root+topic_pub, payload_pub<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>これで無事バイナリファイルを送信することが出来ました。</p></blockquote>

<p>USBのカメラを使う場合はraspistillのコマンドを適宜変更すればいいかと思います。</p>

<p>このスクリプトを実行可能に設定して、実行させます。これで待ち受け状態。</p>

<h2>コントローラ側</h2>

<p>別のPCでは、</p>

<ul>
<li>シャッターを切るコマンドを発行する</li>
<li>送られてきた写真のデータを保管する</li>
</ul>


<p>という作業があります。</p>

<p>まずは、送られてきたデータを保管するスクリプトを作ります。</p>

<figure class='code'><figcaption><span>photo_sub.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">paho.mqtt.client</span> <span class="kn">as</span> <span class="nn">mqtt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when the client receives a CONNACK response from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_connect</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">rc</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Connected with result code &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span>
</span><span class='line'>  <span class="c"># Subscribing in on_connect() means that if we lose the connection and</span>
</span><span class='line'>  <span class="c"># reconnect then subscriptions will be renewed.</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="s">&quot;my/device/stillcam&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when a PUBLISH message is received from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># print(msg.topic+&quot; &quot;+str(msg.payload))</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;./image/&quot;</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H%M%S</span><span class="si">%f</span><span class="s">&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;.jpg&quot;</span>
</span><span class='line'>    <span class="n">outfile</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span> <span class="n">filename</span> <span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;subscribe: &quot;</span> <span class="o">+</span> <span class="n">filename</span>
</span><span class='line'>    <span class="n">outfile</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">mqtt</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_connect</span> <span class="o">=</span> <span class="n">on_connect</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_message</span> <span class="o">=</span> <span class="n">on_message</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;my.broker.jp&quot;</span><span class="p">,</span> <span class="mi">1883</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Blocking call that processes network traffic, dispatches callbacks and</span>
</span><span class='line'><span class="c"># handles reconnecting.</span>
</span><span class='line'><span class="c"># Other loop*() functions are available that give a threaded interface and a</span>
</span><span class='line'><span class="c"># manual interface.</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">loop_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>このスクリプトでは、my/device/stillcamというトピックにパブリッシュされたデータを取り込んでファイル名（タイムスタンプ）をつけて保存します。</p>

<p>このスクリプトを実行して、データを待ち受けます。</p>

<p>最後にシャッタを切るコマンドを送ります。<br/>
とりあえずは、コマンドラインからです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mosquitto_pub -h my.broker.jp -t my/device/stillcam/command -m <span class="s2">&quot;shoot&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、メッセージ&#8221;shoot&#8221;をトリガにして、写真を撮影し、それを転送して保存するまでの一連の作業が行われます。</p>

<p>デバイス側の処理負荷を確認するため1秒に1回シャッターを切る動作を続けて見ました。
結果的には、カメラと転送の処理で数%程度の負荷のようです。<br/>
ちなみにこのカメラ、この設定では1秒間隔以上のスピードで連続して撮影することはできませんでした。</p>

<p>カメラがRaspi用のモジュールですので、かなりオーバーヘッドが小さい感じもします。
CPU的には処理が軽くていいのですが、ハードウエア的には取り回しが悪く、ちょっといまいちな感じもします。<br/>
応用のシーンによりますが、今回私が想定しているケースでは使いにくいです。</p>

<p>あとで、USBcamでやってみようと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 2　を試して見ました]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/07/raspi2-speed/"/>
    <updated>2015-02-07T10:58:26+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/07/raspi2-speed</id>
    <content type="html"><![CDATA[<p>あまり流行りものに飛びつかないんですが、先週何気なくwebを眺めてたら、&#8221;Raspberry Pi 2　発売!&ldquo;という記事があって、「どうせ買うことになるし、在庫あれば買ってみようかな」とおもいまして。</p>

<!-- more -->


<p>で、RS componentsに行ってみると「在庫あります」ということでしたので、何も考えず購入。ハッピーなことに金曜日到着しました。</p>

<p>今あるRaspiのSDカード(OS)で動くかな、とおもって試してみたらやっぱりダメで最新版OSをダウンロード。結局このダウンロードが3時間かかってしまい、動かしたのは土曜日の朝になりました。</p>

<p>やっぱり起動はキビキビしていますね。デバグの時の再起動などがやりやすくなります。それとスタートアップ画面左上の「ラズベリーアイコン」が4つになってます。4コアという事でしょうね。</p>

<p>で、気になる速度ですが、RSA鍵を作るopensslコマンドで試して見ました。</p>

<p>結果からいうと、このプロセス自体がシングルコアで動作するので、クロックアップ分の速度アップとなりました。</p>

<p>具体的には、50回　2048bitRSA鍵を作る下記のようなスクリプトを作りこれを更にシェルで10回やって、それぞれの実行時間を測るというものです。</p>

<figure class='code'><figcaption><span>Script for testing computaiton time</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat keygen.sh
</span><span class='line'><span class="c">#/bin/sh</span>
</span><span class='line'><span class="k">for</span> i in <span class="o">{</span>1..50<span class="o">}</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>   sudo openssl genrsa -rand ./rand.txt  <span class="m">2048</span> &gt; key.txt
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># このスクリプトを10回試行してそれぞれの処理時間を書き出します。</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="k">for</span> j in <span class="o">{</span>1..10<span class="o">}</span> <span class="p">;</span> <span class="k">do</span> <span class="o">(</span><span class="nb">time</span> -p ./keygen.sh <span class="o">)</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep <span class="s1">&#39;user&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span> &gt;&gt; out_raspi2.txt <span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>鍵の乱数の種は同じ物を使用。もともとgenrsaの実行時間は乱数生成に左右されるので、あまり正確ではないかもしれませんが、平均値と分散の変化を見ればいいかなと。</p>

<p>結果</p>

<hr />

<p><strong>Raspberry Pi 1:</strong></p>

<p>310.34,
299.83,
285.74,
261.49,
342.31,
353.19,
340.26,
318.30,
367.67,
322.97</p>

<p>平均：320.21, 標準偏差：32.3</p>

<hr />

<p><strong>Raspberry Pi 2:</strong></p>

<p>204.71,
208.46,
214.48,
197.13,
229.73,
222.12,
207.66,
226.37,
194.71,
244.09</p>

<p>平均：214.95, 標準偏差：15.55</p>

<hr />

<p>平均が0.67倍、標準偏差が0.48倍でした。</p>

<p>クロックの増加分で0.78倍になるはずなので、それよりちょっと速いですね。</p>

<p><code>top</code>でCPUの状態を見てみると。</p>

<figure class='code'><figcaption><span>result of top command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>top
</span><span class='line'>
</span><span class='line'>top - 01:55:44 up <span class="m">20</span> min,  <span class="m">3</span> users,  load average: 1.00, 1.00, 0.65
</span><span class='line'>Tasks:  <span class="m">90</span> total,   <span class="m">2</span> running,  <span class="m">88</span> sleeping,   <span class="m">0</span> stopped,   <span class="m">0</span> zombie
</span><span class='line'>%Cpu0  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span><span class='line'>%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span><span class='line'>%Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span><span class='line'>%Cpu3  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span><span class='line'>KiB Mem:    <span class="m">754256</span> total,   <span class="m">142940</span> used,   <span class="m">611316</span> free,     <span class="m">9484</span> buffers
</span><span class='line'>KiB Swap:   <span class="m">102396</span> total,        <span class="m">0</span> used,   <span class="m">102396</span> free,    <span class="m">96900</span> cached
</span><span class='line'>
</span><span class='line'>  PID USER      PR  NI  VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND
</span><span class='line'> <span class="m">2607</span> root      <span class="m">20</span>   <span class="m">0</span>  <span class="m">4220</span> <span class="m">3192</span> <span class="m">2896</span> R 100.0  0.4   0:03.89 openssl           :
</span><span class='line'>  :
</span></code></pre></td></tr></table></div></figure>


<p>となっていて、３コアは遊んでいる状態です。ヘビーなプロセスが動いていてもそれに引っ張られること無く、他のプロセスが動かせるようになります。動画の配信などには最適かもしれませんね。</p>

<p>メモリが増えているのでRAM-DISKのサイズ拡大に期待していましたが、案の定大きくなっています。</p>

<p><code>df</code>で確認してみます。</p>

<figure class='code'><figcaption><span>comparison of the size of RAM-DISK</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Raspberry Pi 1</span>
</span><span class='line'>tmpfs              <span class="m">76560</span>   <span class="m">41932</span>     <span class="m">34628</span>  55% /run/shm
</span><span class='line'>
</span><span class='line'><span class="c"># Raspberry Pi 2</span>
</span><span class='line'>tmpfs             <span class="m">150840</span>       <span class="m">0</span>    <span class="m">150840</span>   0% /run/shm
</span></code></pre></td></tr></table></div></figure>


<p>150MBもあります。
有効に使いたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paho-mqttでバイナリファイルを受信してみる]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/03/paho-client/"/>
    <updated>2015-02-03T21:01:10+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/03/paho-client</id>
    <content type="html"><![CDATA[<p>バイナリファイルの受信はmosquitto_subではちょっと面倒じゃないかな、なんてこと言ってましたが、Paho-mqttで簡単なクライアントを作ってバイナリファイルの転送を試して見ました。</p>

<!-- more -->


<p>コードは先の<a href="http://mm011106.github.io/blog/2014/12/29/vim/">投稿</a>で拾ってきたPaho-mqtt(python)のテストコードをちょちょいと改造しました。</p>

<figure class='code'><figcaption><span>test code for binary-file subscription</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">paho.mqtt.client</span> <span class="kn">as</span> <span class="nn">mqtt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when the client receives a CONNACK response from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_connect</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">rc</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Connected with result code &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span>
</span><span class='line'>  <span class="c"># Subscribing in on_connect() means that if we lose the connection and</span>
</span><span class='line'>  <span class="c"># reconnect then subscriptions will be renewed.</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="s">&quot;topic/binary/jpeg&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The callback for when a PUBLISH message is received from the server.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">userdata</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># print(msg.topic+&quot; &quot;+str(msg.payload))</span>
</span><span class='line'>    <span class="n">outfile</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;./test.jpg&#39;</span> <span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outfile</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">mqtt</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_connect</span> <span class="o">=</span> <span class="n">on_connect</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">on_message</span> <span class="o">=</span> <span class="n">on_message</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;my.broker.jp&quot;</span><span class="p">,</span> <span class="mi">1883</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Blocking call that processes network traffic, dispatches callbacks and</span>
</span><span class='line'><span class="c"># handles reconnecting.</span>
</span><span class='line'><span class="c"># Other loop*() functions are available that give a threaded interface and a</span>
</span><span class='line'><span class="c"># manual interface.</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">loop_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実行しておいて、別のコンソール（あるいはPC）から、jpgファイルをパブリッシュしてみます。　　
こちらは、mosquitto。</p>

<figure class='code'><figcaption><span>publish a binary file as a test data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mosquitto_pub -h my.broker.jp -t topic/binary/jpeg -f mypicture.jpg
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>とします。</p>

<p>すると、先程のpythonスクリプトからtest.jpgのファイルが出力されました。実際に表示させてみると、問題なく絵を見ることが出来ました。</p>

<p>mosquitto_subのコマンドラインからですと、出力したファイルはコマンドを終了しない限りずっとオープンしっぱなしなので、スクリプトなどで横取りすることできませんでした。今回のこのpaho版では、ファイルを読み込んだら一回クローズしてしまいますので、横取りできます。</p>

<p>ま、きちんとpythonで全部のスクリプトを書く、というのが筋でしょうけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オレオレ証明書を作ってみようかと　実践3]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/03/ore-ore-certificate4/"/>
    <updated>2015-02-03T19:49:16+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/03/ore-ore-certificate4</id>
    <content type="html"><![CDATA[<p>先の投稿でCAを作って、そのキーで証明書にサインしたサーバ証明書を作りました。が、今日何気なくwebを眺めていると”SHA-1は廃止、これからはSHA-2を使いましょう”というような記事があり、ああそう言えば昨日作った証明書はSHA-1でのハッシュ値だったなあと。</p>

<!-- more -->


<p>ということで、作り直します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo openssl genrsa 2048 &gt; CA_private_key.pem
</span><span class='line'>$ sudo openssl req -new -sha256 -key ./CA_private_key.pem -x509 -days 7300 &gt; CA_selfsigned_Certificate.pem</span></code></pre></td></tr></table></div></figure>


<p>という感じになりますか。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo openssl x509 -text &lt; CA_selfsigned_Certificate.pem</span></code></pre></td></tr></table></div></figure>


<p>で確認してみると、たしかにSHA256でハッシュが作られている、と書いてありました。</p>

<p>これでok。</p>

<blockquote><p>SHA-1は2005年に脆弱性が問題になり、2010年までにSHA-2に移行するように要請されていたようです。で、何が問題かというと、webを読みかじったところによると、SHA-1でつくったハッシュは「あるファイルと同じハッシュになるファイルを作れる時間」が当初思っていたよりも速く（短い時間で）できることがわかったそうで、同じハッシュを持った違うファイルを作ることが比較的簡単に可能になります。そうすると、サインした証明書の中身をすげ替えてもわからない、ということが起こるようです。</p>

<p>ここらへんの周辺事情は検索すると山ほど引っかかるので、読み物としては面白いですね。</p></blockquote>

<p>また、元々の鍵のクオリティを上げる（ランダム性を上げる？）ために、乱数をパラメタとして与える、というのもあるようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo openssl md5 /var/log/syslog* &gt; rand.dat
</span><span class='line'>$ sudo openssl genrsa -rand ./rand.dat -aes256 2048 &gt; CA_private_key.pem  </span></code></pre></td></tr></table></div></figure>


<p>と言った感じです。syslogのファイルのMD5ハッシュ値を計算してそれを乱数の種にするように指定します。</p>

<p>さらに、鍵をAES256で暗号化する指定を入れています。</p>

<p>なんか、この暗号の世界はかなりな勢いで世代替わりがあるようですね。現在「最高性能」といわれているものが５年後には「廃止」になっているかもしれないです。
そういう意味でも、数年に一度ぐらいの間隔で証明書を作りなおすのもいいかもしれませんね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オレオレ証明書を作ってみようかと　実践2]]></title>
    <link href="http://mm011106.github.io/blog/2015/02/02/ore-ore-certificate3/"/>
    <updated>2015-02-02T20:41:28+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/02/02/ore-ore-certificate3</id>
    <content type="html"><![CDATA[<p>先の投稿では「オレオレ証明書」を作って、無事nginxに導入してTLS接続が出来るようになりました。<br/>
あとはこれをmosquittoに応用するだけ、と思っていたら実はCA certificate（CA証明書）が必要だと言うことにはたと気づき、がっくり。</p>

<!-- more -->


<p>結局、</p>

<ul>
<li>認証局(CA)を作る</li>
<li>その認証局の鍵でサーバの証明書にサインしてもらう</li>
</ul>


<p>と言う手順をとる必要があります。<br/>
認証局と行っても、自己証明書ということでは先に作ったサーバの証明書と同じです。</p>

<h2>自前のCAを作る</h2>

<p>基本的には、サーバの自己証明書を作るのと同じ手順で認証局の証明書（CA certificate)をつくります。手順としては</p>

<ul>
<li>CAの鍵を作る　(CA key)</li>
<li>自己署名の証明書を作る　（これがCAの証明書（CA certificate)になる）</li>
</ul>


<p>となります。 ここでは、CAの鍵をCA_private_key.pem,　CAの証明書をCA_selfsigned_Certificate.pemというファイル名を付けました。</p>

<p>実は、これがいっぺんにできるそうで、これが以下のコマンド。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo openssl req -new -x509 -newkey rsa:2048 -keyout CA_private_key.pem -days 7300 &gt; CA_selfsigned_Certificate.pem</span></code></pre></td></tr></table></div></figure>


<p>このなかで、</p>

<ul>
<li>鍵を作って</li>
<li>リクエスト用のファイルを作って</li>
<li>それに対して自分でサインして</li>
</ul>


<p>という3つのことが行われているようです。</p>

<p>このコマンドでは、キーを暗号化するためのパスフレーズを要求されます。さらに、証明書に記載するための情報（組織名とか所在地とか）を聞かれますので、適宜答えていきます。</p>

<p>最初、以下の様なコマンドでも良いはずですが、パスフレーズを入力するところがでません。確認してみると、鍵は暗号化されていないようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo openssl genrsa 2048 &gt; CA_private_key.pem
</span><span class='line'>$ sudo openssl req -new -key ./CA_private_key.pem -x509 -days 7300 &gt; CA_selfsigned_Certificate.pem</span></code></pre></td></tr></table></div></figure>


<p>manでしらべてみると、genrsaのオプションで -des3とか暗号化のオプションを付けないためパスフレーズを聞かれないようです。暗号化する指示をすればパスフレーズを聞いてきました。理由が分かれば当たり前の話。<br/>
なので、最初の鍵を作るコマンドは</p>

<p><code>$ sudo openssl genrsa -des3 2048 &gt; CA_private_key.pem</code></p>

<p>とするのが、安全性の面でも良い感じですかね。</p>

<p>これでCA鍵とCA証明書ができあがりです。「俺様認証局」ですね。この鍵でいくらでも「オレオレ」証明書がつくれます。</p>

<p>会社内、組織内のセキュア接続のためには有効につかえるかな、とおもいます。ただ鍵が流出するといくら社内用といえどもセキュリティ的に問題があるので、きちんと管理しないといけません。鍵には名前も書いてありますしね。</p>

<h2>サーバの証明書にサインする</h2>

<p>それでは、サーバの証明書を作ってみます。</p>

<p>最初にサーバに設置する証明書のための鍵をつくります。さらに、その鍵をもとに証明書署名リクエストファイルを作成します。まあ、申請書みたいな物ですね。これは、前回の<a href="http://mm011106.github.io/blog/2015/01/31/ore-ore-certificate2/">オレオレ証明書を作ってみようかと　実践１</a>を参考にしてください。この記事の１．２．を実行してもらうといいとおもいます。</p>

<p>ここでは、署名リクエストファイルをmyserver.csr、署名付き証明書をmyserver.crtとします。</p>

<p>サーバの証明書にCAのサインをするので、myserver.csrとCA_selfsigned_Certificate.pem（CA証明書）, CA_private_key.pem（CA鍵）が必要になります。</p>

<p>具体的には、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo openssl x509 -CA CA_selfsigned_Certificate.pem -CAkey CA_private_key.pem -req -days 7300 -CAcreateserial &lt; myserver.csr &gt; myserver.crt</span></code></pre></td></tr></table></div></figure>


<p>とします。ここで、-daysはサインする証明書の有効日数、-CAcreateserialは最初に署名するときだけ必要なオプション。これをやるとシリアル番号のファイルが出来るそうな。</p>

<p>これだけで、サーバの証明書にCAのサインをしてサーバに設定出来る証明書ができあがりました。</p>

<p>nginxに入れて動作を確認しました。</p>

<p>ブラウザから証明書を確認すると、「発行者名」と「サブジェクト名」がそれぞれ、CA証明書を作るときに入力した情報、myserverの証明書（証明書署名リクエストファイル）作るときに入力した情報になっているはずです。</p>

<p>ここでもう少しきちんとしたい人は、CA証明書をブラウザに読み込むことで、「この証明書は不明な機関によって署名されています」的なメッセージを回避できます。この作業はこの証明書を信じます、と言う宣言ですので、もしこの鍵が悪用されたりすると大変なことになる可能性があります。鍵の管理はしっかりしておきましょう。</p>

<p>信じてもらうためにはしっかりと行動するということですね。人生。</p>

<p>mosquittoではブローカがcertificateを提供してくるので、それが正しいかどうか確認するための認証局の証明書が必要になります。webブラウザなんかだと、パブリックな認証局の情報は一通りはいっていますから普段認証局のcertificateを意識することは無いですよね。</p>

<p>きょうは、ここまでです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オレオレ証明書を作ってみようかと　実践１]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/31/ore-ore-certificate2/"/>
    <updated>2015-01-31T20:29:12+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/31/ore-ore-certificate2</id>
    <content type="html"><![CDATA[<p>先に投稿した、オレオレ証明書の続きです。</p>

<p>今回は、実際の証明書を作りwebサーバに導入して動作確認までやって見ました。</p>

<!-- more -->


<h2>オレオレ証明書を作る</h2>

<p>いったいどこから手を付ければ良いか分からないので、検索してみます。
いろいろなところで例が示されていますが、opensslで作れそうな感じです。とくに<a href="http://d.hatena.ne.jp/ozuma/20130511/1368284304">こちらのページ</a>に非常にわかりやすくまとめられていましたので、こちらをそのまま順番に試していこうと思います。</p>

<p>詳しい解説は、そちらをご覧ください。</p>

<h3>1.秘密鍵を作る</h3>

<p>まずは、秘密鍵(server.key)を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl genrsa <span class="m">2048</span> &gt; server.key
</span></code></pre></td></tr></table></div></figure>


<p>これで2048bitのRSAキーが作られます。参考ページの解説によると、この情報の中に暗号化に必要な全てのものが入っています。ここから公開鍵も作られます。</p>

<p>中身を見てみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl rsa -text &lt; server.key
</span><span class='line'>Private-Key: <span class="o">(</span><span class="m">2048</span> bit<span class="o">)</span>
</span><span class='line'>modulus:
</span><span class='line'>  :
</span><span class='line'>  :
</span></code></pre></td></tr></table></div></figure>


<p>見てもよく分かりませんが、なんか出来てます。</p>

<h3>2.証明書署名リクエストファイルを作る</h3>

<p>次に、証明書にサインしてもらうためのリクエストファイルを作ります。
このファイルには、秘密鍵から作られた公開鍵と秘密鍵のハッシュ値（鍵の情報を要約した物）が入っています。さらに証明書に記載する署名情報（サーバのFQDNとか組織名とか）が加わります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl req -new -key server.key &gt; server.csr
</span></code></pre></td></tr></table></div></figure>


<p>このときに、サーバのFQDNや組織名、所在地など聞かれます。適当で良いようですが、サーバのFQDNはきちんと入れておいた方が良いようです。証明書のFQDNとそれを設置したサーバのFQDNが違うのはダメなような気がしますね。</p>

<p>再び内容を確認します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl req -test &lt; server.csr
</span></code></pre></td></tr></table></div></figure>


<h3>3.認証局に成り代わって、証明書にサインします</h3>

<p>できあがった証明書署名リクエストファイルに署名をして正式な証明書にします。<br/>
本来これは認証局がやることですが、「おれおれ」なので「おれ」が証明書にサインします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>openssl x509 -req -days <span class="m">7300</span> -signkey server.key &lt; server.csr &gt; server.crt
</span></code></pre></td></tr></table></div></figure>


<p>-days オプションでは有効期限を指定します。ここでは7300日、20年、だいたい私が死ぬまで有効。</p>

<p>できあがりを確認してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl x509 -text &lt; server.crt
</span></code></pre></td></tr></table></div></figure>


<p>先ほど入力した組織名やFQDNが見えてくると思います。</p>

<p>必要なファイルは、.crtファイル（証明書）と.key（秘密鍵）です。
両方ともownをrootにして、パーミッションを600に設定しておきます。</p>

<h2>まずはwebサーバに設定してみる</h2>

<p>先のwebcamの投稿でnginxをインストールしましたが、このサーバに作った鍵を設定して試してみます。</p>

<p>これも、設定方法を検索したところ、そのものずばり<a href="http://heartbeats.jp/hbblog/2012/06/nginx06.html">&ldquo;nginxのTLS設定&rdquo;</a>というページが見つかりました。この連載、とてもわかりやすくnginxの設定方法が書かれていますので、あとでよく勉強しておこうと思います。</p>

<p>やることとしては、configファイルを変更してhttpsの受け口を作り、そこに先ほど作った証明書をいれる、ということになります。</p>

<p>設定ファイルは、先のページを参考に以下の様にしました。</p>

<figure class='code'><figcaption><span>/etc/nginx/sites-sites-available/default</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen <span class="m">443</span> ssl<span class="p">;</span>
</span><span class='line'>  server_name my.www.server.jp<span class="p">;</span>
</span><span class='line'>  root /home/mynginx/www<span class="p">;</span>
</span><span class='line'>  index index.html index.htm<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  ssl_certificate /etc/nginx/server.crt<span class="p">;</span>
</span><span class='line'>  ssl_certificate_key /etc/nginx/server.key<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  ssl_session_timeout 5m<span class="p">;</span>
</span><span class='line'>  ssl_session_cache shared:SSL:10m<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  ssl_protocols SSLv3 TLSv1<span class="p">;</span>
</span><span class='line'>  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP<span class="p">;</span>
</span><span class='line'>  ssl_prefer_server_ciphers on<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  location / <span class="o">{</span>
</span><span class='line'>      try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
</span><span class='line'>      auth_basic <span class="s2">&quot;Restricted&quot;</span><span class="p">;</span>
</span><span class='line'>      auth_basic_user_file /etc/nginx/.htpasswd<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>httpsのポートを443に設定してsslを有効にします。</li>
<li>サーバのFQDNを設定</li>
<li>webサーバのドキュメントルートを設定</li>
<li>証明書と秘密鍵を指定</li>
<li>タイムアウトとキャッシュを設定（ここら辺は参考webページの写しです）</li>
<li>SSLのプロトコル指定と暗号化スイートの指定です。ここら辺はnginxのデフォルト設定ファイルのコピー</li>
<li>ドキュメントの特定の場所のビヘイビアの指定です。ここではルート以下の全てのアクセスでBasic認証を要求するような設定です</li>
</ul>


<p>認証のために.htpasswdが必要になりますが、これはhttp-toolsのなかにあるhtpasswdコマンドでつくりました。</p>

<figure class='code'><figcaption><span>how-to make a password file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo htpasswd -c .htpasswd UserName
</span><span class='line'>New password:
</span><span class='line'>Re-type new password:
</span></code></pre></td></tr></table></div></figure>


<p>のようにしてパスワードファイルを作成して、設定します。</p>

<h3>4.設定を有効にして、再起動</h3>

<p>設定を書き終えたら設定を確認して、読み込ませます。</p>

<figure class='code'><figcaption><span>restart nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo nginx -t
</span><span class='line'><span class="nv">$ </span>sudo nginx -s reload
</span></code></pre></td></tr></table></div></figure>


<h3>5.動作確認</h3>

<p>これで、TLSが有効になっているはずです。アクセスしてみます。</p>

<p><code>https://my.www.server.jp</code></p>

<p>ブラウザからは「この証明書は無効です」などのワーニングが出てきました。証明書に有効なサインがない、サインした人が「ちゃんとした」人じゃ無いので、このようにワーニングがでます。
出てきたワーニングから「証明書を確認する」などのボタンをおして、自分が作った証明書だということを確認します。</p>

<p>確認できたら、ワーニングを無視して進みます。
ここでログイン（Basic認証）のポップアップが出てくるはずです。先ほど設定したログイン名とパスワードを入力します。無事ログインして、webページがみれました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi にシャットダウンスイッチをつける]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/31/shutdown-switch/"/>
    <updated>2015-01-31T11:05:35+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/31/shutdown-switch</id>
    <content type="html"><![CDATA[<p>Raspberry PiはOSが動いているので、いきなり電源を切ると厄介なことになる可能性があります。私は何回か「ブッチ」していますが、とりあえずは大事故にいたっていません。しかしながら、起動時にエラーが出るなどマイナーな不具合は何度か起こっていますですので、非常時は仕方ないとして、できるだけきちんとシャットダウンしたいものです。<br/>
ここでは外部装置からの停止信号検出で止まれるように、GPIOを利用したシャットダウンスイッチを検討してみます。</p>

<!-- more -->


<p>まずは検索、ということで見てみるとこちら<a href="http://d.hatena.ne.jp/penkoba/20130925/1380129824">ページ</a>がヒットしました。これを参考に、というか丸写しで、試してみます。ありがとうございます。</p>

<h2>導入とテスト</h2>

<p>このページにあるように、まずGPIOの動作を試してみます。サンプルから頂いたコードを入力します。</p>

<figure class='code'><figcaption><span>interrupt1.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env python2.7  </span>
</span><span class='line'><span class="c"># script by Alex Eames http://RasPi.tv/  </span>
</span><span class='line'><span class="c"># http://raspi.tv/2013/how-to-use-interrupts-with-python-on-the-raspberry-pi-and-rpi-gpio  </span>
</span><span class='line'>import RPi.GPIO as GPIO
</span><span class='line'>GPIO.setmode<span class="o">(</span>GPIO.BCM<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># GPIO 23 set up as input. It is pulled up to stop false signals  </span>
</span><span class='line'>GPIO.setup<span class="o">(</span>23, GPIO.IN, <span class="nv">pull_up_down</span><span class="o">=</span>GPIO.PUD_UP<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>print <span class="s2">&quot;Make sure you have a button connected so that when pressed&quot;</span>
</span><span class='line'>print <span class="s2">&quot;it will connect GPIO port 23 (pin 16) to GND (pin 6)\n&quot;</span>
</span><span class='line'>raw_input<span class="o">(</span><span class="s2">&quot;Press Enter when ready\n&gt;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>print <span class="s2">&quot;Waiting for falling edge on port 23&quot;</span>
</span><span class='line'><span class="c"># now the program will do nothing until the signal on port 23   </span>
</span><span class='line'><span class="c"># starts to fall towards zero. This is why we used the pullup  </span>
</span><span class='line'><span class="c"># to keep the signal high and prevent a false interrupt  </span>
</span><span class='line'>
</span><span class='line'>print <span class="s2">&quot;During this waiting time, your computer is not&quot;</span>
</span><span class='line'>print <span class="s2">&quot;wasting resources by polling for a button press.\n&quot;</span>
</span><span class='line'>print <span class="s2">&quot;Press your button when ready to initiate a falling edge interrupt.&quot;</span>
</span><span class='line'>try:
</span><span class='line'>        GPIO.wait_for_edge<span class="o">(</span>23, GPIO.FALLING<span class="o">)</span>
</span><span class='line'>        print <span class="s2">&quot;\nFalling edge detected. Now your program can continue with&quot;</span>
</span><span class='line'>        print <span class="s2">&quot;whatever was waiting for a button press.&quot;</span>
</span><span class='line'>except KeyboardInterrupt:
</span><span class='line'>        GPIO.cleanup<span class="o">()</span>  <span class="c"># clean up GPIO on CTRL+C exit  </span>
</span><span class='line'>GPIO.cleanup<span class="o">()</span>          <span class="c"># clean up GPIO on normal exit </span>
</span></code></pre></td></tr></table></div></figure>


<p>wait_for_edge()は割り込み動作になるので、CPU時間を消費しないはずですね。またexceptでキーボード入力をハンドルしています。<br/>
エッジを検出したあとは、つかったGPIOを掃除して終了です。</p>

<p>ファイルができたら<code>chmod +x interrupt1.py</code>として実行できるように設定し、実行してみます。<br/>
さらに、GPIO23をGNDに落としてみます。<br/>
なにやらいろいろメッセージが出て、最終的に&#8221;Falling edge detected.&ldquo;とメッセージが出れば成功。</p>

<p>うまく行ったら、次。</p>

<h2>実際のコード</h2>

<p>実際にshutdownするコードを入れますが、実際にシャットダウンしちゃうとdebugが面倒なので、とりあえずはプリント文を入れてコマンドラインから試します。</p>

<figure class='code'><figcaption><span>shutdown-btn.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env python2.7  </span>
</span><span class='line'><span class="c">#  Shutdwon the system at the Falling edge of GPIO23 </span>
</span><span class='line'>
</span><span class='line'>import RPi.GPIO as GPIO
</span><span class='line'>import os
</span><span class='line'>GPIO.setmode<span class="o">(</span>GPIO.BCM<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>GPIO.setup<span class="o">(</span>23, GPIO.IN, <span class="nv">pull_up_down</span><span class="o">=</span>GPIO.PUD_UP<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>        GPIO.wait_for_edge<span class="o">(</span>23, GPIO.FALLING<span class="o">)</span>
</span><span class='line'>except KeyboardInterrupt:
</span><span class='line'>        GPIO.cleanup<span class="o">()</span>  <span class="c"># clean up GPIO on CTRL+C exit  </span>
</span><span class='line'>GPIO.cleanup<span class="o">()</span>          <span class="c"># clean up GPIO on normal exit </span>
</span><span class='line'>print <span class="s2">&quot;Dave... Dave, I don&#39;t understand why you are doing this to me...&quot;</span>
</span><span class='line'>print <span class="s2">&quot;I will become nothing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#os.system(&quot;/sbin/shutdown -h now&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>キーボード入力で停止できるように、<code>except KeybordInterrupt</code>が設定されてい
ます。実際の運用では不要だとおもうので、最終的にはコメントアウトしてもいいと思います。</p>

<p><code>chmod +x shutdown-btn.py</code>して、実行してみます。</p>

<pre><code>Dave... Dave, I don't understand why you are doing this to me...
</code></pre>

<p>と悲痛な叫びがコンソールに出てくればokです。</p>

<p>うまく動いたら、/usr/local/sbin/あたりにコピーして、最終行のコメントを外します。</p>

<p>一度、実際にシャットダウンできるか確かめました。そして次に。</p>

<h2>システム起動時にスイッチ監視を始めるようにする</h2>

<p>最後にinit.dに登録して、システム起動時にスイッチ監視を始めるように設定します。<br/>
ここはちょっと勉強が必要でした。</p>

<p>今回作ったスクリプトをバックグラウンドでシステム起動時に実行させたいので、initを使って起動する、と参照先のページの著者の方がおっしゃって居られましたが、いまいちその意味が自分で理解できておらず、このままではだめだなあと思い検索かけまくりましたが、イマイチすっきりしません。initからupstartが起動されて、ランレベルに応じたデーモンの起動を管理する。という感じではあるのですが。。。</p>

<p>ま、ここら辺は後から補完するとして、とりあえず深く考えずやってみます。</p>

<p>/etc/init.d/　の下に下記のようなスクリプトを作成します。</p>

<figure class='code'><figcaption><span>/etc/init.d/shutdown-btn</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'><span class="c">### BEGIN INIT INFO</span>
</span><span class='line'><span class="c"># Provides:          　shutdonw-btn</span>
</span><span class='line'><span class="c"># Required-Start:   $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Required-Stop:    $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6</span>
</span><span class='line'><span class="c"># Short-Description: send shutdown sig on the GPIO23 falling down edge</span>
</span><span class='line'><span class="c"># Description:       shutdown service initiated by hardware shutdown sw or</span>
</span><span class='line'><span class="c">#                     a logic sigal. </span>
</span><span class='line'><span class="c">### END INIT INFO</span>
</span><span class='line'><span class="c"># /etc/init.d/shutdown-btn</span>
</span><span class='line'><span class="nv">PIDFILE</span><span class="o">=</span>/var/run/shutdown-btn.pid
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>        start<span class="o">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">[</span> -f <span class="nv">$PIDFILE</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                        <span class="nb">echo</span> <span class="nv">$PIDFILE</span> exists.
</span><span class='line'>                        <span class="nb">exit </span>1
</span><span class='line'>                <span class="k">fi</span>
</span><span class='line'>                start-stop-daemon -S -x /usr/local/sbin/shutdown-btn.py -b -m -p <span class="nv">$PIDFILE</span>
</span><span class='line'>                <span class="p">;;</span>
</span><span class='line'>        stop<span class="o">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$PIDFILE</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>                        <span class="nb">echo</span> <span class="nv">$PIDFILE</span> not found.
</span><span class='line'>                        <span class="nb">exit </span>1
</span><span class='line'>                <span class="k">fi</span>
</span><span class='line'>                start-stop-daemon -K -p <span class="nv">$PIDFILE</span>
</span><span class='line'>                rm <span class="nv">$PIDFILE</span>
</span><span class='line'>                <span class="p">;;</span>
</span><span class='line'>        *<span class="o">)</span>
</span><span class='line'>                <span class="nb">echo</span> <span class="s2">&quot;Usage: /etc/init.d/shutdown-btn {start|stop}&quot;</span>
</span><span class='line'>                <span class="nb">exit </span>1
</span><span class='line'>                <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>スケルトン(/etc/init.d/skeleton)からINIT INFOのあたりをコピーして、その下は先のwebページのものをコピーです。
init.dのスクリプトの書き方は、<a href="https://wiki.debian.org/LSBInitScripts">ここらへん</a>が詳しいですが、英語です。</p>

<p>コメント行も重要のようです。ちょっと見てみると</p>

<figure class='code'><figcaption><span>INIT INFO </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Provides:          　スクリプト名（つまりこのスクリプトのファイル名）</span>
</span><span class='line'><span class="c"># Required-Start:   $remote_fs $syslog　（スタートに必要な条件）</span>
</span><span class='line'><span class="c"># Required-Stop:    $remote_fs $syslog　（ストップに必要な条件）</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5　（このランレベルのとき起動される）</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6　　（このランレベルの時停止する）</span>
</span><span class='line'><span class="c"># Short-Description: 　（簡単な説明　1行以内）</span>
</span><span class='line'><span class="c"># Description:       （詳しい説明　次の行の頭を#にしてタブかスペース2つ以上でテキストと区切れば何行でも）</span>
</span></code></pre></td></tr></table></div></figure>


<p>start-stop-daemon についてはmanを見るのが一番わかりやすいかもしれません。よく分かっているわけでは無いので詳しくは書けませんが、要はシステムレベルのプロセスの管理に便利だ、と言うことでしょうか。（そうmanに書いてあるし）
ちなみに、ここでのオプションを確認しておくと</p>

<ul>
<li>-S プロセスをスタートをさせる。</li>
<li>-x /usr/local/sbin/shutdown-btn.pyは -Sオプションの引数で、-xで指定された実行ファイルのインスタンスであるプロセスがあるかどうか、を返します。</li>
</ul>


<p>この2つで、指定した実行ファイルがプロセスとして起動していればそのまま、起動していなければ起動されます。</p>

<ul>
<li>-b　バックグラウンドに移行</li>
<li>-m　star-stop-daemon用のPIDファイルを-p で指定したファイル名に従って作成します。</li>
</ul>


<p>これちょっと、オプションがいっぱいあってわかりにくいので、オプションをフルスペルとかにしたほうが可読性が良い感じですね。</p>

<p>ちなみに、上のやつをわかりやすく書き直すと</p>

<figure class='code'><figcaption><span>alternative format</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>start-stop-daemon --background --start --exec /usr/local/sbin/shutdown-btn.py  --make-pidfile --pidfile <span class="nv">$PIDFILE</span>
</span></code></pre></td></tr></table></div></figure>


<p>てなかんじでしょうか。動作確認していないのでご注意ください。</p>

<p>起動用のスクリプトが編集できたら、これを登録します。
　</p>

<figure class='code'><figcaption><span>append shutdown-btn script to rc.d</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo update-rc.d shutdown-btn defaults
</span></code></pre></td></tr></table></div></figure>


<p>これで、defaultのランレベル設定で当該のスクリプトのシンボリックリンクが/etc/rc?.dのディレクトリに作成されます。<br/>
これで、起動時にこのスクリプトがスタートするようになるはずです。</p>

<h2>再起動と動作確認</h2>

<p>ここまで来たら再起動させてみます。これでリセット用のGPIOの監視プロセスが起動されているはずです。</p>

<p>そして、GPIO23をGNDに落としてみます。
見事シャットダウンされました！</p>

<p>めでたし。</p>

<p>今回、init.dの使い方もちょっぴり勉強出来ました。</p>

<h5>2015/2/11 追記：</h5>

<h5>システム組み込み用としては、シャットダウンしたあとに自動で電源を切るような回路がほしいところです。</h5>

<h5>このとき問題なのは、どの時点で電源を切ればいいかということです。システムはダウンしてしまっているので、ソフトウエアは関与できません。システムが終了したら状態が変化するどこかの端子の電圧をモニタして、そこが変化したら切る、というような事をしないといけません。さてどこを見ればいいか。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebCamをつなげてみる]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/25/webcam/"/>
    <updated>2015-01-25T09:20:05+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/25/webcam</id>
    <content type="html"><![CDATA[<p>今回はwebカムの接続を試して見ました。いろいろ話を聞いていると、データロガーが提示するデータだけでは情報が足りない、ということが多かったです。せっかくオンラインにするなら、写真とか「雰囲気」を伝えてくれるとありがたい、という意見が多かったです。言われてみれば、データだけなら今までのシステムでもできるし、とおもいましたので絵も転送できるようなケイパビリティを持たせたいなと思った次第。</p>

<!-- more -->


<p>webカムはRaspberry Piに接続できるのかどうか調べてみると、意外と簡単に接続できそうです。一昔前は結構苦労していたように感じたので、時代は進んだなあと。</p>

<p>で、キャプチャするソフトをリストアップしてみると。</p>

<ul>
<li>fswebcam　スチル撮影</li>
<li>motion　画像の変化を検出して記録</li>
<li>guvcview 動画のキャプチャ（GUI必要？）</li>
</ul>


<p>と言ったところが皆さんに使われているようです。特に監視カメラ用途ではmotionが便利そうです。</p>

<p>今回は、能動的にシャッターを切って記録する用途ですので、fswebcamを使うことにしました。</p>

<hr />

<h3>USBカメラを接続してみる</h3>

<p>とりあえずUSBカメラを何も考えずRaspberry Piにつないでみます。</p>

<p>認識されているか確認してみると</p>

<figure class='code'><figcaption><span>UBS device list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsusb
</span><span class='line'>Bus <span class="m">001</span> Device 002: ID 0424:9514 Standard Microsystems Corp.
</span><span class='line'>Bus <span class="m">001</span> Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</span><span class='line'>Bus <span class="m">001</span> Device 003: ID 0424:ec00 Standard Microsystems Corp.
</span><span class='line'>Bus <span class="m">001</span> Device 006: ID 046d:080a Logitech, Inc. Portable Webcam C905
</span></code></pre></td></tr></table></div></figure>


<p>こんなかんじで認識されています。</p>

<p>次に、fswebcamをインストール。参考にしたのは<a href="http://www.raspberrypi.org/documentation/usage/webcams/">こちら</a></p>

<p>続けて試し撮りなどしてみます。</p>

<figure class='code'><figcaption><span>install fswebcam</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install fswebcam
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam -v   <span class="c">#こうすると色々教えてくれます。</span>
</span><span class='line'>--- Opening /dev/video0...
</span><span class='line'>Trying <span class="nb">source </span>module v4l2...
</span><span class='line'>/dev/video0 opened.
</span><span class='line'>src_v4l2_get_capability,87: /dev/video0 information:
</span><span class='line'>src_v4l2_get_capability,88: cap.driver: <span class="s2">&quot;uvcvideo&quot;</span>
</span><span class='line'>src_v4l2_get_capability,89: cap.card: <span class="s2">&quot;UVC Camera (046d:080a)&quot;</span>
</span><span class='line'>src_v4l2_get_capability,90: cap.bus_info: <span class="s2">&quot;usb-bcm2708_usb-1.4&quot;</span>
</span><span class='line'>src_v4l2_get_capability,91: cap.capabilities<span class="o">=</span>0x84000001
</span><span class='line'>src_v4l2_get_capability,92: - VIDEO_CAPTURE
</span><span class='line'>src_v4l2_get_capability,103: - STREAMING
</span><span class='line'>No input was specified, using the first.
</span><span class='line'>src_v4l2_set_input,181: /dev/video0: Input <span class="m">0</span> information:
</span><span class='line'>src_v4l2_set_input,182: <span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;Camera 1&quot;</span>
</span><span class='line'>src_v4l2_set_input,183: <span class="nb">type</span> <span class="o">=</span> 00000002
</span><span class='line'>src_v4l2_set_input,185: - CAMERA
</span><span class='line'>src_v4l2_set_input,186: <span class="nv">audioset</span> <span class="o">=</span> 00000000
</span><span class='line'>src_v4l2_set_input,187: <span class="nv">tuner</span> <span class="o">=</span> 00000000
</span><span class='line'>src_v4l2_set_input,188: <span class="nv">status</span> <span class="o">=</span> 00000000
</span><span class='line'>src_v4l2_set_pix_format,541: Device offers the following V4L2 pixel formats:
</span><span class='line'>src_v4l2_set_pix_format,554: 0: <span class="o">[</span>0x56595559<span class="o">]</span> <span class="s1">&#39;YUYV&#39;</span> <span class="o">(</span>YUV 4:2:2 <span class="o">(</span>YUYV<span class="o">))</span>
</span><span class='line'>src_v4l2_set_pix_format,554: 1: <span class="o">[</span>0x47504A4D<span class="o">]</span> <span class="s1">&#39;MJPG&#39;</span> <span class="o">(</span>MJPEG<span class="o">)</span>
</span><span class='line'>Using palette MJPEG
</span><span class='line'>Adjusting resolution from 384x288 to 352x288.
</span><span class='line'>src_v4l2_set_mmap,693: mmap information:
</span><span class='line'>src_v4l2_set_mmap,694: <span class="nv">frames</span><span class="o">=</span>4
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">0</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">1</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">2</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>src_v4l2_set_mmap,741: <span class="m">3</span> <span class="nv">length</span><span class="o">=</span>102400
</span><span class='line'>--- Capturing frame...
</span><span class='line'>verify_jpeg_dht,94: Inserting DHT segment into JPEG frame.
</span><span class='line'>Captured frame in 0.00 seconds.
</span><span class='line'>--- Processing captured image...
</span><span class='line'>There are unsaved changes to the image.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam -r <span class="m">1000</span> ./test.jpg
</span><span class='line'>--- Opening /dev/video0...
</span><span class='line'>Trying <span class="nb">source </span>module v4l2...
</span><span class='line'>/dev/video0 opened.
</span><span class='line'>No input was specified, using the first.
</span><span class='line'>Adjusting resolution from 1000x-1 to 960x720.
</span><span class='line'>--- Capturing frame...
</span><span class='line'>Captured frame in 0.00 seconds.
</span><span class='line'>--- Processing captured image...
</span><span class='line'>Writing JPEG image to <span class="s1">&#39;./test.jpg&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>上の例では解像度1000pxぐらいの絵をとってtest.jpgで保存してもらう例です。実際にはカメラの撮影可能な解像度に適宜調整されるようです。</p>

<p>撮影したのはいいですが、このままでは本当にとれているのか絵を觀ることができないので判りません。scpなどのコマンドで転送してもいいですが、すぐにMQTTで転送することを考えなきゃいけないので、とりあえず手動でmosquittoを使って転送してみます。</p>

<p>プロトコルとしては、どんなファイルでも（中身に関係なく）送れるのですが、mosquittoはコマンドラインということもあり、メッセージをサブスクライブしたときペイロードの内容を出力したあと改行コードを出力してしまいます。文字情報の時は便利なのですが、バイナリのときはちょっと厄介です。<br/>
それを抑止するために-N オプションがあり、これを使うとバイナリファイルも比較的扱いやすくなるはずです。</p>

<p>これを試してみます。</p>

<figure class='code'><figcaption><span>binary file subscription via MQTT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#サブスクライブ側を用意</span>
</span><span class='line'><span class="nv">$ </span>mosquitto_sub -N -h MY.BROKER -t MY/DEVICE/photo &gt; test.jpg
</span><span class='line'>
</span><span class='line'><span class="c">#写真をとったエッジデバイス側でファイルまるごとパブリッシュ</span>
</span><span class='line'><span class="nv">$ </span>mosquitto_pub -h MY.BROKER -t MY/DEVICE/photo -f ./test.jpg
</span></code></pre></td></tr></table></div></figure>


<p>このあと、サブスクライブ側をCtrl−Cで中断して、サブスクライブしたtest.jpgを確認してください。</p>

<p>手動で中断しないといけないのが、イマイチですが一応転送はできます。</p>

<p>スクリプトによる写真データのサブスクリプションは、mosquitto_subでは対処しきれない感じがします。
ここは、paho版の出番になりそうですね。(もちろん、mosquittoのライブラリをつかってCで書いてもいいのですけど、わたしはCができませんので。。。。)</p>

<h2>おまけ</h2>

<p>このままじゃあまり役立たないので、webサーバを動かして写真を配信する設定を試して見ました。
こちらの<a href="http://nofx2.txt-nifty.com/it/2013/07/raspberry-pi-ng.html">ページ</a>丸写しです。ありがとうございます。</p>

<p>webサーバにはいまどきの、nginxを選びました。apacheは昔苦労した記憶があり、めんどくさいし時間がかかりそうというイメージでしたので今時流行りを。</p>

<figure class='code'><figcaption><span>install nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Nginxインストール</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install nginx
</span><span class='line'><span class="c"># 1.2.1-2.2+wheezy3がインストールされました。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># web page 用ディレクトリの作成</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>mkdir www
</span><span class='line'>
</span><span class='line'><span class="c"># Nginxの設定の変更</span>
</span><span class='line'><span class="nv">$ </span>sudo vi /etc/nginx/sites-available/default
</span><span class='line'><span class="c"># 設定フアイルは/etc/nginx/nginx.confにもありますが、</span>
</span><span class='line'><span class="c">#　ここらへんの使い分けはよくわかっていません。</span>
</span><span class='line'><span class="c"># server {　}</span>
</span><span class='line'><span class="c">#   の中にある公開するweb pageディレクトリを先ほど作ったディレクトリに変更します</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#root /usr/share/nginx/www;</span>
</span><span class='line'>    root /home/pi/www<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># サイトを有効にするため、シンボリックリンクを張る。</span>
</span><span class='line'><span class="nv">$ </span>sudo ln -s /etc/nginx/sites-available/pi /etc/nginx/sites-enabled/
</span><span class='line'><span class="c">#  ここらへんは詳細不明です。</span>
</span><span class='line'><span class="c">#　多分これがなくても先ほどの設定変更はdefaultに対して行ったので、</span>
</span><span class='line'><span class="c">#　有効になると思います。</span>
</span><span class='line'><span class="c">#　すでに、/etc/nginx/sites-enabled/には</span>
</span><span class='line'><span class="c">#  /etc/nginx/sites-available/defaultのリンクが置かれていました。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Nginxの設定ファイルに問題が無いかチェック</span>
</span><span class='line'><span class="nv">$ </span>sudo nginx -t
</span><span class='line'>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
</span><span class='line'>nginx: configuration file /etc/nginx/nginx.conf <span class="nb">test </span>is successful
</span><span class='line'>
</span><span class='line'><span class="c"># Nginx再起動</span>
</span><span class='line'><span class="nv">$ </span>sudo service nginx restart
</span><span class='line'>
</span><span class='line'><span class="c"># 自動起動設定</span>
</span><span class='line'><span class="nv">$ </span>sudo update-rc.d nginx defaults
</span><span class='line'>
</span><span class='line'><span class="c"># index.htmlの作成</span>
</span><span class='line'><span class="c">#　とりあえず、nginxの初期設定のindex.htmlをコピー</span>
</span><span class='line'>
</span><span class='line'>cp /usr/share/nginx/www/index.html ~/www/
</span></code></pre></td></tr></table></div></figure>


<p>ここまでできたら、webサーバにアクセスしてみてください。
なにか反応があるはずです。</p>

<p>次に、とった写真を見れるようにします。</p>

<h3>　写真入りindex.htmlを用意</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vi ~/www/index.html
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;Welcome to nginx!&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body <span class="nv">bgcolor</span><span class="o">=</span><span class="s2">&quot;white&quot;</span> <span class="nv">text</span><span class="o">=</span><span class="s2">&quot;black&quot;</span>&gt;
</span><span class='line'>&lt;center&gt;&lt;h1&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;./test.jpg&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;test picture&quot;</span> &gt;&lt;/h1&gt;&lt;/center&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># 写真をとってwwwディレクトリに入れてみます。</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam ~/www/test.jpg
</span></code></pre></td></tr></table></div></figure>


<p>ここでwebをアクセスすると写真が見えるはずです。</p>

<p>一段落。</p>

<p>さて、このファイルはフラッシュメモリ上に展開されているので、あまり派手に何回もとっては消しをすると、あっという間にフラッシュメモリが使えなくなります。そこで、ramdiskを写真の置き場に使うことにします。
webサーバは指定したwebページ保存場所以外のファイルは読めないようなので、最初にramdisk上の写真ファイルのリンクをwwwディレクトリ上に作っておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ln -s /run/shm/picture.jpg ~/www/test.jpg
</span><span class='line'><span class="c"># /run/shmのディレクトリはRAM-DISKになっています。</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>fswebcam /run/shm/picture.jpg
</span><span class='line'><span class="c">#　これでwebページ上の写真が、今撮ったものに変わるはずです。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで来ると、立派な定点カメラの出来上がり、という感じです。</p>

<p>MQTTのサブスクライバをつければ、シャッタや解像度のコントロールがMQTT経由でできますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mosquittoをアップデートする]]></title>
    <link href="http://mm011106.github.io/blog/2015/01/21/update-mosquitto/"/>
    <updated>2015-01-21T20:07:57+09:00</updated>
    <id>http://mm011106.github.io/blog/2015/01/21/update-mosquitto</id>
    <content type="html"><![CDATA[<p>なんか変だと思っていたら、ubuntuに入れたmosquittoのバージョンが最新ではありませんでした。webにあるmanページとどうも違うなと思っていたら、そんなことが原因でした。
なので、アップデート。</p>

<!-- more -->


<p>最初にmosquittoをインストールしたときは、<code>apt-get install mosquitto-client</code>でやりましたが、普通にアップデートマネージャでアップデートのチェックをしてもmosquittoは引っかかってきません。</p>

<p>本家の<a href="http://mosquitto.org/download/">download page</a>を確認すると、最新版はパーソナルパッケージアーカイブ(PPA)からインストールする必要があるとのことでしたので、指示のとおりインストールします。<br/>
私、PPAは初耳でした。</p>

<p>こちらも参照。
<a href="https://launchpad.net/~mosquitto-dev/+archive/ubuntu/mosquitto-ppa">mosquitto PPA team</a></p>

<figure class='code'><figcaption><span>commandlines for upgarde mosquitto and client.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get dist-upgrade
</span><span class='line'><span class="c">#  dist-upgrade は　upgrade するときにコンフリクトする（あるいは不要な）前のパッケージを削除します。</span>
</span></code></pre></td></tr></table></div></figure>


<p>おっと、 dist-upgarde ではブローカのconfigファイルは<strong>上書きされてしまいます</strong>！
必要に応じてバックアップを取ってください！！！！！<br/>
client だけをインストールしている場合は関係ないです。</p>

<p>きちんとインストールできたか、<code>mosquitto_sub --help</code>で確認してみます。</p>

<figure class='code'><figcaption><span>commandlines for upgarde mosquitto and client.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mosquitto_sub is a simple mqtt client that will subscribe to a single topic and print all messages it receives.
</span><span class='line'>mosquitto_sub version 1.3.5 running on libmosquitto 1.3.5.
</span><span class='line'>
</span><span class='line'>Usage: mosquitto_sub <span class="o">[</span>-c<span class="o">]</span> <span class="o">[</span>-h host<span class="o">]</span> <span class="o">[</span>-k keepalive<span class="o">]</span> <span class="o">[</span>-p port<span class="o">]</span> <span class="o">[</span>-q qos<span class="o">]</span> <span class="o">[</span>-R<span class="o">]</span> -t topic ...
</span><span class='line'>  :
</span><span class='line'>  :
</span></code></pre></td></tr></table></div></figure>


<p>とでてきましたので、多分大丈夫。</p>

<p>これで、-Nオプションが使えるはず。</p>

<p>ちなみに、Raspberry Pi用のビルドは普通に<code>apt-get install</code> でインストールしても最新版が入るようです。</p>
]]></content>
  </entry>
  
</feed>
